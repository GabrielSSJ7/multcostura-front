{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\n\nvar _createReducer;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createActions, createReducer } from \"reduxsauce\";\n\nvar _createActions = createActions({\n  changeFile: [\"file\"],\n  cleanUpUpload: [\"clean\"]\n}),\n    Types = _createActions.Types,\n    Creators = _createActions.Creators;\n\nexport { Types, Creators };\nvar INITIAL_STATE = {\n  file: undefined,\n  key: _Date$now()\n};\n\nvar changeFile = function changeFile() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return _objectSpread({}, state, {\n    file: action.file\n  });\n};\n\nvar cleanUpUpload = function cleanUpUpload() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return _objectSpread({}, state, {\n    file: action.clean,\n    key: _Date$now()\n  });\n};\n\nexport default createReducer(INITIAL_STATE, (_createReducer = {}, _defineProperty(_createReducer, Types.CHANGE_FILE, changeFile), _defineProperty(_createReducer, Types.CLEAN_UP_UPLOAD, cleanUpUpload), _createReducer));","map":{"version":3,"sources":["/home/ti/Projects/WebProjects/multcostura/web-multcostura/src/ducks/upload.js"],"names":["createActions","createReducer","changeFile","cleanUpUpload","Types","Creators","INITIAL_STATE","file","undefined","key","state","action","clean","CHANGE_FILE","CLEAN_UP_UPLOAD"],"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,aAAT,EAAwBC,aAAxB,QAA6C,YAA7C;;qBAEmCD,aAAa,CAAC;AAC/CE,EAAAA,UAAU,EAAE,CAAC,MAAD,CADmC;AAE/CC,EAAAA,aAAa,EAAE,CAAC,OAAD;AAFgC,CAAD,C;IAAjCC,K,kBAAAA,K;IAAOC,Q,kBAAAA,Q;;;AAItB,IAAMC,aAAa,GAAG;AACpBC,EAAAA,IAAI,EAAEC,SADc;AAEpBC,EAAAA,GAAG,EAAE;AAFe,CAAtB;;AAIA,IAAMP,UAAU,GAAG,SAAbA,UAAa;AAAA,MAACQ,KAAD,uEAASJ,aAAT;AAAA,MAAwBK,MAAxB;AAAA,2BACdD,KADc;AAEjBH,IAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFI;AAAA,CAAnB;;AAKA,IAAMJ,aAAa,GAAG,SAAhBA,aAAgB;AAAA,MAACO,KAAD,uEAASJ,aAAT;AAAA,MAAwBK,MAAxB;AAAA,2BACjBD,KADiB;AAEpBH,IAAAA,IAAI,EAAEI,MAAM,CAACC,KAFO;AAGpBH,IAAAA,GAAG,EAAE;AAHe;AAAA,CAAtB;;AAKA,eAAeR,aAAa,CAACK,aAAD,wDACzBF,KAAK,CAACS,WADmB,EACLX,UADK,mCAEzBE,KAAK,CAACU,eAFmB,EAEDX,aAFC,mBAA5B","sourcesContent":["import { createActions, createReducer } from \"reduxsauce\";\n\nexport const { Types, Creators } = createActions({\n  changeFile: [\"file\"],\n  cleanUpUpload: [\"clean\"]\n});\nconst INITIAL_STATE = {\n  file: undefined,\n  key: Date.now()\n};\nconst changeFile = (state = INITIAL_STATE, action) => ({\n  ...state,\n  file: action.file\n});\n\nconst cleanUpUpload = (state = INITIAL_STATE, action) => ({\n  ...state,\n  file: action.clean,\n  key: Date.now()\n});\nexport default createReducer(INITIAL_STATE, {\n  [Types.CHANGE_FILE]: changeFile,\n  [Types.CLEAN_UP_UPLOAD]: cleanUpUpload\n});\n"]},"metadata":{},"sourceType":"module"}