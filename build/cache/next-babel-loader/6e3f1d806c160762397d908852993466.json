{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport setApi from '../../../api';\nimport { validateImage } from '../../../utils/validate';\nimport { Creators as UploadCreators } from '../../../ducks/upload';\nimport { Creators as ManufacturerCreators } from '../../../ducks/manufacturer';\nimport { Button, Input } from '../../../static/styled-components/base';\nexport default function AddManufacturer() {\n  const {\n    message,\n    messageType: result,\n    messageColor: color\n  } = useSelector(state => state.Utils);\n  const {\n    file\n  } = useSelector(state => state.Upload);\n  const dispatch = useDispatch();\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: name,\n    1: setName\n  } = useState('');\n  const {\n    0: description,\n    1: setDescription\n  } = useState('');\n\n  function createManufacturer() {\n    if (name) {\n      if (validateImage([\"png\"], 100, file)) {\n        const formData = new FormData();\n        formData.append(\"icon\", file);\n        setApi().post(`categories?name=${name}&description=${description}`, formData).then(response => {\n          dispatch(UtilsCreators.changeMessage(\"Categoria criada com sucesso\"));\n          dispatch(UtilsCreators.changeMessageType(true));\n          dispatch(UtilsCreators.changeMessageColor(\"green\"));\n          setVisible(true);\n          setName(\"\");\n          setDescription(\"\");\n          dispatch(UploadCreators.cleanUpUpload());\n          dispatch(UploadCreators.changeFile(null));\n          getCategories(function (err, manufacturers) {\n            if (err) {\n              dispatch(UtilsCreators.changeMessage(err));\n              dispatch(UtilsCreators.changeMessageType(false));\n              dispatch(UtilsCreators.changeMessageColor(\"red\"));\n              setVisible(true);\n              return;\n            }\n\n            dispatch(ManufacturerCreators.loadManufacturers(manufacturers));\n          });\n        }).catch(err => {\n          dispatch(UtilsCreators.changeMessage(err.response ? err.response.data : err.toString()));\n          dispatch(UtilsCreators.changeMessageType(false));\n          dispatch(UtilsCreators.changeMessageColor(\"red\"));\n          setVisible(true);\n        });\n      } else {\n        dispatch(UtilsCreators.changeMessage(\"Suba imagens PNG com no máximo 100KB\"));\n        dispatch(UtilsCreators.changeMessageType(false));\n        dispatch(UtilsCreators.changeMessageColor(\"red\"));\n        setVisible(true);\n      }\n    } else {\n      dispatch(UtilsCreators.changeMessage(\"O nome é necessário\"));\n      dispatch(UtilsCreators.changeMessageType(false));\n      dispatch(UtilsCreators.changeMessageColor(\"red\"));\n      setVisible(true);\n    }\n  }\n\n  return __jsx(React.Fragment, null, __jsx(\"h3\", {\n    className: \"main-title\",\n    style: {\n      color: \"rgb(129, 22, 27)\"\n    }\n  }, \"Adicionar nova categoria\"), __jsx(\"div\", null, __jsx(Input, {\n    placeholder: \"Nome\",\n    onChange: e => dispatch(CategoriesCreators.changeName(e.target.value)),\n    value: name\n  }), __jsx(TextArea, {\n    placeholder: \"Descri\\xE7\\xE3o\",\n    rows: \"3\",\n    onChange: e => dispatch(CategoriesCreators.changeDescription(e.target.value)),\n    value: description\n  }), __jsx(ImageContainer, {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\"\n    }\n  }, __jsx(Upload, {\n    labelInputFile: \"\\xCDcone para catgoria\",\n    onRef: ref => _this.child = ref\n  }))), visible ? __jsx(Message, {\n    result: result,\n    color: color,\n    message: message\n  }) : \"\", __jsx(Button, {\n    onClick: createManufacturer\n  }, \"Criar fabricante\"));\n}","map":{"version":3,"sources":["/home/ti/Projects/WebProjects/multcostura/web-multcostura/src/components/admin/manufacturers/AddManufacturer.jsx"],"names":["React","useState","useEffect","useSelector","useDispatch","setApi","validateImage","Creators","UploadCreators","ManufacturerCreators","Button","Input","AddManufacturer","message","messageType","result","messageColor","color","state","Utils","file","Upload","dispatch","visible","setVisible","name","setName","description","setDescription","createManufacturer","formData","FormData","append","post","then","response","UtilsCreators","changeMessage","changeMessageType","changeMessageColor","cleanUpUpload","changeFile","getCategories","err","manufacturers","loadManufacturers","catch","data","toString","e","CategoriesCreators","changeName","target","value","changeDescription","display","justifyContent","ref","_this","child"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport setApi from '../../../api'\nimport { validateImage } from '../../../utils/validate'\nimport { Creators as UploadCreators } from '../../../ducks/upload'\nimport { Creators as ManufacturerCreators } from '../../../ducks/manufacturer'\n\nimport { Button, Input } from '../../../static/styled-components/base'\n\nexport default function AddManufacturer() {\n  const { message, messageType: result, messageColor: color } = useSelector(\n    state => state.Utils\n  );\n  const { file } = useSelector(state => state.Upload);\n  const dispatch = useDispatch();\n  const [visible, setVisible] = useState(false);\n  const [name, setName] = useState('')\n  const [description, setDescription] = useState('')\n\n  function createManufacturer() {\n    if (name) {\n      if (validateImage([\"png\"], 100, file)) {\n        const formData = new FormData();\n        formData.append(\"icon\", file);\n        setApi()\n          .post(`categories?name=${name}&description=${description}`, formData)\n          .then(response => {\n            dispatch(\n              UtilsCreators.changeMessage(\"Categoria criada com sucesso\")\n            );\n            dispatch(UtilsCreators.changeMessageType(true));\n            dispatch(UtilsCreators.changeMessageColor(\"green\"));\n            setVisible(true);\n            setName(\"\")\n            setDescription(\"\")\n            dispatch(UploadCreators.cleanUpUpload());\n            dispatch(UploadCreators.changeFile(null));\n            getCategories(function(err, manufacturers) {\n              if (err) {\n                dispatch(UtilsCreators.changeMessage(err));\n                dispatch(UtilsCreators.changeMessageType(false));\n                dispatch(UtilsCreators.changeMessageColor(\"red\"));\n                setVisible(true);\n                return;\n              }\n              dispatch(ManufacturerCreators.loadManufacturers(manufacturers));\n            });\n          })\n          .catch(err => {\n            dispatch(\n              UtilsCreators.changeMessage(\n                err.response ? err.response.data : err.toString()\n              )\n            );\n            dispatch(UtilsCreators.changeMessageType(false));\n            dispatch(UtilsCreators.changeMessageColor(\"red\"));\n            setVisible(true);\n          });\n      } else {\n        dispatch(\n          UtilsCreators.changeMessage(\"Suba imagens PNG com no máximo 100KB\")\n        );\n        dispatch(UtilsCreators.changeMessageType(false));\n        dispatch(UtilsCreators.changeMessageColor(\"red\"));\n        setVisible(true);\n      }\n    } else {\n      dispatch(UtilsCreators.changeMessage(\"O nome é necessário\"));\n      dispatch(UtilsCreators.changeMessageType(false));\n      dispatch(UtilsCreators.changeMessageColor(\"red\"));\n      setVisible(true);\n    }\n  }\n\n  return (\n    <>\n      <h3 className=\"main-title\" style={{ color: \"rgb(129, 22, 27)\" }}>\n        Adicionar nova categoria\n      </h3>\n      <div>\n        <Input\n          placeholder=\"Nome\"\n          onChange={e =>\n            dispatch(CategoriesCreators.changeName(e.target.value))\n          }\n          value={name}\n        />\n        <TextArea\n          placeholder=\"Descrição\"\n          rows=\"3\"\n          onChange={e =>\n            dispatch(CategoriesCreators.changeDescription(e.target.value))\n          }\n          value={description}\n        />\n        <ImageContainer\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\"\n              }}\n            >\n              <Upload\n                labelInputFile=\"Ícone para catgoria\"\n                onRef={ref => (_this.child = ref)}\n              />\n            </ImageContainer>\n      </div>\n      {visible ? (\n        <Message result={result} color={color} message={message} />\n      ) : (\n        \"\"\n      )}\n      <Button onClick={createManufacturer}>Criar fabricante</Button>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}