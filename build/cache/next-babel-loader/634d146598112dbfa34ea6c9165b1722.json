{"ast":null,"code":"var _jsxFileName = \"/home/ti/Projects/WebProjects/multcostura/web-multcostura/src/components/admin/categories/addCategory.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from \"react\";\nimport styled from \"styled-components\";\nimport setApi from \"../../../api\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Creators as CategoriesCreators } from \"../../../ducks/categories\";\nimport { Creators as UploadCreators } from \"../../../ducks/upload\";\nimport { Creators as UtilsCreators } from \"../../../ducks/utils\";\nimport { getCategories } from \"../../../utils/categories\";\nimport { validateImage } from \"../../../utils/validate\";\nimport { Input, TextArea, Button } from \"../../../static/styled-components/base\";\nimport Message from \"../../utils/Message\";\nimport Upload from \"../../utils/Upload\";\nvar reactCtx = React.createContext({});\nexport default (function () {\n  var _this = useContext(reactCtx);\n\n  var _useSelector = useSelector(function (state) {\n    return state.Utils;\n  }),\n      message = _useSelector.message,\n      result = _useSelector.messageType,\n      color = _useSelector.messageColor;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.Categories;\n  }),\n      name = _useSelector2.name,\n      description = _useSelector2.description;\n\n  var _useSelector3 = useSelector(function (state) {\n    return state.Upload;\n  }),\n      file = _useSelector3.file;\n\n  var dispatch = useDispatch();\n\n  var _useState = useState(false),\n      visible = _useState[0],\n      setVisible = _useState[1];\n\n  function createCategory() {\n    if (name) {\n      if (validateImage([\"png\"], 100, file)) {\n        var formData = new FormData();\n        formData.append(\"icon\", file);\n        setApi().post(\"categories?name=\".concat(name, \"&description=\").concat(description), formData).then(function (response) {\n          dispatch(UtilsCreators.changeMessage(\"Categoria criada com sucesso\"));\n          dispatch(UtilsCreators.changeMessageType(true));\n          dispatch(UtilsCreators.changeMessageColor(\"green\"));\n          dispatch(CategoriesCreators.changeName(\"\"));\n          dispatch(CategoriesCreators.changeDescription(\"\"));\n          setVisible(true);\n          dispatch(UploadCreators.cleanUpUpload());\n          dispatch(UploadCreators.changeFile(null));\n          getCategories(function (err, categories) {\n            if (err) {\n              dispatch(UtilsCreators.changeMessage(err));\n              dispatch(UtilsCreators.changeMessageType(false));\n              dispatch(UtilsCreators.changeMessageColor(\"red\"));\n              setVisible(true);\n              return;\n            }\n\n            dispatch(CategoriesCreators.loadCategories(categories));\n          });\n        })[\"catch\"](function (err) {\n          dispatch(UtilsCreators.changeMessage(err.response ? err.response.data : err.toString()));\n          dispatch(UtilsCreators.changeMessageType(false));\n          dispatch(UtilsCreators.changeMessageColor(\"red\"));\n          setVisible(true);\n        });\n      } else {\n        dispatch(UtilsCreators.changeMessage(\"Suba imagens PNG com no máximo 100KB\"));\n        dispatch(UtilsCreators.changeMessageType(false));\n        dispatch(UtilsCreators.changeMessageColor(\"red\"));\n        setVisible(true);\n      }\n    } else {\n      dispatch(UtilsCreators.changeMessage(\"O nome é necessário\"));\n      dispatch(UtilsCreators.changeMessageType(false));\n      dispatch(UtilsCreators.changeMessageColor(\"red\"));\n      setVisible(true);\n    }\n  }\n\n  return __jsx(React.Fragment, null, __jsx(\"h3\", {\n    className: \"main-title\",\n    style: {\n      color: \"rgb(129, 22, 27)\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Adicionar nova categoria\"), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, __jsx(Input, {\n    placeholder: \"Nome\",\n    onChange: function onChange(e) {\n      return dispatch(CategoriesCreators.changeName(e.target.value));\n    },\n    value: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), __jsx(TextArea, {\n    placeholder: \"Descri\\xE7\\xE3o\",\n    rows: \"3\",\n    onChange: function onChange(e) {\n      return dispatch(CategoriesCreators.changeDescription(e.target.value));\n    },\n    value: description,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })), visible ? __jsx(Message, {\n    result: result,\n    color: color,\n    message: message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }) : \"\", __jsx(Button, {\n    onClick: createCategory,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"Criar categoria\"));\n});\nvar ImageContainer = styled.div.withConfig({\n  displayName: \"addCategory__ImageContainer\",\n  componentId: \"ig1tie-0\"\n})([\"img{max-width:120px;}\"]);","map":{"version":3,"sources":["/home/ti/Projects/WebProjects/multcostura/web-multcostura/src/components/admin/categories/addCategory.js"],"names":["React","useState","useContext","styled","setApi","useSelector","useDispatch","Creators","CategoriesCreators","UploadCreators","UtilsCreators","getCategories","validateImage","Input","TextArea","Button","Message","Upload","reactCtx","createContext","_this","state","Utils","message","result","messageType","color","messageColor","Categories","name","description","file","dispatch","visible","setVisible","createCategory","formData","FormData","append","post","then","response","changeMessage","changeMessageType","changeMessageColor","changeName","changeDescription","cleanUpUpload","changeFile","err","categories","loadCategories","data","toString","e","target","value","ImageContainer","div"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport styled from \"styled-components\";\nimport setApi from \"../../../api\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Creators as CategoriesCreators } from \"../../../ducks/categories\";\nimport { Creators as UploadCreators } from \"../../../ducks/upload\";\nimport { Creators as UtilsCreators } from \"../../../ducks/utils\";\nimport { getCategories } from \"../../../utils/categories\";\nimport { validateImage } from \"../../../utils/validate\";\nimport {\n  Input,\n  TextArea,\n  Button\n} from \"../../../static/styled-components/base\";\nimport Message from \"../../utils/Message\";\nimport Upload from \"../../utils/Upload\";\n\nconst reactCtx = React.createContext({});\n\nexport default () => {\n  const _this = useContext(reactCtx);\n  const { message, messageType: result, messageColor: color } = useSelector(\n    state => state.Utils\n  );\n  const { name, description } = useSelector(state => state.Categories);\n  const { file } = useSelector(state => state.Upload);\n  const dispatch = useDispatch();\n  const [visible, setVisible] = useState(false);\n\n  function createCategory() {\n    if (name) {\n      if (validateImage([\"png\"], 100, file)) {\n        const formData = new FormData();\n        formData.append(\"icon\", file);\n        setApi()\n          .post(`categories?name=${name}&description=${description}`, formData)\n          .then(response => {\n            dispatch(\n              UtilsCreators.changeMessage(\"Categoria criada com sucesso\")\n            );\n            dispatch(UtilsCreators.changeMessageType(true));\n            dispatch(UtilsCreators.changeMessageColor(\"green\"));\n            dispatch(CategoriesCreators.changeName(\"\"));\n            dispatch(CategoriesCreators.changeDescription(\"\"));\n            setVisible(true);\n            dispatch(UploadCreators.cleanUpUpload());\n            dispatch(UploadCreators.changeFile(null));\n            getCategories(function(err, categories) {\n              if (err) {\n                dispatch(UtilsCreators.changeMessage(err));\n                dispatch(UtilsCreators.changeMessageType(false));\n                dispatch(UtilsCreators.changeMessageColor(\"red\"));\n                setVisible(true);\n                return;\n              }\n              dispatch(CategoriesCreators.loadCategories(categories));\n            });\n          })\n          .catch(err => {\n            dispatch(\n              UtilsCreators.changeMessage(\n                err.response ? err.response.data : err.toString()\n              )\n            );\n            dispatch(UtilsCreators.changeMessageType(false));\n            dispatch(UtilsCreators.changeMessageColor(\"red\"));\n            setVisible(true);\n          });\n      } else {\n        dispatch(\n          UtilsCreators.changeMessage(\"Suba imagens PNG com no máximo 100KB\")\n        );\n        dispatch(UtilsCreators.changeMessageType(false));\n        dispatch(UtilsCreators.changeMessageColor(\"red\"));\n        setVisible(true);\n      }\n    } else {\n      dispatch(UtilsCreators.changeMessage(\"O nome é necessário\"));\n      dispatch(UtilsCreators.changeMessageType(false));\n      dispatch(UtilsCreators.changeMessageColor(\"red\"));\n      setVisible(true);\n    }\n  }\n\n  return (\n    <>\n      <h3 className=\"main-title\" style={{ color: \"rgb(129, 22, 27)\" }}>\n        Adicionar nova categoria\n      </h3>\n      <div>\n        <Input\n          placeholder=\"Nome\"\n          onChange={e =>\n            dispatch(CategoriesCreators.changeName(e.target.value))\n          }\n          value={name}\n        />\n        <TextArea\n          placeholder=\"Descrição\"\n          rows=\"3\"\n          onChange={e =>\n            dispatch(CategoriesCreators.changeDescription(e.target.value))\n          }\n          value={description}\n        />\n        {/* <ImageContainer\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\"\n          }}\n        >\n          <Upload\n            labelInputFile=\"Ícone para catgoria\"\n            onRef={ref => (_this.child = ref)}\n          />\n        </ImageContainer> */}\n      </div>\n      {visible ? (\n        <Message result={result} color={color} message={message} />\n      ) : (\n        \"\"\n      )}\n      <Button onClick={createCategory}>Criar categoria</Button>\n    </>\n  );\n};\nconst ImageContainer = styled.div`\n  img {\n    max-width: 120px;\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}