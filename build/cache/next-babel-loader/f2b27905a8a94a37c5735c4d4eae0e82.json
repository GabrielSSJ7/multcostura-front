{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createActions, createReducer } from \"reduxsauce\";\nexport const {\n  Types,\n  Creators\n} = createActions({\n  loadManufacturers: [\"manufacturers\"]\n});\nconst INITIAL_STATE = {\n  manufacturers: []\n};\n\nconst loadManufacturers = (state = INITIAL_STATE, action) => _objectSpread({}, state, {\n  manufacturers: action.clean\n});\n\nexport default createReducer(INITIAL_STATE, {\n  [Types.LOAD_MANUFACTURERS]: loadManufacturers\n});","map":{"version":3,"sources":["/home/ti/Projects/WebProjects/multcostura/web-multcostura/src/ducks/manufacturer.js"],"names":["createActions","createReducer","Types","Creators","loadManufacturers","INITIAL_STATE","manufacturers","state","action","clean","LOAD_MANUFACTURERS"],"mappings":";;;;;;;;;;;;AAAA,SAASA,aAAT,EAAwBC,aAAxB,QAA6C,YAA7C;AAEA,OAAO,MAAM;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,IAAsBH,aAAa,CAAC;AAC/CI,EAAAA,iBAAiB,EAAE,CAAC,eAAD;AAD4B,CAAD,CAAzC;AAGP,MAAMC,aAAa,GAAG;AACpBC,EAAAA,aAAa,EAAE;AADK,CAAtB;;AAGA,MAAMF,iBAAiB,GAAG,CAACG,KAAK,GAAGF,aAAT,EAAwBG,MAAxB,uBACrBD,KADqB;AAExBD,EAAAA,aAAa,EAAEE,MAAM,CAACC;AAFE,EAA1B;;AAIA,eAAeR,aAAa,CAACI,aAAD,EAAgB;AAC1C,GAACH,KAAK,CAACQ,kBAAP,GAA4BN;AADc,CAAhB,CAA5B","sourcesContent":["import { createActions, createReducer } from \"reduxsauce\";\n\nexport const { Types, Creators } = createActions({\n  loadManufacturers: [\"manufacturers\"]\n});\nconst INITIAL_STATE = {\n  manufacturers: []\n};\nconst loadManufacturers = (state = INITIAL_STATE, action) => ({\n  ...state,\n  manufacturers: action.clean\n});\nexport default createReducer(INITIAL_STATE, {\n  [Types.LOAD_MANUFACTURERS]: loadManufacturers\n});\n"]},"metadata":{},"sourceType":"module"}