{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport setApi from '../../../api';\nimport { validateImage } from '../../../utils/validate';\nimport { Creators as UploadCreators } from '../../../ducks/upload';\nexport default function AddManufacturer() {\n  var _useSelector = useSelector(function (state) {\n    return state.Utils;\n  }),\n      message = _useSelector.message,\n      result = _useSelector.messageType,\n      color = _useSelector.messageColor;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.Upload;\n  }),\n      file = _useSelector2.file;\n\n  var dispatch = useDispatch();\n\n  var _useState = useState(false),\n      visible = _useState[0],\n      setVisible = _useState[1];\n\n  var _useState2 = useState(''),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = useState(''),\n      description = _useState3[0],\n      setDescription = _useState3[1];\n\n  function createManufacturer() {\n    if (fabricantename) {\n      if (validateImage([\"png\"], 100, file)) {\n        var formData = new FormData();\n        formData.append(\"icon\", file);\n        setApi().post(\"categories?name=\".concat(name, \"&description=\").concat(description), formData).then(function (response) {\n          dispatch(UtilsCreators.changeMessage(\"Categoria criada com sucesso\"));\n          dispatch(UtilsCreators.changeMessageType(true));\n          dispatch(UtilsCreators.changeMessageColor(\"green\"));\n          setVisible(true);\n          setName(\"\");\n          setDescription(\"\");\n          dispatch(UploadCreators.cleanUpUpload());\n          dispatch(UploadCreators.changeFile(null));\n          getCategories(function (err, categories) {\n            if (err) {\n              dispatch(UtilsCreators.changeMessage(err));\n              dispatch(UtilsCreators.changeMessageType(false));\n              dispatch(UtilsCreators.changeMessageColor(\"red\"));\n              setVisible(true);\n              return;\n            }\n\n            dispatch(CategoriesCreators.loadCategories(categories));\n          });\n        })[\"catch\"](function (err) {\n          dispatch(UtilsCreators.changeMessage(err.response ? err.response.data : err.toString()));\n          dispatch(UtilsCreators.changeMessageType(false));\n          dispatch(UtilsCreators.changeMessageColor(\"red\"));\n          setVisible(true);\n        });\n      } else {\n        dispatch(UtilsCreators.changeMessage(\"Suba imagens PNG com no máximo 100KB\"));\n        dispatch(UtilsCreators.changeMessageType(false));\n        dispatch(UtilsCreators.changeMessageColor(\"red\"));\n        setVisible(true);\n      }\n    } else {\n      dispatch(UtilsCreators.changeMessage(\"O nome é necessário\"));\n      dispatch(UtilsCreators.changeMessageType(false));\n      dispatch(UtilsCreators.changeMessageColor(\"red\"));\n      setVisible(true);\n    }\n  }\n\n  return __jsx(React.Fragment, null, __jsx(\"h3\", {\n    className: \"main-title\",\n    style: {\n      color: \"rgb(129, 22, 27)\"\n    }\n  }, \"Adicionar nova categoria\"), __jsx(\"div\", null, __jsx(Input, {\n    placeholder: \"Nome\",\n    onChange: function onChange(e) {\n      return dispatch(CategoriesCreators.changeName(e.target.value));\n    },\n    value: name\n  }), __jsx(TextArea, {\n    placeholder: \"Descri\\xE7\\xE3o\",\n    rows: \"3\",\n    onChange: function onChange(e) {\n      return dispatch(CategoriesCreators.changeDescription(e.target.value));\n    },\n    value: description\n  }), __jsx(ImageContainer, {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\"\n    }\n  }, __jsx(Upload, {\n    labelInputFile: \"\\xCDcone para catgoria\",\n    onRef: function onRef(ref) {\n      return _this.child = ref;\n    }\n  }))), visible ? __jsx(Message, {\n    result: result,\n    color: color,\n    message: message\n  }) : \"\", __jsx(Button, {\n    onClick: createManufacturer\n  }, \"Criar fabricante\"));\n}","map":{"version":3,"sources":["/home/ti/Projects/WebProjects/multcostura/web-multcostura/src/components/admin/manufacturers/AddManufacturer.jsx"],"names":["React","useState","useEffect","useSelector","useDispatch","setApi","validateImage","Creators","UploadCreators","AddManufacturer","state","Utils","message","result","messageType","color","messageColor","Upload","file","dispatch","visible","setVisible","name","setName","description","setDescription","createManufacturer","fabricantename","formData","FormData","append","post","then","response","UtilsCreators","changeMessage","changeMessageType","changeMessageColor","cleanUpUpload","changeFile","getCategories","err","categories","CategoriesCreators","loadCategories","data","toString","e","changeName","target","value","changeDescription","display","justifyContent","ref","_this","child"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport setApi from '../../../api'\nimport { validateImage } from '../../../utils/validate'\nimport { Creators as UploadCreators } from '../../../ducks/upload'\n\nexport default function AddManufacturer() {\n  const { message, messageType: result, messageColor: color } = useSelector(\n    state => state.Utils\n  );\n  const { file } = useSelector(state => state.Upload);\n  const dispatch = useDispatch();\n  const [visible, setVisible] = useState(false);\n  const [name, setName] = useState('')\n  const [description, setDescription] = useState('')\n\n  function createManufacturer() {\n    if (fabricantename) {\n      if (validateImage([\"png\"], 100, file)) {\n        const formData = new FormData();\n        formData.append(\"icon\", file);\n        setApi()\n          .post(`categories?name=${name}&description=${description}`, formData)\n          .then(response => {\n            dispatch(\n              UtilsCreators.changeMessage(\"Categoria criada com sucesso\")\n            );\n            dispatch(UtilsCreators.changeMessageType(true));\n            dispatch(UtilsCreators.changeMessageColor(\"green\"));\n            setVisible(true);\n            setName(\"\")\n            setDescription(\"\")\n            dispatch(UploadCreators.cleanUpUpload());\n            dispatch(UploadCreators.changeFile(null));\n            getCategories(function(err, categories) {\n              if (err) {\n                dispatch(UtilsCreators.changeMessage(err));\n                dispatch(UtilsCreators.changeMessageType(false));\n                dispatch(UtilsCreators.changeMessageColor(\"red\"));\n                setVisible(true);\n                return;\n              }\n              dispatch(CategoriesCreators.loadCategories(categories));\n            });\n          })\n          .catch(err => {\n            dispatch(\n              UtilsCreators.changeMessage(\n                err.response ? err.response.data : err.toString()\n              )\n            );\n            dispatch(UtilsCreators.changeMessageType(false));\n            dispatch(UtilsCreators.changeMessageColor(\"red\"));\n            setVisible(true);\n          });\n      } else {\n        dispatch(\n          UtilsCreators.changeMessage(\"Suba imagens PNG com no máximo 100KB\")\n        );\n        dispatch(UtilsCreators.changeMessageType(false));\n        dispatch(UtilsCreators.changeMessageColor(\"red\"));\n        setVisible(true);\n      }\n    } else {\n      dispatch(UtilsCreators.changeMessage(\"O nome é necessário\"));\n      dispatch(UtilsCreators.changeMessageType(false));\n      dispatch(UtilsCreators.changeMessageColor(\"red\"));\n      setVisible(true);\n    }\n  }\n\n  return (\n    <>\n      <h3 className=\"main-title\" style={{ color: \"rgb(129, 22, 27)\" }}>\n        Adicionar nova categoria\n      </h3>\n      <div>\n        <Input\n          placeholder=\"Nome\"\n          onChange={e =>\n            dispatch(CategoriesCreators.changeName(e.target.value))\n          }\n          value={name}\n        />\n        <TextArea\n          placeholder=\"Descrição\"\n          rows=\"3\"\n          onChange={e =>\n            dispatch(CategoriesCreators.changeDescription(e.target.value))\n          }\n          value={description}\n        />\n        <ImageContainer\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\"\n              }}\n            >\n              <Upload\n                labelInputFile=\"Ícone para catgoria\"\n                onRef={ref => (_this.child = ref)}\n              />\n            </ImageContainer>\n      </div>\n      {visible ? (\n        <Message result={result} color={color} message={message} />\n      ) : (\n        \"\"\n      )}\n      <Button onClick={createManufacturer}>Criar fabricante</Button>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}