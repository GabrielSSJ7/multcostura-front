{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport setApi from \"../../../api\";\nimport { validateImage } from \"../../../utils/validate\";\nimport { Creators as UploadCreators } from \"../../../ducks/upload\";\nimport { Creators as ManufacturerCreators } from \"../../../ducks/manufacturer\";\nimport { Button, Input, TextArea } from \"../../../static/styled-components/base\";\nimport Upload from \"../../../components/utils/Upload\";\nexport default function AddManufacturer() {\n  const reactCtx = React.createContext({});\n\n  const _this = useContext(reactCtx);\n\n  const {\n    message,\n    messageType: result,\n    messageColor: color\n  } = useSelector(state => state.Utils);\n  const {\n    file\n  } = useSelector(state => state.Upload);\n  const dispatch = useDispatch();\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: name,\n    1: setName\n  } = useState(\"\");\n  const {\n    0: description,\n    1: setDescription\n  } = useState(\"\");\n  useEffect(() => {\n    setName('');\n    setDescription('');\n    dispatch(UploadCreators.cleanUpUpload());\n  }, []);\n\n  function createManufacturer() {\n    if (name) {\n      if (validateImage([\"png\"], 10000, file)) {\n        const formData = new FormData();\n        formData.append(\"icon\", file);\n        setApi().post(`categories?name=${name}&description=${description}`, formData).then(response => {\n          dispatch(UtilsCreators.changeMessage(\"Fabricante criada com sucesso\"));\n          dispatch(UtilsCreators.changeMessageType(true));\n          dispatch(UtilsCreators.changeMessageColor(\"green\"));\n          setVisible(true);\n          setName(\"\");\n          setDescription(\"\");\n          dispatch(UploadCreators.cleanUpUpload());\n          dispatch(UploadCreators.changeFile(null));\n          getCategories(function (err, manufacturers) {\n            if (err) {\n              dispatch(UtilsCreators.changeMessage(err));\n              dispatch(UtilsCreators.changeMessageType(false));\n              dispatch(UtilsCreators.changeMessageColor(\"red\"));\n              setVisible(true);\n              return;\n            }\n\n            dispatch(ManufacturerCreators.loadManufacturers(manufacturers));\n          });\n        }).catch(err => {\n          dispatch(UtilsCreators.changeMessage(err.response ? err.response.data : err.toString()));\n          dispatch(UtilsCreators.changeMessageType(false));\n          dispatch(UtilsCreators.changeMessageColor(\"red\"));\n          setVisible(true);\n        });\n      } else {\n        dispatch(UtilsCreators.changeMessage(\"Suba imagens PNG com no máximo 100KB\"));\n        dispatch(UtilsCreators.changeMessageType(false));\n        dispatch(UtilsCreators.changeMessageColor(\"red\"));\n        setVisible(true);\n      }\n    } else {\n      dispatch(UtilsCreators.changeMessage(\"O nome é necessário\"));\n      dispatch(UtilsCreators.changeMessageType(false));\n      dispatch(UtilsCreators.changeMessageColor(\"red\"));\n      setVisible(true);\n    }\n  }\n\n  return __jsx(React.Fragment, null, __jsx(\"h3\", {\n    className: \"main-title\",\n    style: {\n      color: \"rgb(129, 22, 27)\"\n    }\n  }, \"Adicionar nova categoria\"), __jsx(\"div\", null, __jsx(Input, {\n    placeholder: \"Nome\",\n    onChange: e => setName(e.target.value),\n    value: name\n  }), __jsx(TextArea, {\n    placeholder: \"Descri\\xE7\\xE3o\",\n    rows: \"3\",\n    onChange: e => setDescription(e.target.value),\n    value: description\n  }), __jsx(ImageContainer, {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\"\n    }\n  }, __jsx(Upload, {\n    labelInputFile: \"Logo fabricante\",\n    onRef: ref => _this.child = ref\n  }))), visible ? __jsx(Message, {\n    result: result,\n    color: color,\n    message: message\n  }) : \"\", __jsx(Button, {\n    onClick: createManufacturer\n  }, \"Criar fabricante\"));\n}\nconst ImageContainer = styled.div`\n  img {\n    max-width: 220px;\n  }\n`;","map":{"version":3,"sources":["/home/ti/Projects/WebProjects/multcostura/web-multcostura/src/components/admin/manufacturers/AddManufacturer.jsx"],"names":["React","useState","useEffect","useContext","useSelector","useDispatch","styled","setApi","validateImage","Creators","UploadCreators","ManufacturerCreators","Button","Input","TextArea","Upload","AddManufacturer","reactCtx","createContext","_this","message","messageType","result","messageColor","color","state","Utils","file","dispatch","visible","setVisible","name","setName","description","setDescription","cleanUpUpload","createManufacturer","formData","FormData","append","post","then","response","UtilsCreators","changeMessage","changeMessageType","changeMessageColor","changeFile","getCategories","err","manufacturers","loadManufacturers","catch","data","toString","e","target","value","display","justifyContent","ref","child","ImageContainer","div"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\n\nimport setApi from \"../../../api\";\nimport { validateImage } from \"../../../utils/validate\";\nimport { Creators as UploadCreators } from \"../../../ducks/upload\";\nimport { Creators as ManufacturerCreators } from \"../../../ducks/manufacturer\";\n\nimport {\n  Button,\n  Input,\n  TextArea\n} from \"../../../static/styled-components/base\";\nimport Upload from \"../../../components/utils/Upload\";\n\nexport default function AddManufacturer() {\n  const reactCtx = React.createContext({});\n  const _this = useContext(reactCtx);\n  const { message, messageType: result, messageColor: color } = useSelector(\n    state => state.Utils\n  );\n  const { file } = useSelector(state => state.Upload);\n  const dispatch = useDispatch();\n  const [visible, setVisible] = useState(false);\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n\n  useEffect(() => {\n      setName('')\n      setDescription('')\n      dispatch(UploadCreators.cleanUpUpload())\n  }, [])\n\n  function createManufacturer() {\n    if (name) {\n      if (validateImage([\"png\"], 10000, file)) {\n        const formData = new FormData();\n        formData.append(\"icon\", file);\n        setApi()\n          .post(`categories?name=${name}&description=${description}`, formData)\n          .then(response => {\n            dispatch(\n              UtilsCreators.changeMessage(\"Fabricante criada com sucesso\")\n            );\n            dispatch(UtilsCreators.changeMessageType(true));\n            dispatch(UtilsCreators.changeMessageColor(\"green\"));\n            setVisible(true);\n            setName(\"\");\n            setDescription(\"\");\n            dispatch(UploadCreators.cleanUpUpload());\n            dispatch(UploadCreators.changeFile(null));\n            getCategories(function(err, manufacturers) {\n              if (err) {\n                dispatch(UtilsCreators.changeMessage(err));\n                dispatch(UtilsCreators.changeMessageType(false));\n                dispatch(UtilsCreators.changeMessageColor(\"red\"));\n                setVisible(true);\n                return;\n              }\n              dispatch(ManufacturerCreators.loadManufacturers(manufacturers));\n            });\n          })\n          .catch(err => {\n            dispatch(\n              UtilsCreators.changeMessage(\n                err.response ? err.response.data : err.toString()\n              )\n            );\n            dispatch(UtilsCreators.changeMessageType(false));\n            dispatch(UtilsCreators.changeMessageColor(\"red\"));\n            setVisible(true);\n          });\n      } else {\n        dispatch(\n          UtilsCreators.changeMessage(\"Suba imagens PNG com no máximo 100KB\")\n        );\n        dispatch(UtilsCreators.changeMessageType(false));\n        dispatch(UtilsCreators.changeMessageColor(\"red\"));\n        setVisible(true);\n      }\n    } else {\n      dispatch(UtilsCreators.changeMessage(\"O nome é necessário\"));\n      dispatch(UtilsCreators.changeMessageType(false));\n      dispatch(UtilsCreators.changeMessageColor(\"red\"));\n      setVisible(true);\n    }\n  }\n\n  return (\n    <>\n      <h3 className=\"main-title\" style={{ color: \"rgb(129, 22, 27)\" }}>\n        Adicionar nova categoria\n      </h3>\n      <div>\n        <Input\n          placeholder=\"Nome\"\n          onChange={e => setName(e.target.value) }\n          value={name}\n        />\n        <TextArea\n          placeholder=\"Descrição\"\n          rows=\"3\"\n          onChange={e => setDescription(e.target.value)}\n          value={description}\n        />\n        <ImageContainer\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\"\n          }}\n        >\n          <Upload\n            labelInputFile=\"Logo fabricante\"\n            onRef={ref => (_this.child = ref)}\n          />\n        </ImageContainer>\n      </div>\n      {visible ? (\n        <Message result={result} color={color} message={message} />\n      ) : (\n        \"\"\n      )}\n      <Button onClick={createManufacturer}>Criar fabricante</Button>\n    </>\n  );\n}\n\nconst ImageContainer = styled.div`\n  img {\n    max-width: 220px;\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}