{"ast":null,"code":"import setApi from \"../api\";\nimport { fieldValidation, validateImage } from \"../utils/validate\";\nexport function getTools(cb, data) {\n  const filter = data ? data : {};\n  setApi().get(`/tools?search=${filter.search}`).then(response => {\n    cb(null, response.data);\n  }).catch(err => {\n    cb(err.response ? err.response.data : err.toString());\n  });\n}\nexport function getTool(id, cb) {\n  setApi().get(`/tools/${id}`).then(response => {\n    cb(null, response.data);\n  }).catch(err => {\n    cb(err.response ? err.response.data : err.toString());\n  });\n}\nexport async function getOptions(cb) {\n  try {\n    const manufacturers = await setApi().get(\"/manufacturer\");\n    const categories = await setApi().get(\"/categories\");\n    cb(null, {\n      manufacturers,\n      categories\n    });\n  } catch (e) {\n    cb(e);\n  }\n}\nexport function deleteImage(id, type, image, cb) {\n  setApi().delete(`/images?id=${id}&type=${type}&image=${image}`).then(response => {\n    cb(null);\n  }).catch(err => {\n    cb(err.response ? err.response.data : err.toString());\n  });\n}\nexport async function updateTool(tool, toolFile, cb) {\n  const {\n    id,\n    name,\n    description,\n    mainFeatures,\n    manufacturer\n  } = tool;\n  const formData = new FormData();\n  formData.append(\"name\", name);\n  formData.append(\"description\", description);\n  formData.append(\"mainFeatures\", mainFeatures);\n  formData.append(\"manufacturer\", manufacturer);\n  const toolFileKeys = Object.keys(toolFile);\n  toolFileKeys.forEach(mkey => {\n    formData.append(\"toolsFiles\", toolFile[mkey]);\n  });\n  setApi().put(\"/tools/\" + id, formData).then(response => {\n    cb(null, response.data);\n  }).catch(err => {\n    cb(err.response ? err.response.data : err.toString());\n  });\n}\nexport function addTool(tool, toolFiles, cb) {\n  const formData = new FormData();\n  const toolFilesKeys = Object.keys(toolFiles);\n  let hasError = [false];\n  toolFilesKeys.forEach(mkey => {\n    hasError[0] = !validateImage([\"png\", \"jpg\", \"jpeg\", \"svg\", \"gif\", \"webp\"], 10000, toolFiles[mkey]);\n    formData.append(\"toolsFiles\", toolFiles[mkey]);\n  });\n\n  if (hasError.includes(true)) {\n    return cb(\"Você precisa subir imagens png, jpg, jpeg, svg, gif, webp com no máximo 10MB\");\n  }\n\n  const fieldError = fieldValidation({\n    nome: tool.name,\n    subtítulo: tool.description\n  });\n\n  if (fieldError.return) {\n    formData.append(\"name\", tool.name);\n    formData.append(\"manufacturer\", tool.manufacturer);\n    formData.append(\"description\", tool.description);\n    formData.append(\"mainFeatures\", tool.mainFeatures);\n    setApi().post(`tools`, formData).then(response => {\n      cb(null, response.data);\n    }).catch(err => {\n      cb(err.response ? err.response.data : err.toString());\n    });\n  } else {\n    return cb(`${fieldError.message} ${fieldError.field}`);\n  }\n}\nexport function deleteTool(id, cb) {\n  setApi().delete(`/tools/${id}`).then(response => {\n    cb(null, response.data);\n  }).catch(err => {\n    cb(err.response ? err.response.data : err.toString());\n  });\n}","map":null,"metadata":{},"sourceType":"module"}