{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch } from 'react-redux';\nimport setApi from '../../../api';\nimport Head from 'next/head';\nimport InputMask from \"react-input-mask\";\nimport { Input, Button, Column } from \"../../../static/styled-components/base\";\nimport { getResellers } from '../../../utils/reseller';\nimport Message from \"../../utils/Message\";\nimport { Creators as ResellerCreators } from '../../../ducks/resellers';\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Alert from \"@material-ui/lab/Alert\";\nexport default (() => {\n  const {\n    0: name,\n    1: setName\n  } = useState(\"\");\n  const {\n    0: email,\n    1: setEmail\n  } = useState(\"\");\n  const {\n    0: phone,\n    1: setPhone\n  } = useState(\"\");\n  const {\n    0: publicPlace,\n    1: setPublicPlace\n  } = useState(\"\");\n  const {\n    0: district,\n    1: setDistrict\n  } = useState(\"\");\n  const {\n    0: city,\n    1: setCity\n  } = useState(\"\");\n  const {\n    0: state,\n    1: setState\n  } = useState(\"\");\n  const {\n    0: country,\n    1: setCountry\n  } = useState(\"\");\n  const {\n    0: number,\n    1: setNumber\n  } = useState(\"\");\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: message,\n    1: setMessage\n  } = useState(\"\");\n  const {\n    0: result,\n    1: setResult\n  } = useState(false);\n  const {\n    0: color,\n    1: setColor\n  } = useState(\"red\");\n  const {\n    0: listAddress,\n    1: setListAddress\n  } = useState([]);\n  const {\n    0: listAddressVis,\n    1: setListAddressVis\n  } = useState(false);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(\"\");\n  const {\n    0: snackBar,\n    1: setSnackBar\n  } = useState({\n    result: \"success\",\n    open: false,\n    message: \"\"\n  });\n  const dispatch = useDispatch();\n  useEffect(() => {\n    async function asyncFunc() {\n      const response = await setApi().get(`http://dev.virtualearth.net/REST/v1/Autosuggest?query=${address}&maxResults=5&key=ArBcF40dX4IT5Co3SIxT7TfvEqq3VNdafH09G2lYGLmm1PvaaFwU-xHaQLjtmpDe`);\n      const fAddress = response.data.resourceSets[0].resources[0].value;\n      const sugestion = [];\n\n      for (let formattedAddress in response.data.resourceSets[0].resources[0].value) {\n        sugestion.push(fAddress[formattedAddress].address.formattedAddress);\n      }\n\n      setListAddress(sugestion);\n    }\n\n    asyncFunc();\n  }, [address]);\n\n  const focusOutEvent = event => {\n    timeout = setTimeout(() => {\n      setListAddressVis(false);\n    }, 100);\n  };\n\n  useEffect(() => {\n    const input = document.getElementById('searchBox');\n    let timeout = null;\n    input.addEventListener('focusout', focusOutEvent);\n    return () => {\n      clearTimeout(timeout);\n      input.removeEventListener('focusout', focusOutEvent);\n    };\n  }, []);\n\n  function handleClose() {\n    setSnackBar(_objectSpread({}, snackBar, {\n      open: false\n    }));\n  }\n\n  async function geoCoding(where) {\n    const response = await setApi().get(`http://dev.virtualearth.net/REST/v1/Locations?addressLine=${where}&maxResults=1&key=${process.env.mapsKey}`);\n    if (response.data.resourceSets[0].estimatedTotal != 0) return response.data.resourceSets[0].resources[0].geocodePoints;else {\n      setSnackBar({\n        open: true,\n        message: \"Não possível encontrar este endereço no mapa\",\n        result: 'error'\n      });\n      return false;\n    }\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: process.env.mapsKey,\n    async: true,\n    defer: true\n  })), __jsx(Snackbar, {\n    open: snackBar.open,\n    autoHideDuration: 3500,\n    onClose: handleClose\n  }, __jsx(Alert, {\n    severity: snackBar.result\n  }, snackBar.message)), __jsx(\"h3\", {\n    className: \"main-title\",\n    style: {\n      color: \"rgb(129, 22, 27)\"\n    }\n  }, \"Adicionar novo revendedor\"), __jsx(\"div\", null, __jsx(Row, null, __jsx(Input, {\n    placeholder: \"Nome\",\n    onChange: e => setName(e.target.value),\n    value: name,\n    onKeyDown: Enter,\n    style: {\n      flex: 2,\n      marginRight: \"5px\"\n    }\n  }), __jsx(Input, {\n    placeholder: \"Email\",\n    onChange: e => setEmail(e.target.value),\n    value: email,\n    style: {\n      flex: 2,\n      marginRight: \"5px\"\n    },\n    onKeyDown: Enter\n  }), __jsx(InputMask, {\n    style: {\n      flex: 1\n    },\n    placeholder: \"Telefone\",\n    onChange: e => setPhone(e.target.value),\n    value: phone,\n    mask: \"+99 99 99999-9999\",\n    maskChar: \" \",\n    className: \"form-control\",\n    onKeyDown: Enter\n  })), __jsx(Column, {\n    style: {\n      position: \"relative\"\n    }\n  }, __jsx(\"div\", {\n    id: \"printoutPanel\"\n  }), __jsx(\"div\", {\n    id: \"searchBoxContainer\"\n  }, __jsx(\"input\", {\n    onFocus: () => setListAddressVis(true),\n    className: \"form-control\",\n    type: \"text\",\n    autoComplete: \"new-password\",\n    placeholder: \"Digite o endere\\xE7o\",\n    id: \"searchBox\",\n    value: address,\n    onChange: e => setAddress(e.target.value)\n  })), listAddressVis ? __jsx(Column, {\n    onMouseEnter: () => setListAddressVis(true),\n    style: {\n      background: 'white',\n      boxShadow: '1px 1px 3px grey',\n      borderRadius: '5px',\n      padding: '10px',\n      position: \"absolute\",\n      top: \"50px\",\n      width: \"80%\"\n    }\n  }, listAddress.length > 0 ? listAddress.map((ad, i) => __jsx(Item, {\n    key: i,\n    onClick: () => {\n      setAddress(ad);\n      console.log(ad);\n    },\n    style: {\n      borderBottom: \"1px solid grey\"\n    }\n  }, ad)) : __jsx(Item, null, \"Nenhuma sugest\\xE3o encontrada\")) : '')), visible ? __jsx(Message, {\n    result: result,\n    color: color,\n    message: message\n  }) : \"\", __jsx(Button, {\n    onClick: () => createReseller()\n  }, \"Criar categoria\"));\n\n  async function createReseller() {\n    const geocode = await geoCoding(address);\n    if (!geocode) return;\n    setApi().post(`/reseller`, {\n      name,\n      phone,\n      email,\n      address: address,\n      geocode: {\n        lat: geocode[0].coordinates[0],\n        lng: geocode[0].coordinates[1]\n      }\n    }).then(response => {\n      setResult(true);\n      setColor(\"green\");\n      setMessage(\"Revendedor criado com sucesso\");\n      setVisible(true);\n      getResellers(function (err, data) {\n        dispatch(ResellerCreators.loadResellers(data));\n      });\n      resetForm();\n    }).catch(err => {\n      setResult(false);\n      setMessage(err.response ? err.response.data : err.toString());\n      setVisible(true);\n    });\n  }\n\n  function Enter(e) {\n    if (e.key == \"Enter\") {\n      createReseller();\n    }\n  }\n\n  function resetForm() {\n    setName(\"\");\n    setEmail(\"\");\n    setPhone(\"\");\n    setAddress(\"\");\n  }\n});\nimport styled from \"styled-components\";\nconst Item = styled.p.withConfig({\n  displayName: \"AddResellers__Item\",\n  componentId: \"sc-1jbnz8c-0\"\n})([\"font-size:1rem;cursor:pointer;transition:.4s;:hover{opacity:.9;color:#81161B;}z-index:9;margin:0;padding:12px 0;:last-child{border-bottom:none !important;}\"]);\nexport const Row = styled.div.withConfig({\n  displayName: \"AddResellers__Row\",\n  componentId: \"sc-1jbnz8c-1\"\n})([\"display:flex;width:100%;flex-direction:row;justify-content:space-between;input{margin-right:5px;}\"]);","map":null,"metadata":{},"sourceType":"module"}