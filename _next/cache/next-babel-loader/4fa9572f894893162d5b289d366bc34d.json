{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createActions, createReducer } from \"reduxsauce\";\nexport const {\n  Types,\n  Creators\n} = createActions({\n  changeFile: [\"file\"],\n  cleanUpUpload: [\"clean\"]\n});\nconst INITIAL_STATE = {\n  file: undefined,\n  key: Date.now()\n};\n\nconst changeFile = (state = INITIAL_STATE, action) => _objectSpread({}, state, {\n  file: action.file\n});\n\nconst cleanUpUpload = (state = INITIAL_STATE, action) => _objectSpread({}, state, {\n  file: action.clean,\n  key: Date.now()\n});\n\nexport default createReducer(INITIAL_STATE, {\n  [Types.CHANGE_FILE]: changeFile,\n  [Types.CLEAN_UP_UPLOAD]: cleanUpUpload\n});","map":null,"metadata":{},"sourceType":"module"}