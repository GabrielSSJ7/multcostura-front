{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'React';\nimport styled from 'styled-components';\nimport setApi from '../../api';\nimport { Row, Column, Select } from '../../static/styled-components/base';\nvar infobox, map;\n\nvar MapsQuest = /*#__PURE__*/function (_Component) {\n  _inherits(MapsQuest, _Component);\n\n  function MapsQuest(props) {\n    var _this;\n\n    _classCallCheck(this, MapsQuest);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapsQuest).call(this, props));\n    _this.state = {\n      states: [],\n      cities: [],\n      state: {\n        id: 'Selecione um estado',\n        name: null\n      },\n      city: null,\n      resellersFound: false\n    };\n    return _this;\n  }\n\n  _createClass(MapsQuest, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var response;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(setApi().get(\"/dist/locates.json\"));\n\n            case 2:\n              response = _context.sent;\n              this.setState({\n                states: response.data.estados,\n                cities: response.data.cidades\n              });\n              if (!this.props.showMultcostura) this.loadMapScenario();else this.setMultViewMap();\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"onChangeState\",\n    value: function onChangeState(e) {\n      var value;\n      return _regeneratorRuntime.async(function onChangeState$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              value = e.target.value.split(\"-\");\n              this.setState({\n                state: {\n                  id: value[0],\n                  name: value[1]\n                },\n                city: 'Selecione uma cidade'\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"onChangeCity\",\n    value: function onChangeCity(e) {\n      this.setState({\n        city: e.target.value\n      });\n    } //let map, infobox;\n\n  }, {\n    key: \"loadMapScenario\",\n    value: function loadMapScenario() {\n      var response, revendedores, revendedor, randomLocation, pin;\n      return _regeneratorRuntime.async(function loadMapScenario$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(setApi().get('/reseller'));\n\n            case 2:\n              response = _context3.sent;\n              //setResellers(response.data)\n              revendedores = response.data;\n              map = new Microsoft.Maps.Map(document.getElementById('map'), {}); //setMap(map)\n\n              for (revendedor in revendedores) {\n                //Create an infobox at the center of the map but don't show it.\n                infobox = new Microsoft.Maps.Infobox(map.getCenter(), {\n                  visible: false\n                }); //Assign the infobox to a map instance.\n\n                infobox.setMap(map); //Create a pushpin at a random location in the map bounds.\n\n                randomLocation = Microsoft.Maps.TestDataGenerator.getLocations(1, map.getBounds());\n                pin = new Microsoft.Maps.Pushpin({\n                  latitude: revendedores[revendedor].maps.lat,\n                  longitude: revendedores[revendedor].maps.lng,\n                  altitude: 0,\n                  altitudeReference: -1\n                }); //Store some metadata with the pushpin.\n\n                pin.metadata = {\n                  title: revendedores[revendedor].name,\n                  description: \"Endereço: \" + revendedores[revendedor].address + \"<br/> Tel: \" + revendedores[revendedor].phone + \"<br/> E-mail: \" + revendedores[revendedor].email\n                }; //Add a click event handler to the pushpin.\n\n                Microsoft.Maps.Events.addHandler(pin, 'click', this.pushpinClicked); //Add pushpin to the map.\n\n                map.entities.push(pin);\n              }\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"pushpinClicked\",\n    value: function pushpinClicked(e) {\n      //Make sure the infobox has metadata to display.\n      if (e.target.metadata) {\n        //Set the infobox options with the metadata of the pushpin.\n        infobox.setOptions({\n          location: e.target.getLocation(),\n          title: e.target.metadata.title,\n          description: e.target.metadata.description,\n          visible: true\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.state.state !== prevState.state) {\n        this.setViewMap(this.state.state, this.state.city);\n      }\n\n      if (this.state.city !== prevState.city) {\n        this.setViewMap(this.state.state, this.state.city);\n      }\n\n      if (prevProps !== this.props) {\n        console.log(this.props.showMultcostura); //if (this.props.showMultcostura)\n        //this.setMultViewMap();\n      }\n    }\n  }, {\n    key: \"setViewMap\",\n    value: function setViewMap(state, city) {\n      return _regeneratorRuntime.async(function setViewMap$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              //const map = new Microsoft.Maps.Map(document.getElementById('map'), {})\n              //const { map } = this.props\n              if (map) {\n                if (state || city) {\n                  Microsoft.Maps.loadModule('Microsoft.Maps.Search', function () {\n                    var searchManager = new Microsoft.Maps.Search.SearchManager(map);\n                    var requestOptions = {\n                      bounds: map.getBounds(),\n                      where: \"\".concat(city ? city + ', ' + state.id : state.name),\n                      callback: function callback(answer, userData) {\n                        map.setView({\n                          center: new Microsoft.Maps.Location(answer.results[0].location.latitude, answer.results[0].location.longitude),\n                          zoom: 11\n                        });\n                      }\n                    };\n                    searchManager.geocode(requestOptions);\n                  });\n                }\n              }\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"setMultViewMap\",\n    value: function setMultViewMap() {\n      return _regeneratorRuntime.async(function setMultViewMap$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              console.log(\"setMultViewMap\");\n              map = new Microsoft.Maps.Map(document.getElementById('map'), {});\n              Microsoft.Maps.loadModule('Microsoft.Maps.Search', function () {\n                var searchManager = new Microsoft.Maps.Search.SearchManager(map);\n                var requestOptions = {\n                  bounds: map.getBounds(),\n                  where: \"Rua Newton Prado, 71 Bom Retiro S\\xE3o Paulo SP\",\n                  callback: function callback(answer, userData) {\n                    var pushpin = new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(answer.results[0].location.latitude, answer.results[0].location.longitude), {\n                      text: 'M',\n                      title: 'Multcostura',\n                      subTitle: 'Rua Newton Prado, 71 Bom Retiro São Paulo SP'\n                    });\n                    map.entities.push(pushpin);\n                    map.setView({\n                      center: new Microsoft.Maps.Location(answer.results[0].location.latitude, answer.results[0].location.longitude),\n                      zoom: 17\n                    });\n                  }\n                };\n                searchManager.geocode(requestOptions);\n              });\n\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return this.props.showMultcostura ? __jsx(Row, {\n        id: \"map\",\n        style: {\n          width: \"87%\",\n          height: \"500px\",\n          marginBottom: \"10px\",\n          marginLeft: '10px',\n          minWidth: \"300px\",\n          flex: 1\n        }\n      }) : __jsx(Column, {\n        style: {\n          width: \"100%\",\n          marginTop: \"100px\"\n        },\n        ait: \"center\"\n      }, __jsx(\"h1\", {\n        style: {\n          color: \"#5B5B5B\"\n        }\n      }, \"Encontre um revendedor pr\\xF3ximo a voc\\xEA!\"), __jsx(Row, {\n        jc: \"space-around\",\n        ait: \"center\",\n        style: {\n          width: \"50%\",\n          flexWrap: \"wrap\"\n        }\n      }, __jsx(Select, {\n        style: {\n          minWidth: \"120px\",\n          margin: \"0 5px\",\n          width: \"160px\",\n          padding: \"0\",\n          background: \"transparent linear-gradient(180deg, #FCF6F6 0%, #D6D6D6 100%) 0% 0% no-repeat padding-box\",\n          height: \"40px\"\n        },\n        onChange: this.onChangeState.bind(this),\n        value: \"\".concat(this.state.state.id, \"-\").concat(this.state.state.name)\n      }, __jsx(\"option\", {\n        value: 'Selecione um estado'\n      }, \"Selecione um estado\"), this.state.states.map(function (st, i) {\n        return __jsx(\"option\", {\n          key: i,\n          value: \"\".concat(st.id, \"-\").concat(st.estado)\n        }, st.estado);\n      })), __jsx(Select, {\n        style: {\n          minWidth: \"120px\",\n          width: \"160px\",\n          margin: \"0 5px\",\n          padding: \"0\",\n          background: \"transparent linear-gradient(180deg, #FCF6F6 0%, #D6D6D6 100%) 0% 0% no-repeat padding-box\",\n          height: \"40px\"\n        },\n        onChange: this.onChangeCity.bind(this),\n        value: this.state.city\n      }, __jsx(\"option\", {\n        value: \"Selecione uma cidade\"\n      }, \"Selecione uma cidade\"), this.state.cities.filter(function (cit) {\n        return cit.estadoId == _this2.state.state.id ? cit : false;\n      }).map(function (cit, i) {\n        return __jsx(\"option\", {\n          key: i,\n          value: cit.id\n        }, cit.cidade);\n      }))), __jsx(Row, {\n        id: \"map\",\n        style: {\n          width: \"70%\",\n          height: \"500px\",\n          marginBottom: \"10px\",\n          marginTop: \"10px\"\n        }\n      }), __jsx(Row, {\n        style: {\n          flexWrap: \"wrap\"\n        }\n      }, this.props.resellers.filter(function (resel) {\n        var _this2$state = _this2.state,\n            city = _this2$state.city,\n            state = _this2$state.state;\n\n        if ((new RegExp(state.id).test(resel.address) || new RegExp(state.name).test(resel.address)) && new RegExp(city).test(resel.address)) {\n          return resel;\n        } else {\n          if (new RegExp(state.id).test(resel.address) || new RegExp(state.name).test(resel.address)) {\n            return resel;\n          }\n        }\n      }).map(function (resel, i) {\n        return __jsx(CardContainer, {\n          key: i\n        }, __jsx(Column, null, __jsx(Item, null, resel.name), __jsx(\"hr\", {\n          style: {\n            width: \"100%\"\n          }\n        }), __jsx(Item, null, resel.address), __jsx(Item, null, \"Tel: \", resel.phone), __jsx(Item, null, \"E-mail: \", resel.email)));\n      })));\n    }\n  }]);\n\n  return MapsQuest;\n}(Component);\n\nexport { MapsQuest as default };\nvar Item = styled.p.withConfig({\n  displayName: \"Map__Item\",\n  componentId: \"sc-1fuegwh-0\"\n})([\"margin:0;\"]);\nvar CardContainer = styled.div.withConfig({\n  displayName: \"Map__CardContainer\",\n  componentId: \"sc-1fuegwh-1\"\n})([\"flex:1;min-width:250px;max-width:250px;max-height:300px;overflow:hidden;cursor:pointer;display:flex;flex-direction:column;padding:15px;flex-wrap:no-wrap;margin-bottom:10px;margin-right:10px;img{width:100%;max-width:230px;display:block;margin:auto}:hover{box-shadow:0 14px 28px rgba(0,0,0,0.25),0 10px 10px rgba(0,0,0,0.22);}box-shadow:0 3px 6px rgba(0,0,0,0.16),0 3px 6px rgba(0,0,0,0.23);}\"]);\nvar SearchBtn = styled.span.withConfig({\n  displayName: \"Map__SearchBtn\",\n  componentId: \"sc-1fuegwh-2\"\n})([\"height:16px;background:#282D90 0% 0% no-repeat padding-box;box-shadow:1px 1px 6px #00000029;border-radius:3px;opacity:1;cursor:pointer;color:white;padding:10px;transition:.3s;:hover{opacity:.8;}\"]);","map":null,"metadata":{},"sourceType":"module"}