{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'React';\nimport styled from 'styled-components';\nimport setApi from '../../api';\nimport { Row, Column, Select } from '../../static/styled-components/base';\nlet infobox, map;\nexport default class MapsQuest extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      states: [],\n      cities: [],\n      state: {\n        id: 'Selecione um estado',\n        name: null\n      },\n      city: null,\n      resellersFound: false\n    };\n  }\n\n  async componentDidMount() {\n    const response = await setApi().get(\"/dist/locates.json\");\n    this.setState({\n      states: response.data.estados,\n      cities: response.data.cidades\n    });\n    if (!this.props.showMultcostura) this.loadMapScenario();else this.setMultViewMap();\n  }\n\n  async onChangeState(e) {\n    const value = e.target.value.split(\"-\");\n    this.setState({\n      state: {\n        id: value[0],\n        name: value[1]\n      },\n      city: 'Selecione uma cidade'\n    });\n  }\n\n  onChangeCity(e) {\n    this.setState({\n      city: e.target.value\n    });\n  } //let map, infobox;\n\n\n  async loadMapScenario() {\n    const response = await setApi().get('/reseller'); //setResellers(response.data)\n\n    const revendedores = response.data;\n    map = new Microsoft.Maps.Map(document.getElementById('map'), {}); //setMap(map)\n\n    for (let revendedor in revendedores) {\n      //Create an infobox at the center of the map but don't show it.\n      infobox = new Microsoft.Maps.Infobox(map.getCenter(), {\n        visible: false\n      }); //Assign the infobox to a map instance.\n\n      infobox.setMap(map); //Create a pushpin at a random location in the map bounds.\n\n      var randomLocation = Microsoft.Maps.TestDataGenerator.getLocations(1, map.getBounds());\n      var pin = new Microsoft.Maps.Pushpin({\n        latitude: revendedores[revendedor].maps.lat,\n        longitude: revendedores[revendedor].maps.lng,\n        altitude: 0,\n        altitudeReference: -1\n      }); //Store some metadata with the pushpin.\n\n      pin.metadata = {\n        title: revendedores[revendedor].name,\n        description: \"Endereço: \" + revendedores[revendedor].address + \"<br/> Tel: \" + revendedores[revendedor].phone + \"<br/> E-mail: \" + revendedores[revendedor].email\n      }; //Add a click event handler to the pushpin.\n\n      Microsoft.Maps.Events.addHandler(pin, 'click', this.pushpinClicked); //Add pushpin to the map.\n\n      map.entities.push(pin);\n    }\n  }\n\n  pushpinClicked(e) {\n    //Make sure the infobox has metadata to display.\n    if (e.target.metadata) {\n      //Set the infobox options with the metadata of the pushpin.\n      infobox.setOptions({\n        location: e.target.getLocation(),\n        title: e.target.metadata.title,\n        description: e.target.metadata.description,\n        visible: true\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.state !== prevState.state) {\n      this.setViewMap(this.state.state, this.state.city);\n    }\n\n    if (this.state.city !== prevState.city) {\n      this.setViewMap(this.state.state, this.state.city);\n    }\n\n    if (prevProps !== this.props) {\n      console.log(this.props.showMultcostura); //if (this.props.showMultcostura)\n      //this.setMultViewMap();\n    }\n  }\n\n  async setViewMap(state, city) {\n    //const map = new Microsoft.Maps.Map(document.getElementById('map'), {})\n    //const { map } = this.props\n    if (map) {\n      if (state || city) {\n        Microsoft.Maps.loadModule('Microsoft.Maps.Search', function () {\n          var searchManager = new Microsoft.Maps.Search.SearchManager(map);\n          var requestOptions = {\n            bounds: map.getBounds(),\n            where: `${city ? city + ', ' + state.id : state.name}`,\n            callback: function (answer, userData) {\n              map.setView({\n                center: new Microsoft.Maps.Location(answer.results[0].location.latitude, answer.results[0].location.longitude),\n                zoom: 11\n              });\n            }\n          };\n          searchManager.geocode(requestOptions);\n        });\n      }\n    }\n  }\n\n  async setMultViewMap() {\n    console.log(\"setMultViewMap\");\n    map = new Microsoft.Maps.Map(document.getElementById('map'), {});\n    Microsoft.Maps.loadModule('Microsoft.Maps.Search', function () {\n      var searchManager = new Microsoft.Maps.Search.SearchManager(map);\n      var requestOptions = {\n        bounds: map.getBounds(),\n        where: `Rua Newton Prado, 71 Bom Retiro São Paulo SP`,\n        callback: function (answer, userData) {\n          var pushpin = new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(answer.results[0].location.latitude, answer.results[0].location.longitude), {\n            text: 'M',\n            title: 'Multcostura',\n            subTitle: 'Rua Newton Prado, 71 Bom Retiro São Paulo SP'\n          });\n          map.entities.push(pushpin);\n          map.setView({\n            center: new Microsoft.Maps.Location(answer.results[0].location.latitude, answer.results[0].location.longitude),\n            zoom: 17\n          });\n        }\n      };\n      searchManager.geocode(requestOptions);\n    });\n  }\n\n  render() {\n    return this.props.showMultcostura ? __jsx(Row, {\n      id: \"map\",\n      style: {\n        width: \"87%\",\n        height: \"500px\",\n        marginBottom: \"10px\",\n        marginLeft: '10px',\n        minWidth: \"300px\",\n        flex: 1\n      }\n    }) : __jsx(Column, {\n      style: {\n        width: \"100%\",\n        marginTop: \"100px\"\n      },\n      ait: \"center\"\n    }, __jsx(\"h1\", {\n      style: {\n        color: \"#5B5B5B\"\n      }\n    }, \"Encontre um revendedor pr\\xF3ximo a voc\\xEA!\"), __jsx(Row, {\n      jc: \"space-around\",\n      ait: \"center\",\n      style: {\n        width: \"50%\",\n        flexWrap: \"wrap\"\n      }\n    }, __jsx(Select, {\n      style: {\n        minWidth: \"120px\",\n        margin: \"0 5px\",\n        width: \"160px\",\n        padding: \"0\",\n        background: \"transparent linear-gradient(180deg, #FCF6F6 0%, #D6D6D6 100%) 0% 0% no-repeat padding-box\",\n        height: \"40px\"\n      },\n      onChange: this.onChangeState.bind(this),\n      value: `${this.state.state.id}-${this.state.state.name}`\n    }, __jsx(\"option\", {\n      value: 'Selecione um estado'\n    }, \"Selecione um estado\"), this.state.states.map((st, i) => __jsx(\"option\", {\n      key: i,\n      value: `${st.id}-${st.estado}`\n    }, st.estado))), __jsx(Select, {\n      style: {\n        minWidth: \"120px\",\n        width: \"160px\",\n        margin: \"0 5px\",\n        padding: \"0\",\n        background: \"transparent linear-gradient(180deg, #FCF6F6 0%, #D6D6D6 100%) 0% 0% no-repeat padding-box\",\n        height: \"40px\"\n      },\n      onChange: this.onChangeCity.bind(this),\n      value: this.state.city\n    }, __jsx(\"option\", {\n      value: \"Selecione uma cidade\"\n    }, \"Selecione uma cidade\"), this.state.cities.filter(cit => cit.estadoId == this.state.state.id ? cit : false).map((cit, i) => __jsx(\"option\", {\n      key: i,\n      value: cit.id\n    }, cit.cidade)))), __jsx(Row, {\n      id: \"map\",\n      style: {\n        width: \"70%\",\n        height: \"500px\",\n        marginBottom: \"10px\",\n        marginTop: \"10px\"\n      }\n    }), __jsx(Row, {\n      style: {\n        flexWrap: \"wrap\"\n      }\n    }, this.props.resellers.filter(resel => {\n      const {\n        city,\n        state\n      } = this.state;\n\n      if ((new RegExp(state.id).test(resel.address) || new RegExp(state.name).test(resel.address)) && new RegExp(city).test(resel.address)) {\n        return resel;\n      } else {\n        if (new RegExp(state.id).test(resel.address) || new RegExp(state.name).test(resel.address)) {\n          return resel;\n        }\n      }\n    }).map((resel, i) => __jsx(CardContainer, {\n      key: i\n    }, __jsx(Column, null, __jsx(Item, null, resel.name), __jsx(\"hr\", {\n      style: {\n        width: \"100%\"\n      }\n    }), __jsx(Item, null, resel.address), __jsx(Item, null, \"Tel: \", resel.phone), __jsx(Item, null, \"E-mail: \", resel.email))))));\n  }\n\n}\nconst Item = styled.p.withConfig({\n  displayName: \"Map__Item\",\n  componentId: \"sc-1fuegwh-0\"\n})([\"margin:0;\"]);\nconst CardContainer = styled.div.withConfig({\n  displayName: \"Map__CardContainer\",\n  componentId: \"sc-1fuegwh-1\"\n})([\"flex:1;min-width:250px;max-width:250px;max-height:300px;overflow:hidden;cursor:pointer;display:flex;flex-direction:column;padding:15px;flex-wrap:no-wrap;margin-bottom:10px;margin-right:10px;img{width:100%;max-width:230px;display:block;margin:auto}:hover{box-shadow:0 14px 28px rgba(0,0,0,0.25),0 10px 10px rgba(0,0,0,0.22);}box-shadow:0 3px 6px rgba(0,0,0,0.16),0 3px 6px rgba(0,0,0,0.23);}\"]);\nconst SearchBtn = styled.span.withConfig({\n  displayName: \"Map__SearchBtn\",\n  componentId: \"sc-1fuegwh-2\"\n})([\"height:16px;background:#282D90 0% 0% no-repeat padding-box;box-shadow:1px 1px 6px #00000029;border-radius:3px;opacity:1;cursor:pointer;color:white;padding:10px;transition:.3s;:hover{opacity:.8;}\"]);","map":{"version":3,"sources":["C:/Users/Gluz/Projects/web/multcostura/multcostura-web/src/components/web/Map.jsx"],"names":["React","Component","styled","setApi","Row","Column","Select","infobox","map","MapsQuest","constructor","props","state","states","cities","id","name","city","resellersFound","componentDidMount","response","get","setState","data","estados","cidades","showMultcostura","loadMapScenario","setMultViewMap","onChangeState","e","value","target","split","onChangeCity","revendedores","Microsoft","Maps","Map","document","getElementById","revendedor","Infobox","getCenter","visible","setMap","randomLocation","TestDataGenerator","getLocations","getBounds","pin","Pushpin","latitude","maps","lat","longitude","lng","altitude","altitudeReference","metadata","title","description","address","phone","email","Events","addHandler","pushpinClicked","entities","push","setOptions","location","getLocation","componentDidUpdate","prevProps","prevState","setViewMap","console","log","loadModule","searchManager","Search","SearchManager","requestOptions","bounds","where","callback","answer","userData","setView","center","Location","results","zoom","geocode","pushpin","text","subTitle","render","width","height","marginBottom","marginLeft","minWidth","flex","marginTop","color","flexWrap","margin","padding","background","bind","st","i","estado","filter","cit","estadoId","cidade","resellers","resel","RegExp","test","Item","p","CardContainer","div","SearchBtn","span"],"mappings":"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","sourcesContent":["import React, { Component } from 'React'\nimport styled from 'styled-components'\n\nimport setApi from '../../api'\n\n\nimport { Row, Column, Select} from '../../static/styled-components/base'\nlet infobox, map\nexport default class MapsQuest extends Component {\n\n\tconstructor (props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tstates: [],\n\t\t\tcities: [],\n\t\t\tstate: {\n\t\t\t\tid: 'Selecione um estado',\n\t\t\t\tname: null\n\t\t\t},\n\t\t\tcity: null,\n\t\t\tresellersFound: false\n\t\t}\n\t}\n\n\tasync componentDidMount () {\n\t\tconst response = await setApi()\n\t\t\t\t.get(\"/dist/locates.json\")\n\t\t\t\t\n\t\tthis.setState({\n\t\t\tstates: response.data.estados,\n\t\t\tcities: response.data.cidades\n\t\t})\n\n\t\tif (!this.props.showMultcostura)\n\t\t\tthis.loadMapScenario()\n\t\telse \n\t\t\tthis.setMultViewMap()\n\t}\n\n\tasync onChangeState(e) {\n\t\tconst value = e.target.value.split(\"-\")\n\t\tthis.setState({\n\t\t\tstate: { \n\t\t\t\tid: value[0],\n\t\t\t\tname: value[1]\n\t\t\t},\n\t\t\tcity: 'Selecione uma cidade'\n\t\t})\n\t}\n\n\tonChangeCity(e) {\n\t\tthis.setState({\n\t\t\tcity: e.target.value\n\t\t})\n\t}\n\n\t //let map, infobox;\n     async loadMapScenario() {\n     \t const response = await setApi().get('/reseller')\n        //setResellers(response.data)\n        const revendedores = response.data\n          map = new Microsoft.Maps.Map(document.getElementById('map'), {})\n          //setMap(map)\n          for (let revendedor in revendedores){\n            //Create an infobox at the center of the map but don't show it.\n            infobox = new Microsoft.Maps.Infobox(map.getCenter(), {\n              visible: false\n            });\n\n            //Assign the infobox to a map instance.\n            infobox.setMap(map);\n\n            //Create a pushpin at a random location in the map bounds.\n            var randomLocation = Microsoft.Maps.TestDataGenerator.getLocations(1, map.getBounds());\n            \n            var pin = new Microsoft.Maps.Pushpin({\n              latitude: revendedores[revendedor].maps.lat,\n              longitude: revendedores[revendedor].maps.lng,\n              altitude: 0,\n              altitudeReference: -1\n            });\n\n            //Store some metadata with the pushpin.\n            pin.metadata = {\n                title: revendedores[revendedor].name,\n                description: \"Endereço: \" + revendedores[revendedor].address + \"<br/> Tel: \" + revendedores[revendedor].phone + \"<br/> E-mail: \" + revendedores[revendedor].email\n            };\n\n           //Add a click event handler to the pushpin.\n            Microsoft.Maps.Events.addHandler(pin, 'click', this.pushpinClicked);\n\n            //Add pushpin to the map.\n            map.entities.push(pin);\n          }\n        }\n\n        pushpinClicked(e) {\n          //Make sure the infobox has metadata to display.\n          if (e.target.metadata) {\n            //Set the infobox options with the metadata of the pushpin.\n            infobox.setOptions({\n                location: e.target.getLocation(),\n                title: e.target.metadata.title,\n                description: e.target.metadata.description,\n                visible: true\n            });\n          }\n        }\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\n  \t\tif (this.state.state !== prevState.state) {\n\t    \tthis.setViewMap(this.state.state, this.state.city);\n  \t\t}\n\n\t\tif (this.state.city !== prevState.city) {\n\t    \tthis.setViewMap(this.state.state, this.state.city);\n  \t\t}  \t\t\n\n  \t\tif (prevProps !== this.props) {\n  \t\t\tconsole.log(this.props.showMultcostura)\n  \t\t\t//if (this.props.showMultcostura)\n  \t\t\t\t//this.setMultViewMap();\n  \t\t}\n\t}\n\n\tasync setViewMap(state, city) {\n\t\t//const map = new Microsoft.Maps.Map(document.getElementById('map'), {})\n\t\t//const { map } = this.props\n\t\tif (map) {\n\t  \t\tif (state || city){\n\t\t  \t\tMicrosoft.Maps.loadModule('Microsoft.Maps.Search', function () {\n\t\t\t\t    var searchManager = new Microsoft.Maps.Search.SearchManager(map);\n\t\t\t\t    var requestOptions = {\n\t\t\t\t        bounds: map.getBounds(),\n\t\t\t\t        where: `${city ? city + ', ' + state.id : state.name}`,\n\t\t\t\t        callback: function (answer, userData) {\n\t\t\t\t            map.setView({ center: new Microsoft.Maps.Location(answer.results[0].location.latitude, answer.results[0].location.longitude), zoom: 11 });\n\t\t\t\t        }\n\t\t\t\t    };\n\t\t\t\t    searchManager.geocode(requestOptions);\n\t\t\t\t});\n\t  \t\t}\n  \t\t}\n\t}\n\n\t\tasync setMultViewMap() {\n\t\t\tconsole.log(\"setMultViewMap\")\n\t\t\tmap = new Microsoft.Maps.Map(document.getElementById('map'),{})\n\t  \t\tMicrosoft.Maps.loadModule('Microsoft.Maps.Search', function () {\n\t\t\t    var searchManager = new Microsoft.Maps.Search.SearchManager(map);\n\t\t\t    var requestOptions = {\n\t\t\t        bounds: map.getBounds(),\n\t\t\t        where: `Rua Newton Prado, 71 Bom Retiro São Paulo SP`,\n\t\t\t        callback: function (answer, userData) {\n\t\t\t        \tvar pushpin = new Microsoft.Maps.Pushpin(\n\t\t\t        \t\tnew Microsoft.Maps.Location(\n\t\t\t        \t\t\tanswer.results[0].location.latitude, answer.results[0].location.longitude),\n\t\t\t        \t\t\t{ text: 'M', title: 'Multcostura', subTitle: 'Rua Newton Prado, 71 Bom Retiro São Paulo SP' }\n\t\t\t        \t\t);\n\t\t\t\t\t\tmap.entities.push(pushpin);\n\n\t\t\t            map.setView({ center: new Microsoft.Maps.Location(answer.results[0].location.latitude, answer.results[0].location.longitude), zoom: 17 });\n\t\t\t        }\n\t\t\t    };\n\t\t\t\tsearchManager.geocode(requestOptions);\n\t\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\tthis.props.showMultcostura ? <Row id=\"map\" style={{ width: \"87%\", height: \"500px\", marginBottom: \"10px\", marginLeft: '10px', minWidth: \"300px\", flex: 1 }}></Row>\n\t\t\t : <Column style={{ width: \"100%\", marginTop: \"100px\" }} ait=\"center\">\n\t\t\t\t<h1 style={{ color: \"#5B5B5B\" }}>Encontre um revendedor próximo a você!</h1>\n\n\t\t\t\t<Row jc=\"space-around\" ait=\"center\" style={{ width: \"50%\", flexWrap: \"wrap\"}}>\n\t\t\t\t\t<Select \n\t\t\t\t\t\tstyle={{ \n\t\t\t\t\t\t\tminWidth: \"120px\", \n\t\t\t\t\t\t\tmargin: \"0 5px\",\n\t\t\t\t\t\t\twidth: \"160px\",\n\t\t\t\t\t\t\tpadding: \"0\",\n\t\t\t\t\t\t\tbackground: \"transparent linear-gradient(180deg, #FCF6F6 0%, #D6D6D6 100%) 0% 0% no-repeat padding-box\", \n\t\t\t\t\t\t\theight: \"40px\" \n\t\t\t\t\t\t}} \n\n\t\t\t\t\t\tonChange={this.onChangeState.bind(this)}\n\t\t\t\t\t\tvalue={`${this.state.state.id}-${this.state.state.name}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value={'Selecione um estado'} >Selecione um estado</option>\n\t\t\t\t\t\t{this.state.states.map((st, i) => <option key={i} value={`${st.id}-${st.estado}`}>{st.estado}</option>)}\n\t\t\t\t\t</Select>\n\n\t\t\t\t\t<Select \n\t\t\t\t\t\tstyle={{ \n\t\t\t\t\t\t\tminWidth: \"120px\", \n\t\t\t\t\t\t\twidth: \"160px\",\n\t\t\t\t\t\t\tmargin: \"0 5px\", \n\t\t\t\t\t\t\tpadding: \"0\",\n\t\t\t\t\t\t\tbackground: \"transparent linear-gradient(180deg, #FCF6F6 0%, #D6D6D6 100%) 0% 0% no-repeat padding-box\", \n\t\t\t\t\t\t\theight: \"40px\" \n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonChange={this.onChangeCity.bind(this)}\n\t\t\t\t\t\tvalue={this.state.city}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value='Selecione uma cidade'>Selecione uma cidade</option>\n\t\t\t\t\t\t{this.state.cities.filter(cit => cit.estadoId == this.state.state.id ? cit : false ).map((cit, i) => <option key={i} value={cit.id}>{cit.cidade}</option>)}\n\t\t\t\t\t</Select>\n\n\n\t\t\t\t\t\n\t\t\t\t</Row>\n\n\t\t\t\t<Row id=\"map\" style={{ width: \"70%\", height: \"500px\", marginBottom: \"10px\", marginTop: \"10px\" }}></Row>\n\t\t\t\t\t\n\t\t\t\t<Row style={{ flexWrap: \"wrap\"}}>\n\n\t\t\t\t\t{this.props.resellers.filter(resel => {\n\t\t\t\t\t\tconst { city, state } = this.state\n\t\t\t\t\t\tif((new RegExp(state.id).test(resel.address) || new RegExp(state.name).test(resel.address)) && new RegExp(city).test(resel.address)) {\n\t\t\t\t\t\t\treturn resel\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif ((new RegExp(state.id).test(resel.address) || new RegExp(state.name).test(resel.address))){ \n\t\t\t\t\t\t\t\treturn resel\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t}\n\t\t\t\t\t}).map((resel, i) => \n\t\t\t\t\t\t<CardContainer key={i}>\n\t\t\t\t\t\t\t<Column>\n\t\t\t\t\t\t\t\t<Item>{resel.name}</Item>\n\t\t\t\t\t\t\t\t<hr style={{ width: \"100%\" }} />\n\t\t\t\t\t\t\t\t<Item>{resel.address}</Item>\n\t\t\t\t\t\t\t\t<Item>Tel: {resel.phone}</Item>\n\t\t\t\t\t\t\t\t<Item>E-mail: {resel.email}</Item>\n\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t</CardContainer>)}\n\n\t\t\t\t</Row>\n\t\t\t</Column>\n\t\t)\n\t}\n}\n\nconst Item = styled.p`\n\tmargin: 0;\n`\n\nconst CardContainer = styled.div`\n\tflex: 1;\n  \tmin-width: 250px;\n  \tmax-width: 250px;\n\tmax-height: 300px;\n\toverflow: hidden;\n\tcursor: pointer;\n\tdisplay: flex;\n\tflex-direction: column;\n\tpadding: 15px;\n\tflex-wrap: no-wrap;\n\tmargin-bottom: 10px;\n\tmargin-right: 10px;\n\timg {\n\t\twidth: 100%;\n\t\tmax-width: 230px;\n\t\tdisplay: block;\n\t\tmargin: auto\n\t}\n\t:hover {\n\t\tbox-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n\t}\n\tbox-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\n\n}\n`;\n\nconst SearchBtn = styled.span`\n\theight: 16px;\n\tbackground: #282D90 0% 0% no-repeat padding-box;\n\tbox-shadow: 1px 1px 6px #00000029;\n\tborder-radius: 3px;\n\topacity: 1;\n\tcursor: pointer;\n\tcolor: white;\n\tpadding: 10px;\n\ttransition: .3s;\n\t:hover {\n\t\topacity: .8;\n\t}\n`"]},"metadata":{},"sourceType":"module"}