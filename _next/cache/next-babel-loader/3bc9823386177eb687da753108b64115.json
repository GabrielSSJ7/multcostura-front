{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nmodule.exports = {\n  changeFileName: function changeFileName(file, newName) {\n    if (file) {\n      var blob = file.slice(0, file.size, \"image/png\");\n      var typeFile = file.type.split(\"/\");\n      var newFile = new File([blob], \"\".concat(newName, \".\").concat(typeFile[1]), {\n        type: file.type\n      });\n      return newFile;\n    }\n  },\n  deleteImage: function deleteImage(id, type, image, _ref, cleanUpFile) {\n    var f = _ref.f,\n        files = _ref.files,\n        keys = _ref.keys;\n\n    _axios[\"default\"][\"delete\"](\"/images?id=\".concat(id, \"&type=\").concat(type, \"&image=\").concat(image)).then(function (response) {\n      cleanUpFile(f, files, keys);\n      location.reload();\n    })[\"catch\"](function (err) {});\n  },\n  renderInputOrImages: function renderInputOrImages(images, objLength, _exclude) {\n    var _images = [];\n    var exclude = _exclude || [];\n\n    var _loop = function _loop(x) {\n      var isNull = true;\n      images.forEach(function (img, i) {\n        var snBar = img.split(\"/\");\n        var sn = snBar[snBar.length - 1];\n\n        if (!exclude.includes(x)) {\n          if (x == sn[0]) {\n            isNull = false;\n\n            _images.push(img);\n          }\n        } else {\n          isNull = false;\n        }\n      });\n      if (isNull) _images.push(null);\n    };\n\n    for (var x = 0; x < objLength; x++) {\n      _loop(x);\n    }\n\n    return _images;\n  },\n  validateImage: function validateImage(types, size, file) {\n    if (!file) return true;\n    var ok = false,\n        filesize = size / 1000;\n    var fileType = file.type.split(\"/\");\n    types.forEach(function (types) {\n      if (types == fileType[1]) ok = true;\n    });\n    if (filesize > 100) ok = false;\n    if (ok) return true;else return false;\n  },\n  getNameImageFromUrl: function getNameImageFromUrl(url) {\n    var splitted = url.split(\"/\");\n    var image = splitted[splitted.length - 1];\n    var imageSplitted = image.split(\".\");\n    return imageSplitted[0];\n  }\n};","map":null,"metadata":{},"sourceType":"script"}