{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport Head from 'next/head';\nimport { Link } from \"../routes\";\nimport { connect } from \"react-redux\";\nimport { Column } from '../src/static/styled-components/base';\nimport Home from '../src/components/web/home/Home';\nimport Map from '../src/components/web/Map';\nimport SlideWeb from '../src/components/web/SlideWeb';\nimport Template from '../src/components/templates/Web';\nimport setApi from '../src/api';\n\nvar IndexPage = function IndexPage() {\n  var _useState = useState([]),\n      resellers = _useState[0],\n      setResellers = _useState[1];\n\n  var _useState2 = useState([]),\n      images = _useState2[0],\n      setImages = _useState2[1];\n\n  var _useState3 = useState(null),\n      map = _useState3[0],\n      setMap = _useState3[1];\n\n  var _useState4 = useState(),\n      infobox = _useState4[0],\n      setInfobox = _useState4[1];\n\n  useEffect(function () {\n    function async() {\n      var loadMapScenario, pushpinClicked, response, revendedores, _map, _infobox;\n\n      return _regeneratorRuntime.async(function async$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setApi().get('/institutional/homeBanners').then(function (res) {\n                setImages(res.data);\n              })[\"catch\"](function (err) {});\n              _context.prev = 1;\n\n              loadMapScenario = function loadMapScenario() {\n                _map = new Microsoft.Maps.Map(document.getElementById('map'), {});\n                setMap(_map);\n\n                for (var revendedor in revendedores) {\n                  //Create an infobox at the center of the map but don't show it.\n                  _infobox = new Microsoft.Maps.Infobox(_map.getCenter(), {\n                    visible: false\n                  }); //Assign the infobox to a map instance.\n\n                  _infobox.setMap(_map); //Create a pushpin at a random location in the map bounds.\n\n\n                  var randomLocation = Microsoft.Maps.TestDataGenerator.getLocations(1, _map.getBounds());\n                  var pin = new Microsoft.Maps.Pushpin({\n                    latitude: revendedores[revendedor].maps.lat,\n                    longitude: revendedores[revendedor].maps.lng,\n                    altitude: 0,\n                    altitudeReference: -1\n                  }); //Store some metadata with the pushpin.\n\n                  pin.metadata = {\n                    title: revendedores[revendedor].name,\n                    description: \"Endere√ßo: \" + revendedores[revendedor].address + \"<br/> Tel: \" + revendedores[revendedor].phone + \"<br/> E-mail: \" + revendedores[revendedor].email\n                  }; //Add a click event handler to the pushpin.\n\n                  Microsoft.Maps.Events.addHandler(pin, 'click', pushpinClicked); //Add pushpin to the map.\n\n                  _map.entities.push(pin);\n                }\n              };\n\n              pushpinClicked = function pushpinClicked(e) {\n                //Make sure the infobox has metadata to display.\n                if (e.target.metadata) {\n                  //Set the infobox options with the metadata of the pushpin.\n                  _infobox.setOptions({\n                    location: e.target.getLocation(),\n                    title: e.target.metadata.title,\n                    description: e.target.metadata.description,\n                    visible: true\n                  });\n                }\n              }; //adMapScenario();\n\n\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(setApi().get('/reseller'));\n\n            case 6:\n              response = _context.sent;\n              setResellers(response.data);\n              revendedores = response.data;\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 11]], Promise);\n    }\n\n    async();\n  }, []);\n  return __jsx(Template, null, __jsx(Column, {\n    style: {\n      width: \"100%\"\n    }\n  }, __jsx(SlideWeb, {\n    images: images.map(function (img) {\n      return img.image;\n    })\n  }), __jsx(Home, null), __jsx(Map, {\n    map: map,\n    resellers: resellers\n  })));\n};\n\nIndexPage.getInitialProps = function (_ref) {\n  var reduxStore = _ref.reduxStore;\n  return {};\n};\n\nexport default IndexPage;","map":{"version":3,"sources":["C:/Users/Gluz/Projects/web/multcostura/multcostura-web/pages/index.js"],"names":["React","useEffect","useState","Head","Link","connect","Column","Home","Map","SlideWeb","Template","setApi","IndexPage","resellers","setResellers","images","setImages","map","setMap","infobox","setInfobox","async","get","then","res","data","err","loadMapScenario","Microsoft","Maps","document","getElementById","revendedor","revendedores","Infobox","getCenter","visible","randomLocation","TestDataGenerator","getLocations","getBounds","pin","Pushpin","latitude","maps","lat","longitude","lng","altitude","altitudeReference","metadata","title","name","description","address","phone","email","Events","addHandler","pushpinClicked","entities","push","e","target","setOptions","location","getLocation","response","console","log","width","img","image","getInitialProps","reduxStore"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Head from 'next/head'\nimport { Link } from \"../routes\";\nimport { connect } from \"react-redux\";\nimport { Column } from '../src/static/styled-components/base'\nimport Home from '../src/components/web/home/Home'\nimport Map from '../src/components/web/Map'\nimport SlideWeb from '../src/components/web/SlideWeb'\nimport Template from '../src/components/templates/Web'\nimport setApi from '../src/api'\n\n\n\nconst IndexPage = () => {\n  const [resellers, setResellers] = useState([]);\n\tconst [images, setImages] = useState([])\n  const [map, setMap] = useState(null)\n  const [infobox, setInfobox] = useState()\n\n  useEffect(() => {\n  \tasync function async() {\n\n      setApi()\n  \t\t\t.get('/institutional/homeBanners')\n  \t\t\t.then(res => {\n  \t\t\t\tsetImages(res.data)\n  \t\t\t})\n  \t\t\t.catch(err => {\n\n  \t\t\t})\n\n      try{\n        const response = await setApi().get('/reseller')\n        setResellers(response.data)\n        const revendedores = response.data\n\n        let map, infobox;\n        function loadMapScenario() {\n          map = new Microsoft.Maps.Map(document.getElementById('map'), {})\n          setMap(map)\n          for (let revendedor in revendedores){\n            //Create an infobox at the center of the map but don't show it.\n            infobox = new Microsoft.Maps.Infobox(map.getCenter(), {\n              visible: false\n            });\n\n            //Assign the infobox to a map instance.\n            infobox.setMap(map);\n\n            //Create a pushpin at a random location in the map bounds.\n            var randomLocation = Microsoft.Maps.TestDataGenerator.getLocations(1, map.getBounds());\n            \n            var pin = new Microsoft.Maps.Pushpin({\n              latitude: revendedores[revendedor].maps.lat,\n              longitude: revendedores[revendedor].maps.lng,\n              altitude: 0,\n              altitudeReference: -1\n            });\n\n            //Store some metadata with the pushpin.\n            pin.metadata = {\n                title: revendedores[revendedor].name,\n                description: \"Endere√ßo: \" + revendedores[revendedor].address + \"<br/> Tel: \" + revendedores[revendedor].phone + \"<br/> E-mail: \" + revendedores[revendedor].email\n            };\n\n           //Add a click event handler to the pushpin.\n            Microsoft.Maps.Events.addHandler(pin, 'click', pushpinClicked);\n\n            //Add pushpin to the map.\n            map.entities.push(pin);\n          }\n        }\n\n        function pushpinClicked(e) {\n          //Make sure the infobox has metadata to display.\n          if (e.target.metadata) {\n            //Set the infobox options with the metadata of the pushpin.\n            infobox.setOptions({\n                location: e.target.getLocation(),\n                title: e.target.metadata.title,\n                description: e.target.metadata.description,\n                visible: true\n            });\n          }\n        }\n\n        //adMapScenario();\n\n      } catch (e) {\n        console.log(e)\n      }\n  \t}   \n  \tasync();\n  }, [])\n  \n\n  return (\n    <Template>\n      <Column style={{ width: \"100%\" }}>\n        <SlideWeb images={images.map(img => img.image)} />\n        <Home />\n        <Map map={map} resellers={resellers}/>\n      </Column>\n    </Template>\n  );\n};\n\nIndexPage.getInitialProps = ({ reduxStore }) => {\n  return {};\n};\n\nexport default IndexPage\n"]},"metadata":{},"sourceType":"module"}