{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'React';\nimport styled from 'styled-components';\nimport setApi from '../../api';\nimport { Row, Column, Select } from '../../static/styled-components/base';\nvar infobox, map;\n\nvar MapsQuest = /*#__PURE__*/function (_Component) {\n  _inherits(MapsQuest, _Component);\n\n  function MapsQuest(props) {\n    var _this;\n\n    _classCallCheck(this, MapsQuest);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapsQuest).call(this, props));\n    _this.state = {\n      states: [],\n      cities: [],\n      state: {\n        id: 'Selecione um estado',\n        name: null\n      },\n      city: null,\n      resellersFound: false\n    };\n    return _this;\n  }\n\n  _createClass(MapsQuest, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var response;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(setApi().get(\"/dist/locates.json\"));\n\n            case 2:\n              response = _context.sent;\n              this.setState({\n                states: response.data.estados,\n                cities: response.data.cidades\n              });\n              if (!this.props.showMultcostura) this.loadMapScenario();else this.setMultViewMap();\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"onChangeState\",\n    value: function onChangeState(e) {\n      var value;\n      return _regeneratorRuntime.async(function onChangeState$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              value = e.target.value.split(\"-\");\n              this.setState({\n                state: {\n                  id: value[0],\n                  name: value[1]\n                },\n                city: 'Selecione uma cidade'\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"onChangeCity\",\n    value: function onChangeCity(e) {\n      this.setState({\n        city: e.target.value\n      });\n    } //let map, infobox;\n\n  }, {\n    key: \"loadMapScenario\",\n    value: function loadMapScenario() {\n      var response, revendedores, revendedor, randomLocation, pin;\n      return _regeneratorRuntime.async(function loadMapScenario$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(setApi().get('/reseller'));\n\n            case 2:\n              response = _context3.sent;\n              //setResellers(response.data)\n              revendedores = response.data;\n              map = new Microsoft.Maps.Map(document.getElementById('map'), {}); //setMap(map)\n\n              for (revendedor in revendedores) {\n                //Create an infobox at the center of the map but don't show it.\n                infobox = new Microsoft.Maps.Infobox(map.getCenter(), {\n                  visible: false\n                }); //Assign the infobox to a map instance.\n\n                infobox.setMap(map); //Create a pushpin at a random location in the map bounds.\n\n                randomLocation = Microsoft.Maps.TestDataGenerator.getLocations(1, map.getBounds());\n                pin = new Microsoft.Maps.Pushpin({\n                  latitude: revendedores[revendedor].maps.lat,\n                  longitude: revendedores[revendedor].maps.lng,\n                  altitude: 0,\n                  altitudeReference: -1\n                }); //Store some metadata with the pushpin.\n\n                pin.metadata = {\n                  title: revendedores[revendedor].name,\n                  description: \"Endereço: \" + revendedores[revendedor].address + \"<br/> Tel: \" + revendedores[revendedor].phone + \"<br/> E-mail: \" + revendedores[revendedor].email\n                }; //Add a click event handler to the pushpin.\n\n                Microsoft.Maps.Events.addHandler(pin, 'click', this.pushpinClicked); //Add pushpin to the map.\n\n                map.entities.push(pin);\n              }\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"pushpinClicked\",\n    value: function pushpinClicked(e) {\n      //Make sure the infobox has metadata to display.\n      if (e.target.metadata) {\n        //Set the infobox options with the metadata of the pushpin.\n        infobox.setOptions({\n          location: e.target.getLocation(),\n          title: e.target.metadata.title,\n          description: e.target.metadata.description,\n          visible: true\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.state.state !== prevState.state) {\n        this.setViewMap(this.state.state, this.state.city);\n      }\n\n      if (this.state.city !== prevState.city) {\n        this.setViewMap(this.state.state, this.state.city);\n      }\n\n      if (prevProps !== this.props) {\n        console.log(this.props.showMultcostura); //if (this.props.showMultcostura)\n        //this.setMultViewMap();\n      }\n    }\n  }, {\n    key: \"setViewMap\",\n    value: function setViewMap(state, city) {\n      return _regeneratorRuntime.async(function setViewMap$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              //const map = new Microsoft.Maps.Map(document.getElementById('map'), {})\n              //const { map } = this.props\n              if (map) {\n                if (state || city) {\n                  Microsoft.Maps.loadModule('Microsoft.Maps.Search', function () {\n                    var searchManager = new Microsoft.Maps.Search.SearchManager(map);\n                    var requestOptions = {\n                      bounds: map.getBounds(),\n                      where: \"\".concat(city ? city + ', ' + state.id : state.name),\n                      callback: function callback(answer, userData) {\n                        map.setView({\n                          center: new Microsoft.Maps.Location(answer.results[0].location.latitude, answer.results[0].location.longitude),\n                          zoom: 11\n                        });\n                      }\n                    };\n                    searchManager.geocode(requestOptions);\n                  });\n                }\n              }\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"setMultViewMap\",\n    value: function setMultViewMap() {\n      return _regeneratorRuntime.async(function setMultViewMap$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              console.log(\"setMultViewMap\");\n              map = new Microsoft.Maps.Map(document.getElementById('map'), {});\n              Microsoft.Maps.loadModule('Microsoft.Maps.Search', function () {\n                var searchManager = new Microsoft.Maps.Search.SearchManager(map);\n                var requestOptions = {\n                  bounds: map.getBounds(),\n                  where: \"Rua Newton Prado, 71 Bom Retiro S\\xE3o Paulo SP\",\n                  callback: function callback(answer, userData) {\n                    var pushpin = new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(answer.results[0].location.latitude, answer.results[0].location.longitude), {\n                      text: 'M',\n                      title: 'Multcostura',\n                      subTitle: 'Rua Newton Prado, 71 Bom Retiro São Paulo SP'\n                    });\n                    map.entities.push(pushpin);\n                    map.setView({\n                      center: new Microsoft.Maps.Location(answer.results[0].location.latitude, answer.results[0].location.longitude),\n                      zoom: 17\n                    });\n                  }\n                };\n                searchManager.geocode(requestOptions);\n              });\n\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return this.props.showMultcostura ? __jsx(Row, {\n        id: \"map\",\n        style: {\n          width: \"87%\",\n          height: \"500px\",\n          marginBottom: \"10px\",\n          marginLeft: '10px',\n          minWidth: \"300px\",\n          flex: 1\n        }\n      }) : __jsx(Column, {\n        style: {\n          width: \"100%\",\n          marginTop: \"100px\"\n        },\n        ait: \"center\"\n      }, __jsx(\"h1\", {\n        style: {\n          color: \"#5B5B5B\"\n        }\n      }, \"Encontre um revendedor pr\\xF3ximo a voc\\xEA!\"), __jsx(Row, {\n        jc: \"space-around\",\n        ait: \"center\",\n        style: {\n          width: \"50%\",\n          flexWrap: \"wrap\"\n        }\n      }, __jsx(Select, {\n        style: {\n          minWidth: \"120px\",\n          margin: \"0 5px\",\n          width: \"160px\",\n          padding: \"0\",\n          background: \"transparent linear-gradient(180deg, #FCF6F6 0%, #D6D6D6 100%) 0% 0% no-repeat padding-box\",\n          height: \"40px\"\n        },\n        onChange: this.onChangeState.bind(this),\n        value: \"\".concat(this.state.state.id, \"-\").concat(this.state.state.name)\n      }, __jsx(\"option\", {\n        value: 'Selecione um estado'\n      }, \"Selecione um estado\"), this.state.states.map(function (st, i) {\n        return __jsx(\"option\", {\n          key: i,\n          value: \"\".concat(st.id, \"-\").concat(st.estado)\n        }, st.estado);\n      })), __jsx(Select, {\n        style: {\n          minWidth: \"120px\",\n          width: \"160px\",\n          margin: \"0 5px\",\n          padding: \"0\",\n          background: \"transparent linear-gradient(180deg, #FCF6F6 0%, #D6D6D6 100%) 0% 0% no-repeat padding-box\",\n          height: \"40px\"\n        },\n        onChange: this.onChangeCity.bind(this),\n        value: this.state.city\n      }, __jsx(\"option\", {\n        value: \"Selecione uma cidade\"\n      }, \"Selecione uma cidade\"), this.state.cities.filter(function (cit) {\n        return cit.estadoId == _this2.state.state.id ? cit : false;\n      }).map(function (cit, i) {\n        return __jsx(\"option\", {\n          key: i,\n          value: cit.id\n        }, cit.cidade);\n      }))), __jsx(Row, {\n        id: \"map\",\n        style: {\n          width: \"70%\",\n          height: \"500px\",\n          marginBottom: \"10px\",\n          marginTop: \"10px\"\n        }\n      }), __jsx(Row, {\n        style: {\n          flexWrap: \"wrap\"\n        }\n      }, this.props.resellers.filter(function (resel) {\n        var _this2$state = _this2.state,\n            city = _this2$state.city,\n            state = _this2$state.state;\n\n        if ((new RegExp(state.id).test(resel.address) || new RegExp(state.name).test(resel.address)) && new RegExp(city).test(resel.address)) {\n          return resel;\n        } else {\n          if (new RegExp(state.id).test(resel.address) || new RegExp(state.name).test(resel.address)) {\n            return resel;\n          }\n        }\n      }).map(function (resel, i) {\n        return __jsx(CardContainer, {\n          key: i\n        }, __jsx(Column, null, __jsx(Item, null, resel.name), __jsx(\"hr\", {\n          style: {\n            width: \"100%\"\n          }\n        }), __jsx(Item, null, resel.address), __jsx(Item, null, \"Tel: \", resel.phone), __jsx(Item, null, \"E-mail: \", resel.email)));\n      })));\n    }\n  }]);\n\n  return MapsQuest;\n}(Component);\n\nexport { MapsQuest as default };\nvar Item = styled.p.withConfig({\n  displayName: \"Map__Item\",\n  componentId: \"sc-1fuegwh-0\"\n})([\"margin:0;\"]);\nvar CardContainer = styled.div.withConfig({\n  displayName: \"Map__CardContainer\",\n  componentId: \"sc-1fuegwh-1\"\n})([\"flex:1;min-width:250px;max-width:250px;max-height:300px;overflow:hidden;cursor:pointer;display:flex;flex-direction:column;padding:15px;flex-wrap:no-wrap;margin-bottom:10px;margin-right:10px;img{width:100%;max-width:230px;display:block;margin:auto}:hover{box-shadow:0 14px 28px rgba(0,0,0,0.25),0 10px 10px rgba(0,0,0,0.22);}box-shadow:0 3px 6px rgba(0,0,0,0.16),0 3px 6px rgba(0,0,0,0.23);}\"]);\nvar SearchBtn = styled.span.withConfig({\n  displayName: \"Map__SearchBtn\",\n  componentId: \"sc-1fuegwh-2\"\n})([\"height:16px;background:#282D90 0% 0% no-repeat padding-box;box-shadow:1px 1px 6px #00000029;border-radius:3px;opacity:1;cursor:pointer;color:white;padding:10px;transition:.3s;:hover{opacity:.8;}\"]);","map":{"version":3,"sources":["C:/Users/Gluz/Projects/web/multcostura/multcostura-web/src/components/web/Map.jsx"],"names":["React","Component","styled","setApi","Row","Column","Select","infobox","map","MapsQuest","props","state","states","cities","id","name","city","resellersFound","get","response","setState","data","estados","cidades","showMultcostura","loadMapScenario","setMultViewMap","e","value","target","split","revendedores","Microsoft","Maps","Map","document","getElementById","revendedor","Infobox","getCenter","visible","setMap","randomLocation","TestDataGenerator","getLocations","getBounds","pin","Pushpin","latitude","maps","lat","longitude","lng","altitude","altitudeReference","metadata","title","description","address","phone","email","Events","addHandler","pushpinClicked","entities","push","setOptions","location","getLocation","prevProps","prevState","setViewMap","console","log","loadModule","searchManager","Search","SearchManager","requestOptions","bounds","where","callback","answer","userData","setView","center","Location","results","zoom","geocode","pushpin","text","subTitle","width","height","marginBottom","marginLeft","minWidth","flex","marginTop","color","flexWrap","margin","padding","background","onChangeState","bind","st","i","estado","onChangeCity","filter","cit","estadoId","cidade","resellers","resel","RegExp","test","Item","p","CardContainer","div","SearchBtn","span"],"mappings":"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","sourcesContent":["import React, { Component } from 'React'\nimport styled from 'styled-components'\n\nimport setApi from '../../api'\n\n\nimport { Row, Column, Select} from '../../static/styled-components/base'\nlet infobox, map\nexport default class MapsQuest extends Component {\n\n\tconstructor (props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tstates: [],\n\t\t\tcities: [],\n\t\t\tstate: {\n\t\t\t\tid: 'Selecione um estado',\n\t\t\t\tname: null\n\t\t\t},\n\t\t\tcity: null,\n\t\t\tresellersFound: false\n\t\t}\n\t}\n\n\tasync componentDidMount () {\n\t\tconst response = await setApi()\n\t\t\t\t.get(\"/dist/locates.json\")\n\t\t\t\t\n\t\tthis.setState({\n\t\t\tstates: response.data.estados,\n\t\t\tcities: response.data.cidades\n\t\t})\n\n\t\tif (!this.props.showMultcostura)\n\t\t\tthis.loadMapScenario()\n\t\telse \n\t\t\tthis.setMultViewMap()\n\t}\n\n\tasync onChangeState(e) {\n\t\tconst value = e.target.value.split(\"-\")\n\t\tthis.setState({\n\t\t\tstate: { \n\t\t\t\tid: value[0],\n\t\t\t\tname: value[1]\n\t\t\t},\n\t\t\tcity: 'Selecione uma cidade'\n\t\t})\n\t}\n\n\tonChangeCity(e) {\n\t\tthis.setState({\n\t\t\tcity: e.target.value\n\t\t})\n\t}\n\n\t //let map, infobox;\n     async loadMapScenario() {\n     \t const response = await setApi().get('/reseller')\n        //setResellers(response.data)\n        const revendedores = response.data\n          map = new Microsoft.Maps.Map(document.getElementById('map'), {})\n          //setMap(map)\n          for (let revendedor in revendedores){\n            //Create an infobox at the center of the map but don't show it.\n            infobox = new Microsoft.Maps.Infobox(map.getCenter(), {\n              visible: false\n            });\n\n            //Assign the infobox to a map instance.\n            infobox.setMap(map);\n\n            //Create a pushpin at a random location in the map bounds.\n            var randomLocation = Microsoft.Maps.TestDataGenerator.getLocations(1, map.getBounds());\n            \n            var pin = new Microsoft.Maps.Pushpin({\n              latitude: revendedores[revendedor].maps.lat,\n              longitude: revendedores[revendedor].maps.lng,\n              altitude: 0,\n              altitudeReference: -1\n            });\n\n            //Store some metadata with the pushpin.\n            pin.metadata = {\n                title: revendedores[revendedor].name,\n                description: \"Endereço: \" + revendedores[revendedor].address + \"<br/> Tel: \" + revendedores[revendedor].phone + \"<br/> E-mail: \" + revendedores[revendedor].email\n            };\n\n           //Add a click event handler to the pushpin.\n            Microsoft.Maps.Events.addHandler(pin, 'click', this.pushpinClicked);\n\n            //Add pushpin to the map.\n            map.entities.push(pin);\n          }\n        }\n\n        pushpinClicked(e) {\n          //Make sure the infobox has metadata to display.\n          if (e.target.metadata) {\n            //Set the infobox options with the metadata of the pushpin.\n            infobox.setOptions({\n                location: e.target.getLocation(),\n                title: e.target.metadata.title,\n                description: e.target.metadata.description,\n                visible: true\n            });\n          }\n        }\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\n  \t\tif (this.state.state !== prevState.state) {\n\t    \tthis.setViewMap(this.state.state, this.state.city);\n  \t\t}\n\n\t\tif (this.state.city !== prevState.city) {\n\t    \tthis.setViewMap(this.state.state, this.state.city);\n  \t\t}  \t\t\n\n  \t\tif (prevProps !== this.props) {\n  \t\t\tconsole.log(this.props.showMultcostura)\n  \t\t\t//if (this.props.showMultcostura)\n  \t\t\t\t//this.setMultViewMap();\n  \t\t}\n\t}\n\n\tasync setViewMap(state, city) {\n\t\t//const map = new Microsoft.Maps.Map(document.getElementById('map'), {})\n\t\t//const { map } = this.props\n\t\tif (map) {\n\t  \t\tif (state || city){\n\t\t  \t\tMicrosoft.Maps.loadModule('Microsoft.Maps.Search', function () {\n\t\t\t\t    var searchManager = new Microsoft.Maps.Search.SearchManager(map);\n\t\t\t\t    var requestOptions = {\n\t\t\t\t        bounds: map.getBounds(),\n\t\t\t\t        where: `${city ? city + ', ' + state.id : state.name}`,\n\t\t\t\t        callback: function (answer, userData) {\n\t\t\t\t            map.setView({ center: new Microsoft.Maps.Location(answer.results[0].location.latitude, answer.results[0].location.longitude), zoom: 11 });\n\t\t\t\t        }\n\t\t\t\t    };\n\t\t\t\t    searchManager.geocode(requestOptions);\n\t\t\t\t});\n\t  \t\t}\n  \t\t}\n\t}\n\n\t\tasync setMultViewMap() {\n\t\t\tconsole.log(\"setMultViewMap\")\n\t\t\tmap = new Microsoft.Maps.Map(document.getElementById('map'),{})\n\t  \t\tMicrosoft.Maps.loadModule('Microsoft.Maps.Search', function () {\n\t\t\t    var searchManager = new Microsoft.Maps.Search.SearchManager(map);\n\t\t\t    var requestOptions = {\n\t\t\t        bounds: map.getBounds(),\n\t\t\t        where: `Rua Newton Prado, 71 Bom Retiro São Paulo SP`,\n\t\t\t        callback: function (answer, userData) {\n\t\t\t        \tvar pushpin = new Microsoft.Maps.Pushpin(\n\t\t\t        \t\tnew Microsoft.Maps.Location(\n\t\t\t        \t\t\tanswer.results[0].location.latitude, answer.results[0].location.longitude),\n\t\t\t        \t\t\t{ text: 'M', title: 'Multcostura', subTitle: 'Rua Newton Prado, 71 Bom Retiro São Paulo SP' }\n\t\t\t        \t\t);\n\t\t\t\t\t\tmap.entities.push(pushpin);\n\n\t\t\t            map.setView({ center: new Microsoft.Maps.Location(answer.results[0].location.latitude, answer.results[0].location.longitude), zoom: 17 });\n\t\t\t        }\n\t\t\t    };\n\t\t\t\tsearchManager.geocode(requestOptions);\n\t\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\tthis.props.showMultcostura ? <Row id=\"map\" style={{ width: \"87%\", height: \"500px\", marginBottom: \"10px\", marginLeft: '10px', minWidth: \"300px\", flex: 1 }}></Row>\n\t\t\t : <Column style={{ width: \"100%\", marginTop: \"100px\" }} ait=\"center\">\n\t\t\t\t<h1 style={{ color: \"#5B5B5B\" }}>Encontre um revendedor próximo a você!</h1>\n\n\t\t\t\t<Row jc=\"space-around\" ait=\"center\" style={{ width: \"50%\", flexWrap: \"wrap\"}}>\n\t\t\t\t\t<Select \n\t\t\t\t\t\tstyle={{ \n\t\t\t\t\t\t\tminWidth: \"120px\", \n\t\t\t\t\t\t\tmargin: \"0 5px\",\n\t\t\t\t\t\t\twidth: \"160px\",\n\t\t\t\t\t\t\tpadding: \"0\",\n\t\t\t\t\t\t\tbackground: \"transparent linear-gradient(180deg, #FCF6F6 0%, #D6D6D6 100%) 0% 0% no-repeat padding-box\", \n\t\t\t\t\t\t\theight: \"40px\" \n\t\t\t\t\t\t}} \n\n\t\t\t\t\t\tonChange={this.onChangeState.bind(this)}\n\t\t\t\t\t\tvalue={`${this.state.state.id}-${this.state.state.name}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value={'Selecione um estado'} >Selecione um estado</option>\n\t\t\t\t\t\t{this.state.states.map((st, i) => <option key={i} value={`${st.id}-${st.estado}`}>{st.estado}</option>)}\n\t\t\t\t\t</Select>\n\n\t\t\t\t\t<Select \n\t\t\t\t\t\tstyle={{ \n\t\t\t\t\t\t\tminWidth: \"120px\", \n\t\t\t\t\t\t\twidth: \"160px\",\n\t\t\t\t\t\t\tmargin: \"0 5px\", \n\t\t\t\t\t\t\tpadding: \"0\",\n\t\t\t\t\t\t\tbackground: \"transparent linear-gradient(180deg, #FCF6F6 0%, #D6D6D6 100%) 0% 0% no-repeat padding-box\", \n\t\t\t\t\t\t\theight: \"40px\" \n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonChange={this.onChangeCity.bind(this)}\n\t\t\t\t\t\tvalue={this.state.city}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value='Selecione uma cidade'>Selecione uma cidade</option>\n\t\t\t\t\t\t{this.state.cities.filter(cit => cit.estadoId == this.state.state.id ? cit : false ).map((cit, i) => <option key={i} value={cit.id}>{cit.cidade}</option>)}\n\t\t\t\t\t</Select>\n\n\n\t\t\t\t\t\n\t\t\t\t</Row>\n\n\t\t\t\t<Row id=\"map\" style={{ width: \"70%\", height: \"500px\", marginBottom: \"10px\", marginTop: \"10px\" }}></Row>\n\t\t\t\t\t\n\t\t\t\t<Row style={{ flexWrap: \"wrap\"}}>\n\n\t\t\t\t\t{this.props.resellers.filter(resel => {\n\t\t\t\t\t\tconst { city, state } = this.state\n\t\t\t\t\t\tif((new RegExp(state.id).test(resel.address) || new RegExp(state.name).test(resel.address)) && new RegExp(city).test(resel.address)) {\n\t\t\t\t\t\t\treturn resel\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif ((new RegExp(state.id).test(resel.address) || new RegExp(state.name).test(resel.address))){ \n\t\t\t\t\t\t\t\treturn resel\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t}\n\t\t\t\t\t}).map((resel, i) => \n\t\t\t\t\t\t<CardContainer key={i}>\n\t\t\t\t\t\t\t<Column>\n\t\t\t\t\t\t\t\t<Item>{resel.name}</Item>\n\t\t\t\t\t\t\t\t<hr style={{ width: \"100%\" }} />\n\t\t\t\t\t\t\t\t<Item>{resel.address}</Item>\n\t\t\t\t\t\t\t\t<Item>Tel: {resel.phone}</Item>\n\t\t\t\t\t\t\t\t<Item>E-mail: {resel.email}</Item>\n\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t</CardContainer>)}\n\n\t\t\t\t</Row>\n\t\t\t</Column>\n\t\t)\n\t}\n}\n\nconst Item = styled.p`\n\tmargin: 0;\n`\n\nconst CardContainer = styled.div`\n\tflex: 1;\n  \tmin-width: 250px;\n  \tmax-width: 250px;\n\tmax-height: 300px;\n\toverflow: hidden;\n\tcursor: pointer;\n\tdisplay: flex;\n\tflex-direction: column;\n\tpadding: 15px;\n\tflex-wrap: no-wrap;\n\tmargin-bottom: 10px;\n\tmargin-right: 10px;\n\timg {\n\t\twidth: 100%;\n\t\tmax-width: 230px;\n\t\tdisplay: block;\n\t\tmargin: auto\n\t}\n\t:hover {\n\t\tbox-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n\t}\n\tbox-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\n\n}\n`;\n\nconst SearchBtn = styled.span`\n\theight: 16px;\n\tbackground: #282D90 0% 0% no-repeat padding-box;\n\tbox-shadow: 1px 1px 6px #00000029;\n\tborder-radius: 3px;\n\topacity: 1;\n\tcursor: pointer;\n\tcolor: white;\n\tpadding: 10px;\n\ttransition: .3s;\n\t:hover {\n\t\topacity: .8;\n\t}\n`"]},"metadata":{},"sourceType":"module"}