{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport Head from 'next/head';\nimport { Link } from \"../routes\";\nimport { connect } from \"react-redux\";\nimport { Column } from '../src/static/styled-components/base';\nimport Home from '../src/components/web/home/Home';\nimport Map from '../src/components/web/Map';\nimport SlideWeb from '../src/components/web/SlideWeb';\nimport Template from '../src/components/templates/Web';\nimport setApi from '../src/api';\n\nvar IndexPage = function IndexPage() {\n  var _useState = useState([]),\n      resellers = _useState[0],\n      setResellers = _useState[1];\n\n  var _useState2 = useState([]),\n      images = _useState2[0],\n      setImages = _useState2[1];\n\n  var _useState3 = useState(null),\n      map = _useState3[0],\n      setMap = _useState3[1];\n\n  var _useState4 = useState(),\n      infobox = _useState4[0],\n      setInfobox = _useState4[1];\n\n  useEffect(function () {\n    function async() {\n      var loadMapScenario, pushpinClicked, response, revendedores, _map, _infobox;\n\n      return _regeneratorRuntime.async(function async$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setApi().get('/institutional/homeBanners').then(function (res) {\n                setImages(res.data);\n              })[\"catch\"](function (err) {});\n              _context.prev = 1;\n\n              loadMapScenario = function loadMapScenario() {\n                _map = new Microsoft.Maps.Map(document.getElementById('map'), {});\n                setMap(_map);\n\n                for (var revendedor in revendedores) {\n                  //Create an infobox at the center of the map but don't show it.\n                  _infobox = new Microsoft.Maps.Infobox(_map.getCenter(), {\n                    visible: false\n                  }); //Assign the infobox to a map instance.\n\n                  _infobox.setMap(_map); //Create a pushpin at a random location in the map bounds.\n\n\n                  var randomLocation = Microsoft.Maps.TestDataGenerator.getLocations(1, _map.getBounds());\n                  var pin = new Microsoft.Maps.Pushpin({\n                    latitude: revendedores[revendedor].maps.lat,\n                    longitude: revendedores[revendedor].maps.lng,\n                    altitude: 0,\n                    altitudeReference: -1\n                  }); //Store some metadata with the pushpin.\n\n                  pin.metadata = {\n                    title: revendedores[revendedor].name,\n                    description: \"Endere√ßo: \" + revendedores[revendedor].address + \"<br/> Tel: \" + revendedores[revendedor].phone + \"<br/> E-mail: \" + revendedores[revendedor].email\n                  }; //Add a click event handler to the pushpin.\n\n                  Microsoft.Maps.Events.addHandler(pin, 'click', pushpinClicked); //Add pushpin to the map.\n\n                  _map.entities.push(pin);\n                }\n              };\n\n              pushpinClicked = function pushpinClicked(e) {\n                //Make sure the infobox has metadata to display.\n                if (e.target.metadata) {\n                  //Set the infobox options with the metadata of the pushpin.\n                  _infobox.setOptions({\n                    location: e.target.getLocation(),\n                    title: e.target.metadata.title,\n                    description: e.target.metadata.description,\n                    visible: true\n                  });\n                }\n              }; //adMapScenario();\n\n\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(setApi().get('/reseller'));\n\n            case 6:\n              response = _context.sent;\n              setResellers(response.data);\n              revendedores = response.data;\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 11]], Promise);\n    }\n\n    async();\n  }, []);\n  return __jsx(Template, null, __jsx(Column, {\n    style: {\n      width: \"100%\"\n    }\n  }, __jsx(SlideWeb, {\n    images: images.map(function (img) {\n      return img.image;\n    })\n  }), __jsx(Home, null), __jsx(Map, {\n    map: map,\n    resellers: resellers\n  })));\n};\n\nIndexPage.getInitialProps = function (_ref) {\n  var reduxStore = _ref.reduxStore;\n  return {};\n};\n\nexport default IndexPage;","map":null,"metadata":{},"sourceType":"module"}