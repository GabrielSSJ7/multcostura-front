{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Button } from \"../../../static/styled-components/base\";\nimport { Creators as ResellerCreators } from \"../../../ducks/resellers\";\nimport { Creators as UtilsCreators } from \"../../../ducks/utils\";\nimport setApi from '../../../api';\nimport { Column } from \"../../../static/styled-components/base\";\nimport { getResellers, editReseller, deleteReseller } from \"../../../utils/reseller\";\nimport Message from \"../../utils/Message\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nexport default function ListResellers() {\n  const {\n    message,\n    messageType,\n    messageColor\n  } = useSelector(state => state.Utils);\n  const {\n    resellers\n  } = useSelector(state => state.Reseller);\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: diag,\n    1: setDiag\n  } = useState(false);\n  const {\n    0: resellerToEdit,\n    1: setResellerToEdit\n  } = useState({\n    address: {}\n  });\n  const dispatch = useDispatch();\n  const {\n    0: address,\n    1: setAddress\n  } = useState('');\n  const {\n    0: listAddress,\n    1: setListAddress\n  } = useState([]);\n  const {\n    0: listAddressVis,\n    1: setListAddressVis\n  } = useState(false);\n  useEffect(() => {\n    async function asyncFunc() {\n      const response = await setApi().get(`http://dev.virtualearth.net/REST/v1/Autosuggest?query=${resellerToEdit.address}&maxResults=5&key=ArBcF40dX4IT5Co3SIxT7TfvEqq3VNdafH09G2lYGLmm1PvaaFwU-xHaQLjtmpDe`);\n      const fAddress = response.data.resourceSets[0].resources[0].value;\n      const sugestion = [];\n\n      for (let formattedAddress in response.data.resourceSets[0].resources[0].value) {\n        sugestion.push(fAddress[formattedAddress].address.formattedAddress);\n      }\n\n      setListAddress(sugestion);\n    }\n\n    asyncFunc();\n  }, [resellerToEdit.address]);\n\n  async function geoCoding(where) {\n    const response = await setApi().get(`http://dev.virtualearth.net/REST/v1/Locations?addressLine=${where}&maxResults=1&key=${process.env.mapsKey}`);\n    if (response.data.resourceSets[0].estimatedTotal != 0) return response.data.resourceSets[0].resources[0].geocodePoints;else {\n      setSnackBar({\n        open: true,\n        message: \"Não possível encontrar este endereço no mapa\",\n        result: 'error'\n      });\n      return false;\n    }\n  }\n\n  useEffect(() => {\n    function asyncFunc() {\n      getResellers(function (err, resellers) {\n        if (err) {\n          dispatch(UtilsCreators.changeMessage());\n          dispatch(UtilsCreators.changeMessageType(false));\n          dispatch(UtilsCreators.changeMessageColor(\"red\"));\n          return;\n        }\n\n        dispatch(ResellerCreators.loadResellers(resellers));\n      });\n    }\n\n    asyncFunc();\n  }, []);\n\n  function handleClose() {\n    setDiag(false);\n    setResellerToEdit({\n      address: {}\n    });\n  }\n\n  function handleOpen(reseller) {\n    setResellerToEdit(reseller);\n    setDiag(true);\n  }\n\n  const focusOutEvent = event => {\n    timeout = setTimeout(() => {\n      setListAddressVis(false);\n    }, 100);\n  };\n\n  useEffect(() => {\n    const input = document.getElementById('searchBox');\n    let timeout = null;\n    input.addEventListener('focusout', focusOutEvent);\n    return () => {\n      clearTimeout(timeout);\n      input.removeEventListener('focusout', focusOutEvent);\n    };\n  }, []);\n\n  function editRes(res) {\n    editReseller(res.id, _objectSpread({}, res), function (err, data) {\n      if (err) {\n        dispatch(UtilsCreators.changeMessage(err));\n        dispatch(UtilsCreators.changeMessageType(false));\n        dispatch(UtilsCreators.changeMessageColor(\"red\"));\n        setVisible(true);\n        handleClose();\n        return;\n      }\n\n      getResellers(function (err, resellers) {\n        if (err) {\n          dispatch(UtilsCreators.changeMessage(err));\n          dispatch(UtilsCreators.changeMessageType(false));\n          dispatch(UtilsCreators.changeMessageColor(\"red\"));\n          return;\n        }\n\n        dispatch(ResellerCreators.loadResellers(resellers));\n      });\n      dispatch(UtilsCreators.changeMessage(\"Editado com sucesso\"));\n      dispatch(UtilsCreators.changeMessageType(true));\n      dispatch(UtilsCreators.changeMessageColor(\"green\"));\n      handleClose();\n      setVisible(true);\n    });\n  }\n\n  function delMan(id) {\n    deleteReseller(id, function (err, data) {\n      if (err) {\n        dispatch(UtilsCreators.changeMessage(err));\n        dispatch(UtilsCreators.changeMessageType(false));\n        dispatch(UtilsCreators.changeMessageColor(\"red\"));\n        setVisible(true);\n        return;\n      }\n\n      getResellers(function (err, resellers) {\n        dispatch(ResellerCreators.loadResellers(resellers));\n      });\n      dispatch(UtilsCreators.changeMessage(\"Deletado com sucesso\"));\n      dispatch(UtilsCreators.changeMessageType(true));\n      dispatch(UtilsCreators.changeMessageColor(\"green\"));\n      setVisible(true);\n    });\n  }\n\n  return __jsx(React.Fragment, null, __jsx(\"h3\", {\n    className: \"main-title\",\n    style: {\n      color: \"rgb(129, 22, 27)\"\n    }\n  }, \"Lista de fabricantes\"), __jsx(\"div\", null, __jsx(Dialog, {\n    open: diag,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\"\n  }, __jsx(DialogTitle, {\n    id: \"form-dialog-title\"\n  }, \"Editar Revendedor\"), __jsx(DialogContent, null, __jsx(TextField, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"name\",\n    label: \"Nome\",\n    type: \"text\",\n    value: resellerToEdit.name,\n    onChange: e => setResellerToEdit(_objectSpread({}, resellerToEdit, {\n      name: e.target.value\n    })),\n    fullWidth: true\n  }), __jsx(TextField, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"phone\",\n    label: \"Telefone\",\n    type: \"text\",\n    value: resellerToEdit.phone,\n    onChange: e => setResellerToEdit(_objectSpread({}, resellerToEdit, {\n      phone: e.target.value\n    })),\n    fullWidth: true\n  }), __jsx(TextField, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"email\",\n    label: \"E-mail\",\n    type: \"text\",\n    value: resellerToEdit.email,\n    onChange: e => setResellerToEdit(_objectSpread({}, resellerToEdit, {\n      email: e.target.value\n    })),\n    fullWidth: true\n  }), __jsx(Column, {\n    style: {\n      position: \"relative\",\n      minHeight: \"300px\"\n    }\n  }, __jsx(\"div\", {\n    id: \"printoutPanel\"\n  }), __jsx(\"div\", {\n    id: \"searchBoxContainer\"\n  }, __jsx(TextField, {\n    autoFocus: true,\n    onFocus: () => setListAddressVis(true),\n    className: \"form-control\",\n    type: \"text\",\n    autoComplete: \"new-password\",\n    placeholder: \"Digite o endere\\xE7o\",\n    id: \"searchBox\",\n    value: resellerToEdit.address,\n    onChange: e => setResellerToEdit(_objectSpread({}, resellerToEdit, {\n      address: e.target.value\n    }))\n  })), listAddressVis ? __jsx(Column, {\n    onMouseEnter: () => setListAddressVis(true),\n    style: {\n      background: 'white',\n      boxShadow: '1px 1px 3px grey',\n      borderRadius: '5px',\n      padding: '10px',\n      position: \"absolute\",\n      top: \"50px\",\n      width: \"80%\",\n      zIndex: \"9\"\n    }\n  }, listAddress.length > 0 ? listAddress.map((ad, i) => __jsx(Item, {\n    key: i,\n    onClick: () => {\n      setResellerToEdit(_objectSpread({}, resellerToEdit, {\n        address: ad\n      }));\n      console.log(ad);\n    },\n    style: {\n      borderBottom: \"1px solid grey\"\n    }\n  }, ad)) : __jsx(Item, null, \"Nenhuma sugest\\xE3o encontrada\")) : '')), __jsx(DialogActions, null, __jsx(Button, {\n    onClick: handleClose,\n    color: \"primary\"\n  }, \"Cancelar\"), __jsx(Button, {\n    onClick: () => editRes(resellerToEdit),\n    color: \"primary\"\n  }, \"Salvar\")))), __jsx(DivListCategories, null, resellers.map((reseller, id) => __jsx(ResellerContainer, {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    style: {\n      borderBottom: \"1px solid lightgrey\"\n    },\n    key: id\n  }, __jsx(ResellerContainer, {\n    flexDirection: \"column\",\n    style: {\n      display: \"flex\",\n      justifyContent: \"column\"\n    }\n  }, __jsx(\"p\", {\n    style: {\n      fontWeight: \"200\"\n    }\n  }, \"Nome: \", reseller.name), __jsx(\"p\", {\n    style: {\n      fontWeight: \"200\"\n    }\n  }, \"Endere\\xE7o: \", reseller.address)), __jsx(ResellerContainer, {\n    flexDirection: \"column\",\n    style: {\n      marginRight: \"10px\",\n      marginLeft: \"10px\"\n    }\n  }, __jsx(Button, {\n    onClick: () => handleOpen(reseller)\n  }, \"Editar Revendedor\"), __jsx(Button, {\n    onClick: () => delMan(reseller.id)\n  }, \"Apagar Revendedor\"))))), visible ? __jsx(Message, {\n    result: messageType,\n    color: messageColor,\n    message: message\n  }) : \"\");\n}\nexport const Hr = styled.hr.withConfig({\n  displayName: \"ListResellers__Hr\",\n  componentId: \"xqh3vc-0\"\n})([\"width:50%;\"]);\nexport const Subcontainer = styled.div.withConfig({\n  displayName: \"ListResellers__Subcontainer\",\n  componentId: \"xqh3vc-1\"\n})([\"padding:0 15px;\"]);\nexport const ImageContainer = styled.div.withConfig({\n  displayName: \"ListResellers__ImageContainer\",\n  componentId: \"xqh3vc-2\"\n})([\"img{max-width:220px;display:block;margin:10px auto;}\"]);\nexport const DivListCategories = styled.div.withConfig({\n  displayName: \"ListResellers__DivListCategories\",\n  componentId: \"xqh3vc-3\"\n})([\"max-height:350px;overflow:auto;::-webkit-scrollbar{width:10px;}::-webkit-scrollbar-track{background:#f1f1f1;}::-webkit-scrollbar-thumb{background:rgb(129,22,27);}::-webkit-scrollbar-thumb:hover{background:#555;}\"]);\nexport const ResellerContainer = styled.div.withConfig({\n  displayName: \"ListResellers__ResellerContainer\",\n  componentId: \"xqh3vc-4\"\n})([\"display:flex;flex-direction:\", \";justify-content:\", \";\"], props => props.flexDirection, props => props.justifyContent);\nconst Item = styled.p.withConfig({\n  displayName: \"ListResellers__Item\",\n  componentId: \"xqh3vc-5\"\n})([\"font-size:1rem;cursor:pointer;transition:.4s;:hover{opacity:.9;color:#81161B;}z-index:9;margin:0;padding:12px 0;:last-child{border-bottom:none !important;}\"]);","map":null,"metadata":{},"sourceType":"module"}