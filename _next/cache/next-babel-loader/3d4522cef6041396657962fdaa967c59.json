{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport setApi from \"../api\";\nimport { fieldValidation, validateImage } from \"../utils/validate\";\nexport function getTools(cb, data) {\n  var filter = data ? data : {};\n  setApi().get(\"/tools?search=\".concat(filter.search)).then(function (response) {\n    cb(null, response.data);\n  })[\"catch\"](function (err) {\n    cb(err.response ? err.response.data : err.toString());\n  });\n}\nexport function getTool(id, cb) {\n  setApi().get(\"/tools/\".concat(id)).then(function (response) {\n    cb(null, response.data);\n  })[\"catch\"](function (err) {\n    cb(err.response ? err.response.data : err.toString());\n  });\n}\nexport function getOptions(cb) {\n  var manufacturers, categories;\n  return _regeneratorRuntime.async(function getOptions$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(setApi().get(\"/manufacturer\"));\n\n        case 3:\n          manufacturers = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(setApi().get(\"/categories\"));\n\n        case 6:\n          categories = _context.sent;\n          cb(null, {\n            manufacturers: manufacturers,\n            categories: categories\n          });\n          _context.next = 13;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          cb(_context.t0);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n}\nexport function deleteImage(id, type, image, cb) {\n  setApi()[\"delete\"](\"/images?id=\".concat(id, \"&type=\").concat(type, \"&image=\").concat(image)).then(function (response) {\n    cb(null);\n  })[\"catch\"](function (err) {\n    cb(err.response ? err.response.data : err.toString());\n  });\n}\nexport function updateTool(tool, toolFile, cb) {\n  var id, name, description, mainFeatures, manufacturer, formData, toolFileKeys;\n  return _regeneratorRuntime.async(function updateTool$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          id = tool.id, name = tool.name, description = tool.description, mainFeatures = tool.mainFeatures, manufacturer = tool.manufacturer;\n          formData = new FormData();\n          formData.append(\"name\", name);\n          formData.append(\"description\", description);\n          formData.append(\"mainFeatures\", mainFeatures);\n          formData.append(\"manufacturer\", manufacturer);\n          toolFileKeys = Object.keys(toolFile);\n          toolFileKeys.forEach(function (mkey) {\n            formData.append(\"toolsFiles\", toolFile[mkey]);\n          });\n          setApi().put(\"/tools/\" + id, formData).then(function (response) {\n            cb(null, response.data);\n          })[\"catch\"](function (err) {\n            cb(err.response ? err.response.data : err.toString());\n          });\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function addTool(tool, toolFiles, cb) {\n  var formData = new FormData();\n  var toolFilesKeys = Object.keys(toolFiles);\n  var hasError = [false];\n  toolFilesKeys.forEach(function (mkey) {\n    hasError[0] = !validateImage([\"png\", \"jpg\", \"jpeg\", \"svg\", \"gif\", \"webp\"], 10000, toolFiles[mkey]);\n    formData.append(\"toolsFiles\", toolFiles[mkey]);\n  });\n\n  if (hasError.includes(true)) {\n    return cb(\"Você precisa subir imagens png, jpg, jpeg, svg, gif, webp com no máximo 10MB\");\n  }\n\n  var fieldError = fieldValidation({\n    nome: tool.name,\n    subtítulo: tool.description\n  });\n\n  if (fieldError[\"return\"]) {\n    formData.append(\"name\", tool.name);\n    formData.append(\"manufacturer\", tool.manufacturer);\n    formData.append(\"description\", tool.description);\n    formData.append(\"mainFeatures\", tool.mainFeatures);\n    setApi().post(\"tools\", formData).then(function (response) {\n      cb(null, response.data);\n    })[\"catch\"](function (err) {\n      cb(err.response ? err.response.data : err.toString());\n    });\n  } else {\n    return cb(\"\".concat(fieldError.message, \" \").concat(fieldError.field));\n  }\n}\nexport function deleteTool(id, cb) {\n  setApi()[\"delete\"](\"/tools/\".concat(id)).then(function (response) {\n    cb(null, response.data);\n  })[\"catch\"](function (err) {\n    cb(err.response ? err.response.data : err.toString());\n  });\n}","map":null,"metadata":{},"sourceType":"module"}