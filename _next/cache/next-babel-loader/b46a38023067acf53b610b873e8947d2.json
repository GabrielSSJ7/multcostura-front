{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport setApi from \"../api\";\nimport { fieldValidation, validateImage } from \"../utils/validate\";\nexport function getMachines(cb, data) {\n  var filter = data ? data : {};\n  setApi().get(\"/machine?categories=\".concat(filter.category, \"&manufacturer=\").concat(filter.manufacturer, \"&search=\").concat(filter.search)).then(function (response) {\n    cb(null, response.data);\n  })[\"catch\"](function (err) {\n    cb(err.response ? err.response.data : err.toString());\n  });\n}\nexport function getMachine(id, cb) {\n  setApi().get(\"/machine/\".concat(id)).then(function (response) {\n    cb(null, response.data);\n  })[\"catch\"](function (err) {\n    cb(err.response ? err.response.data : err.toString());\n  });\n}\nexport function getOptions(cb) {\n  var manufacturers, categories;\n  return _regeneratorRuntime.async(function getOptions$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(setApi().get(\"/manufacturer\"));\n\n        case 3:\n          manufacturers = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(setApi().get(\"/categories\"));\n\n        case 6:\n          categories = _context.sent;\n          cb(null, {\n            manufacturers: manufacturers,\n            categories: categories\n          });\n          _context.next = 13;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          cb(_context.t0);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n}\nexport function deleteImage(id, type, image, cb) {\n  setApi()[\"delete\"](\"/images?id=\".concat(id, \"&type=\").concat(type, \"&image=\").concat(image)).then(function (response) {\n    cb(null);\n  })[\"catch\"](function (err) {\n    cb(err.response ? err.response.data : err.toString());\n  });\n}\nexport function updateMachine(machine, machineFiles, sewingFile, prodRefFiles, files, cb) {\n  var id, name, description, mainFeatures, specifications, category, manufacturer, formData, machineFilesKeys, prodRefFilesKeys;\n  return _regeneratorRuntime.async(function updateMachine$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log(sewingFile);\n          id = machine.id, name = machine.name, description = machine.description, mainFeatures = machine.mainFeatures, specifications = machine.specifications, category = machine.category, manufacturer = machine.manufacturer;\n          formData = new FormData();\n          console.log('specifications', JSON.stringify(specifications));\n          formData.append(\"name\", name);\n          formData.append(\"description\", description);\n          formData.append(\"mainFeatures\", mainFeatures);\n          formData.append(\"specifications\", specifications ? Object.keys(specifications).length > 0 ? JSON.stringify(specifications) : null : null);\n          formData.append(\"category\", category);\n          formData.append(\"manufacturer\", manufacturer);\n          formData.append(\"video\", machine.video);\n          formData.append('folheto', files.folheto);\n          formData.append('manual', files.manual);\n          machineFilesKeys = Object.keys(machineFiles);\n          machineFilesKeys.forEach(function (mkey) {\n            formData.append(\"machines\", machineFiles[mkey]);\n          });\n          formData.append(\"sewingType\", sewingFile);\n          prodRefFilesKeys = Object.keys(prodRefFiles);\n          prodRefFilesKeys.forEach(function (prfkey) {\n            formData.append(\"productReferences\", prodRefFiles[prfkey]);\n          });\n          setApi().put(\"/machine/\" + id, formData).then(function (response) {\n            cb(null, response.data);\n          })[\"catch\"](function (err) {\n            cb(err.response ? err.response.data : err.toString());\n          });\n\n        case 19:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function addMachine(machine, machineFiles, sewingTypeFile, refProdFiles, files, cb) {\n  var formData = new FormData();\n  var machineFilesKeys = Object.keys(machineFiles);\n  var hasError = [false, false, false];\n  machineFilesKeys.forEach(function (mkey) {\n    hasError[0] = !validateImage([\"png\", \"jpg\", \"jpeg\", \"svg\", \"gif\", \"webp\"], 10000, machineFiles[mkey]);\n    formData.append(\"machines\", machineFiles[mkey]);\n  });\n  var refProdFilesKey = Object.keys(refProdFiles);\n  refProdFilesKey.forEach(function (rfKey) {\n    hasError[1] = !validateImage([\"png\", \"jpg\", \"jpeg\", \"svg\", \"gif\", \"webp\"], 10000, refProdFiles[rfKey]);\n    formData.append(\"productReferences\", refProdFiles[rfKey]);\n  });\n  hasError[2] = !validateImage([\"png\", \"jpg\", \"jpeg\", \"svg\", \"gif\", \"webp\"], 10000, sewingTypeFile);\n\n  if (hasError.includes(true)) {\n    return cb(\"Você precisa subir imagens png, jpg, jpeg, svg, gif, webp com no máximo 10MB\");\n  }\n\n  var fieldError = fieldValidation({\n    nome: machine.name,\n    fabricante: machine.manufacturer,\n    subtítulo: machine.description,\n    categoria: machine.category,\n    características: machine.mainFeatures\n  });\n\n  if (fieldError[\"return\"]) {\n    formData.append(\"name\", machine.name);\n    formData.append(\"manufacturer\", machine.manufacturer);\n    formData.append(\"description\", machine.description);\n    formData.append(\"category\", machine.category);\n    formData.append(\"mainFeatures\", machine.mainFeatures);\n    formData.append(\"specifications\", JSON.stringify(machine.specifications));\n    formData.append(\"video\", machine.video);\n    formData.append('folheto', files.folheto);\n    formData.append('manual', files.manual);\n    setApi().post(\"machine\", formData).then(function (response) {\n      cb(null, response.data);\n    })[\"catch\"](function (err) {\n      cb(err.response ? err.response.data : err.toString());\n    });\n  } else {\n    return cb(\"\".concat(fieldError.message, \" \").concat(fieldError.field));\n  }\n}\nexport function deleteMachine(id, cb) {\n  setApi()[\"delete\"](\"/machine/\".concat(id)).then(function (response) {\n    cb(null, response.data);\n  })[\"catch\"](function (err) {\n    cb(err.response ? err.response.data : err.toString());\n  });\n}","map":null,"metadata":{},"sourceType":"module"}