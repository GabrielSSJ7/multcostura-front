{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from 'styled-components';\nimport { Creators } from '../../ducks/machines';\nimport { Column, Row, Select, Title } from '../../static/styled-components/base';\nexport default function Filters({\n  type\n}) {\n  const {\n    machinesForFilters,\n    filters: filtersChoosed,\n    machines\n  } = useSelector(state => state.Machine);\n  const dispatch = useDispatch();\n  const {\n    0: filters,\n    1: setFilters\n  } = useState({});\n  const {\n    0: filtersSelecteds,\n    1: setFiltersSelecteds\n  } = useState({});\n  const {\n    0: filtersElement,\n    1: setFiltersElement\n  } = useState([]);\n\n  function configFilters() {\n    let _filters = {};\n    let _filtersSelected = {};\n\n    if (machines.length > 1) {\n      machines.forEach((machine, a) => {\n        const specKeys = machine.specifications ? Object.keys(machine.specifications) : [];\n        specKeys.forEach((k, i) => {\n          _filtersSelected = _objectSpread({}, _filtersSelected, {\n            [k]: null\n          });\n\n          if (machine.specifications[k]) {\n            _filters = _objectSpread({}, _filters, {\n              [k]: _filters[k] ? _filters[k].includes(machine.specifications[k]) ? _filters[k] : [..._filters[k], machine.specifications[k]] : [machine.specifications[k]]\n            });\n          }\n        });\n      });\n      setFiltersSelecteds(_filtersSelected);\n      dispatch(Creators.loadFilters(_filtersSelected));\n      setFilters(_filters);\n    }\n  }\n\n  useEffect(() => {\n    if (type == \"categories\" || type == \"manufacturer\") configFilters();\n  }, []);\n  useEffect(() => {\n    if (type == \"categories\") {\n      let _filters = {};\n\n      if (machines.length >= 1) {\n        machines.forEach((machine, a) => {\n          const specKeys = machine.specifications ? Object.keys(machine.specifications) : [];\n          specKeys.forEach((k, i) => {\n            if (machine.specifications[k]) {\n              _filters = _objectSpread({}, _filters, {\n                [k]: _filters[k] ? _filters[k].includes(machine.specifications[k]) ? _filters[k] : [..._filters[k], machine.specifications[k]] : [machine.specifications[k]]\n              });\n            }\n          });\n        });\n        setFilters(_filters);\n      }\n    }\n  }, [machines]);\n\n  function handleChange(e) {\n    if (e.target.value == 0) {\n      dispatch(Creators.loadFilters(_objectSpread({}, filtersSelecteds, {\n        [e.target.name]: null\n      })));\n      setFiltersSelecteds(_objectSpread({}, filtersSelecteds, {\n        [e.target.name]: null\n      }));\n      return;\n    }\n\n    if (e.target.value != 0) {\n      dispatch(Creators.loadFilters(_objectSpread({}, filtersSelecteds, {\n        [e.target.name]: e.target.value\n      })));\n      setFiltersSelecteds(_objectSpread({}, filtersSelecteds, {\n        [e.target.name]: e.target.value\n      }));\n    }\n  } // function filterMachines () {\n  // \tconst keys = Object.keys(filtersSelecteds)\n  // \tlet filtersAreEmpty = true\n  // \tkeys.forEach(k => {\n  // \t\tif (filtersSelecteds[k]) filtersAreEmpty = false \n  // \t})\n  // \tif (!filtersAreEmpty) {\n  // \t\tconst machinesFiltereds = machinesForFilters.filter((m, i) => {\n  // \t\t\tlet r = false\n  // \t\t\tkeys.forEach(k => {\n  // \t\t\t\tif (m.specifications[k]){\n  // \t\t\t\t\tif (m.specifications[k] == filtersSelecteds[k])\n  // \t\t\t\t\t\tr = true\n  // \t\t\t\t}\n  // \t\t\t})\n  // \t\t\treturn r\n  // \t\t})\n  // \t\tdispatch(Creators.loadMachines(machinesFiltereds))\n  // \t} else {\n  // \t\tdispatch(Creators.loadMachines(machinesForFilters))\n  // \t}\n  // }\n\n\n  function handleDelete(i) {\n    if (i) {\n      const keys = Object.keys(filtersSelecteds);\n      setFiltersSelecteds(_objectSpread({}, filtersSelecteds, {\n        [keys[i]]: null\n      }));\n      dispatch(Creators.loadFilters(_objectSpread({}, filtersSelecteds, {\n        [keys[i]]: null\n      })));\n    } else {\n      const keys = Object.keys(filtersSelecteds);\n      let _filtersSelected = {};\n      keys.forEach((k, i) => {\n        _filtersSelected = _objectSpread({}, _filtersSelected, {\n          [k]: null\n        });\n      });\n      dispatch(Creators.loadFilters(_filtersSelected));\n      setFiltersSelecteds(_filtersSelected);\n    }\n  }\n\n  function renderSelect() {\n    const keys = Object.keys(filters);\n    const elements = [];\n    keys.sort().forEach((k, i) => {\n      elements.push(__jsx(Select, {\n        key: i,\n        name: k,\n        onChange: handleChange,\n        value: filtersSelecteds[k] == null ? 0 : filtersSelecteds[k],\n        style: {\n          flex: 1,\n          minWidth: \"200px\",\n          marginRight: '5px',\n          color: filtersSelecteds[k] == null ? \"black\" : \"red\"\n        }\n      }, __jsx(\"option\", {\n        value: 0\n      }, k.replace(/([A-Z])/g, ' $1').trim().toLowerCase()), filters[k].map(f => {\n        return __jsx(\"option\", {\n          value: f\n        }, f);\n      })));\n    });\n    return elements;\n  }\n\n  function renderFilterSelecteds() {\n    const keys = Object.keys(filtersSelecteds);\n    const elements = [];\n    keys.forEach((k, i) => filtersSelecteds[k] ? elements.push(__jsx(Tag, {\n      onClick: () => handleDelete(i)\n    }, filtersSelecteds[k], \" \", __jsx(\"span\", {\n      style: {\n        color: \"grey\",\n        marginLeft: \"2px\"\n      }\n    }, \"X\"))) : null);\n    if (elements.length > 0) elements.push(__jsx(Tag, {\n      onClick: () => handleDelete(null)\n    }, \"LIMPAR FILTROS\"));\n    return elements;\n  }\n\n  return __jsx(Row, {\n    style: {\n      flex: 2,\n      flexWrap: \"wrap\",\n      padding: \"10px\"\n    }\n  }, renderSelect().length > 0 ? __jsx(Column, null, __jsx(Row, {\n    style: {\n      flexWrap: \"wrap\"\n    },\n    jc: \"space-between\"\n  }, \" \", renderSelect(), \" \"), __jsx(Row, null, renderFilterSelecteds())) : null);\n}\nconst Tag = styled.span.withConfig({\n  displayName: \"Filters__Tag\",\n  componentId: \"sc-1il7rhp-0\"\n})([\"border-radius:15px;background:lightgrey;padding:5px 10px;-webkit-transition:.2s;font-size:75%;margin-right:5px;color:white;cursor:pointer;transition:.2s;:hover{opacity:.8;}\"]);","map":null,"metadata":{},"sourceType":"module"}