{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport Head from 'next/head';\nimport { Link } from \"../routes\";\nimport { connect } from \"react-redux\";\nimport { Column } from '../src/static/styled-components/base';\nimport Home from '../src/components/web/home/Home';\nimport Map from '../src/components/web/Map';\nimport SlideWeb from '../src/components/web/SlideWeb';\nimport Template from '../src/components/templates/Web';\nimport setApi from '../src/api';\n\nconst IndexPage = () => {\n  const {\n    0: resellers,\n    1: setResellers\n  } = useState([]);\n  const {\n    0: images,\n    1: setImages\n  } = useState([]);\n  const {\n    0: map,\n    1: setMap\n  } = useState(null);\n  const {\n    0: infobox,\n    1: setInfobox\n  } = useState();\n  useEffect(() => {\n    async function async() {\n      setApi().get('/institutional/homeBanners').then(res => {\n        setImages(res.data);\n      }).catch(err => {});\n\n      try {\n        const response = await setApi().get('/reseller');\n        setResellers(response.data);\n        const revendedores = response.data;\n        let map, infobox;\n\n        function loadMapScenario() {\n          map = new Microsoft.Maps.Map(document.getElementById('map'), {});\n          setMap(map);\n\n          for (let revendedor in revendedores) {\n            //Create an infobox at the center of the map but don't show it.\n            infobox = new Microsoft.Maps.Infobox(map.getCenter(), {\n              visible: false\n            }); //Assign the infobox to a map instance.\n\n            infobox.setMap(map); //Create a pushpin at a random location in the map bounds.\n\n            var randomLocation = Microsoft.Maps.TestDataGenerator.getLocations(1, map.getBounds());\n            var pin = new Microsoft.Maps.Pushpin({\n              latitude: revendedores[revendedor].maps.lat,\n              longitude: revendedores[revendedor].maps.lng,\n              altitude: 0,\n              altitudeReference: -1\n            }); //Store some metadata with the pushpin.\n\n            pin.metadata = {\n              title: revendedores[revendedor].name,\n              description: \"Endereço: \" + revendedores[revendedor].address + \"<br/> Tel: \" + revendedores[revendedor].phone + \"<br/> E-mail: \" + revendedores[revendedor].email\n            }; //Add a click event handler to the pushpin.\n\n            Microsoft.Maps.Events.addHandler(pin, 'click', pushpinClicked); //Add pushpin to the map.\n\n            map.entities.push(pin);\n          }\n        }\n\n        function pushpinClicked(e) {\n          //Make sure the infobox has metadata to display.\n          if (e.target.metadata) {\n            //Set the infobox options with the metadata of the pushpin.\n            infobox.setOptions({\n              location: e.target.getLocation(),\n              title: e.target.metadata.title,\n              description: e.target.metadata.description,\n              visible: true\n            });\n          }\n        } //adMapScenario();\n\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    async();\n  }, []);\n  return __jsx(Template, null, __jsx(Column, {\n    style: {\n      width: \"100%\"\n    }\n  }, __jsx(SlideWeb, {\n    images: images.map(img => img.image)\n  }), __jsx(Home, null), __jsx(Map, {\n    map: map,\n    resellers: resellers\n  })));\n};\n\nIndexPage.getInitialProps = ({\n  reduxStore\n}) => {\n  return {};\n};\n\nexport default IndexPage;","map":{"version":3,"sources":["C:/Users/Gluz/Projects/web/multcostura/multcostura-web/pages/index.js"],"names":["React","useEffect","useState","Head","Link","connect","Column","Home","Map","SlideWeb","Template","setApi","IndexPage","resellers","setResellers","images","setImages","map","setMap","infobox","setInfobox","async","get","then","res","data","catch","err","response","revendedores","loadMapScenario","Microsoft","Maps","document","getElementById","revendedor","Infobox","getCenter","visible","randomLocation","TestDataGenerator","getLocations","getBounds","pin","Pushpin","latitude","maps","lat","longitude","lng","altitude","altitudeReference","metadata","title","name","description","address","phone","email","Events","addHandler","pushpinClicked","entities","push","e","target","setOptions","location","getLocation","console","log","width","img","image","getInitialProps","reduxStore"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Head from 'next/head'\nimport { Link } from \"../routes\";\nimport { connect } from \"react-redux\";\nimport { Column } from '../src/static/styled-components/base'\nimport Home from '../src/components/web/home/Home'\nimport Map from '../src/components/web/Map'\nimport SlideWeb from '../src/components/web/SlideWeb'\nimport Template from '../src/components/templates/Web'\nimport setApi from '../src/api'\n\n\n\nconst IndexPage = () => {\n  const [resellers, setResellers] = useState([]);\n\tconst [images, setImages] = useState([])\n  const [map, setMap] = useState(null)\n  const [infobox, setInfobox] = useState()\n\n  useEffect(() => {\n  \tasync function async() {\n\n      setApi()\n  \t\t\t.get('/institutional/homeBanners')\n  \t\t\t.then(res => {\n  \t\t\t\tsetImages(res.data)\n  \t\t\t})\n  \t\t\t.catch(err => {\n\n  \t\t\t})\n\n      try{\n        const response = await setApi().get('/reseller')\n        setResellers(response.data)\n        const revendedores = response.data\n\n        let map, infobox;\n        function loadMapScenario() {\n          map = new Microsoft.Maps.Map(document.getElementById('map'), {})\n          setMap(map)\n          for (let revendedor in revendedores){\n            //Create an infobox at the center of the map but don't show it.\n            infobox = new Microsoft.Maps.Infobox(map.getCenter(), {\n              visible: false\n            });\n\n            //Assign the infobox to a map instance.\n            infobox.setMap(map);\n\n            //Create a pushpin at a random location in the map bounds.\n            var randomLocation = Microsoft.Maps.TestDataGenerator.getLocations(1, map.getBounds());\n            \n            var pin = new Microsoft.Maps.Pushpin({\n              latitude: revendedores[revendedor].maps.lat,\n              longitude: revendedores[revendedor].maps.lng,\n              altitude: 0,\n              altitudeReference: -1\n            });\n\n            //Store some metadata with the pushpin.\n            pin.metadata = {\n                title: revendedores[revendedor].name,\n                description: \"Endereço: \" + revendedores[revendedor].address + \"<br/> Tel: \" + revendedores[revendedor].phone + \"<br/> E-mail: \" + revendedores[revendedor].email\n            };\n\n           //Add a click event handler to the pushpin.\n            Microsoft.Maps.Events.addHandler(pin, 'click', pushpinClicked);\n\n            //Add pushpin to the map.\n            map.entities.push(pin);\n          }\n        }\n\n        function pushpinClicked(e) {\n          //Make sure the infobox has metadata to display.\n          if (e.target.metadata) {\n            //Set the infobox options with the metadata of the pushpin.\n            infobox.setOptions({\n                location: e.target.getLocation(),\n                title: e.target.metadata.title,\n                description: e.target.metadata.description,\n                visible: true\n            });\n          }\n        }\n\n        //adMapScenario();\n\n      } catch (e) {\n        console.log(e)\n      }\n  \t}   \n  \tasync();\n  }, [])\n  \n\n  return (\n    <Template>\n      <Column style={{ width: \"100%\" }}>\n        <SlideWeb images={images.map(img => img.image)} />\n        <Home />\n        <Map map={map} resellers={resellers}/>\n      </Column>\n    </Template>\n  );\n};\n\nIndexPage.getInitialProps = ({ reduxStore }) => {\n  return {};\n};\n\nexport default IndexPage\n"]},"metadata":{},"sourceType":"module"}