{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'React';\nimport styled from 'styled-components';\nimport setApi from '../../api';\nimport { Row, Column, Select } from '../../static/styled-components/base';\nlet infobox, map;\nexport default class MapsQuest extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      states: [],\n      cities: [],\n      state: {\n        id: 'Selecione um estado',\n        name: null\n      },\n      city: null,\n      resellersFound: false\n    };\n  }\n\n  async componentDidMount() {\n    const response = await setApi().get(\"/dist/locates.json\");\n    this.setState({\n      states: response.data.estados,\n      cities: response.data.cidades\n    });\n    if (!this.props.showMultcostura) this.loadMapScenario();else this.setMultViewMap();\n  }\n\n  async onChangeState(e) {\n    const value = e.target.value.split(\"-\");\n    this.setState({\n      state: {\n        id: value[0],\n        name: value[1]\n      },\n      city: 'Selecione uma cidade'\n    });\n  }\n\n  onChangeCity(e) {\n    this.setState({\n      city: e.target.value\n    });\n  } //let map, infobox;\n\n\n  async loadMapScenario() {\n    const response = await setApi().get('/reseller'); //setResellers(response.data)\n\n    const revendedores = response.data;\n    map = new Microsoft.Maps.Map(document.getElementById('map'), {}); //setMap(map)\n\n    for (let revendedor in revendedores) {\n      //Create an infobox at the center of the map but don't show it.\n      infobox = new Microsoft.Maps.Infobox(map.getCenter(), {\n        visible: false\n      }); //Assign the infobox to a map instance.\n\n      infobox.setMap(map); //Create a pushpin at a random location in the map bounds.\n\n      var randomLocation = Microsoft.Maps.TestDataGenerator.getLocations(1, map.getBounds());\n      var pin = new Microsoft.Maps.Pushpin({\n        latitude: revendedores[revendedor].maps.lat,\n        longitude: revendedores[revendedor].maps.lng,\n        altitude: 0,\n        altitudeReference: -1\n      }); //Store some metadata with the pushpin.\n\n      pin.metadata = {\n        title: revendedores[revendedor].name,\n        description: \"Endereço: \" + revendedores[revendedor].address + \"<br/> Tel: \" + revendedores[revendedor].phone + \"<br/> E-mail: \" + revendedores[revendedor].email\n      }; //Add a click event handler to the pushpin.\n\n      Microsoft.Maps.Events.addHandler(pin, 'click', this.pushpinClicked); //Add pushpin to the map.\n\n      map.entities.push(pin);\n    }\n  }\n\n  pushpinClicked(e) {\n    //Make sure the infobox has metadata to display.\n    if (e.target.metadata) {\n      //Set the infobox options with the metadata of the pushpin.\n      infobox.setOptions({\n        location: e.target.getLocation(),\n        title: e.target.metadata.title,\n        description: e.target.metadata.description,\n        visible: true\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.state !== prevState.state) {\n      this.setViewMap(this.state.state, this.state.city);\n    }\n\n    if (this.state.city !== prevState.city) {\n      this.setViewMap(this.state.state, this.state.city);\n    }\n\n    if (prevProps !== this.props) {\n      console.log(this.props.showMultcostura); //if (this.props.showMultcostura)\n      //this.setMultViewMap();\n    }\n  }\n\n  async setViewMap(state, city) {\n    //const map = new Microsoft.Maps.Map(document.getElementById('map'), {})\n    //const { map } = this.props\n    if (map) {\n      if (state || city) {\n        Microsoft.Maps.loadModule('Microsoft.Maps.Search', function () {\n          var searchManager = new Microsoft.Maps.Search.SearchManager(map);\n          var requestOptions = {\n            bounds: map.getBounds(),\n            where: `${city ? city + ', ' + state.id : state.name}`,\n            callback: function (answer, userData) {\n              map.setView({\n                center: new Microsoft.Maps.Location(answer.results[0].location.latitude, answer.results[0].location.longitude),\n                zoom: 11\n              });\n            }\n          };\n          searchManager.geocode(requestOptions);\n        });\n      }\n    }\n  }\n\n  async setMultViewMap() {\n    console.log(\"setMultViewMap\");\n    map = new Microsoft.Maps.Map(document.getElementById('map'), {});\n    Microsoft.Maps.loadModule('Microsoft.Maps.Search', function () {\n      var searchManager = new Microsoft.Maps.Search.SearchManager(map);\n      var requestOptions = {\n        bounds: map.getBounds(),\n        where: `Rua Newton Prado, 71 Bom Retiro São Paulo SP`,\n        callback: function (answer, userData) {\n          var pushpin = new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(answer.results[0].location.latitude, answer.results[0].location.longitude), {\n            text: 'M',\n            title: 'Multcostura',\n            subTitle: 'Rua Newton Prado, 71 Bom Retiro São Paulo SP'\n          });\n          map.entities.push(pushpin);\n          map.setView({\n            center: new Microsoft.Maps.Location(answer.results[0].location.latitude, answer.results[0].location.longitude),\n            zoom: 17\n          });\n        }\n      };\n      searchManager.geocode(requestOptions);\n    });\n  }\n\n  render() {\n    return this.props.showMultcostura ? __jsx(Row, {\n      id: \"map\",\n      style: {\n        width: \"87%\",\n        height: \"500px\",\n        marginBottom: \"10px\",\n        marginLeft: '10px',\n        minWidth: \"300px\",\n        flex: 1\n      }\n    }) : __jsx(Column, {\n      style: {\n        width: \"100%\",\n        marginTop: \"100px\"\n      },\n      ait: \"center\"\n    }, __jsx(\"h1\", {\n      style: {\n        color: \"#5B5B5B\"\n      }\n    }, \"Encontre um revendedor pr\\xF3ximo a voc\\xEA!\"), __jsx(Row, {\n      jc: \"space-around\",\n      ait: \"center\",\n      style: {\n        width: \"50%\",\n        flexWrap: \"wrap\"\n      }\n    }, __jsx(Select, {\n      style: {\n        minWidth: \"120px\",\n        margin: \"0 5px\",\n        width: \"160px\",\n        padding: \"0\",\n        background: \"transparent linear-gradient(180deg, #FCF6F6 0%, #D6D6D6 100%) 0% 0% no-repeat padding-box\",\n        height: \"40px\"\n      },\n      onChange: this.onChangeState.bind(this),\n      value: `${this.state.state.id}-${this.state.state.name}`\n    }, __jsx(\"option\", {\n      value: 'Selecione um estado'\n    }, \"Selecione um estado\"), this.state.states.map((st, i) => __jsx(\"option\", {\n      key: i,\n      value: `${st.id}-${st.estado}`\n    }, st.estado))), __jsx(Select, {\n      style: {\n        minWidth: \"120px\",\n        width: \"160px\",\n        margin: \"0 5px\",\n        padding: \"0\",\n        background: \"transparent linear-gradient(180deg, #FCF6F6 0%, #D6D6D6 100%) 0% 0% no-repeat padding-box\",\n        height: \"40px\"\n      },\n      onChange: this.onChangeCity.bind(this),\n      value: this.state.city\n    }, __jsx(\"option\", {\n      value: \"Selecione uma cidade\"\n    }, \"Selecione uma cidade\"), this.state.cities.filter(cit => cit.estadoId == this.state.state.id ? cit : false).map((cit, i) => __jsx(\"option\", {\n      key: i,\n      value: cit.id\n    }, cit.cidade)))), __jsx(Row, {\n      id: \"map\",\n      style: {\n        width: \"70%\",\n        height: \"500px\",\n        marginBottom: \"10px\",\n        marginTop: \"10px\"\n      }\n    }), __jsx(Row, {\n      style: {\n        flexWrap: \"wrap\"\n      }\n    }, this.props.resellers.filter(resel => {\n      const {\n        city,\n        state\n      } = this.state;\n\n      if ((new RegExp(state.id).test(resel.address) || new RegExp(state.name).test(resel.address)) && new RegExp(city).test(resel.address)) {\n        return resel;\n      } else {\n        if (new RegExp(state.id).test(resel.address) || new RegExp(state.name).test(resel.address)) {\n          return resel;\n        }\n      }\n    }).map((resel, i) => __jsx(CardContainer, {\n      key: i\n    }, __jsx(Column, null, __jsx(Item, null, resel.name), __jsx(\"hr\", {\n      style: {\n        width: \"100%\"\n      }\n    }), __jsx(Item, null, resel.address), __jsx(Item, null, \"Tel: \", resel.phone), __jsx(Item, null, \"E-mail: \", resel.email))))));\n  }\n\n}\nconst Item = styled.p.withConfig({\n  displayName: \"Map__Item\",\n  componentId: \"sc-1fuegwh-0\"\n})([\"margin:0;\"]);\nconst CardContainer = styled.div.withConfig({\n  displayName: \"Map__CardContainer\",\n  componentId: \"sc-1fuegwh-1\"\n})([\"flex:1;min-width:250px;max-width:250px;max-height:300px;overflow:hidden;cursor:pointer;display:flex;flex-direction:column;padding:15px;flex-wrap:no-wrap;margin-bottom:10px;margin-right:10px;img{width:100%;max-width:230px;display:block;margin:auto}:hover{box-shadow:0 14px 28px rgba(0,0,0,0.25),0 10px 10px rgba(0,0,0,0.22);}box-shadow:0 3px 6px rgba(0,0,0,0.16),0 3px 6px rgba(0,0,0,0.23);}\"]);\nconst SearchBtn = styled.span.withConfig({\n  displayName: \"Map__SearchBtn\",\n  componentId: \"sc-1fuegwh-2\"\n})([\"height:16px;background:#282D90 0% 0% no-repeat padding-box;box-shadow:1px 1px 6px #00000029;border-radius:3px;opacity:1;cursor:pointer;color:white;padding:10px;transition:.3s;:hover{opacity:.8;}\"]);","map":null,"metadata":{},"sourceType":"module"}