{"version":3,"file":"static/webpack/static\\development\\pages\\admin\\home.js.e4a190c3493d4b84bee7.hot-update.js","sources":["webpack:///./src/components/admin/institutional/Home.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport router from \"next/router\";\r\nimport Template from \"../../templates/Admin\";\r\nimport Sidebar from \"../Sidebar\";\r\nimport Slide from \"../../utils/Slider\";\r\nimport {\r\n  Container,\r\n  Button,\r\n  Select,\r\n  Hr\r\n} from \"../../../static/styled-components/base\";\r\nimport FileInput from \"../../utils/FileInput\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { changeFileName, validateImage } from \"../../../utils/images\";\r\nimport { saveSlide, getSlide } from \"../../../utils/banner\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport imageNotFound from \"../../../static/images/image-404.jpg\";\r\n\r\nexport default function HomeBanner() {\r\n  const imageMessageError = `Extensão do arquivo enviado é inválido. Extensões permitidas ${process.env.imageExtensionPermitted.toString()}, com no máximo 10MB`\r\n  const [name, setName] = useState(\"\");\r\n  const [images, setImages] = useState([]);\r\n  const [inputs, setInputs] = useState([]);\r\n  const [files, setFiles] = useState([]);\r\n  const [slideControl, setSlideControl] = useState(1);\r\n  const [snackBar, setSnackBar] = useState({\r\n    result: \"success\",\r\n    open: false,\r\n    message: \"\"\r\n  });\r\n\r\n  function handleChange(e, inputIndex) {\r\n    changeBannerImage(e.target.files[0], inputIndex);\r\n  }\r\n\r\n  function addSlide() {\r\n    const inputIndex = images.length;\r\n    setImages([...images, { image: imageNotFound, pos: inputIndex, name: \"\" }]);\r\n    setInputs([\r\n      ...inputs,\r\n      <FileInput\r\n        type=\"file\"\r\n        handleChange={e => handleChange(e, inputIndex)}\r\n        labelInputFile={`Enviar Imagem`}\r\n        maxWidth=\"50%\"\r\n        labelHeight=\"50px\"\r\n        labelWidth=\"150px\"\r\n        id={inputIndex}\r\n        key={inputIndex}\r\n      />\r\n    ]);\r\n    files.push(null);\r\n    setFiles(files);\r\n    setSlideControl(images.length + 1);\r\n    setSnackBar({\r\n      open: true,\r\n      result: \"success\",\r\n      message: \"Banner adicionado a lista\"\r\n    });\r\n  }\r\n\r\n  function changeBannerImage(file, index) {\r\n    if (validateImage(process.env.imageExtensionPermitted, 10000, file)) {\r\n      const newFile = changeFileName(\r\n        file,\r\n        Math.round(Math.random() * 100000 + 1) + \"\" + Date.now()\r\n      );\r\n\r\n      setImages(images =>\r\n        images.map((image, ind) => {\r\n          if (image.pos == index) {\r\n            return file\r\n              ? {\r\n                  image: URL.createObjectURL(file),\r\n                  pos: index,\r\n                  name: newFile.name\r\n                }\r\n              : { image: imageNotFound, pos: index, name: file.name };\r\n          }\r\n          return image;\r\n        })\r\n      );\r\n      const _files = files;\r\n      _files[index] = newFile;\r\n      setFiles(_files);\r\n      setSlideControl(index + 1);\r\n    } else {\r\n      setSnackBar({\r\n          open: true,\r\n          result: 'error',\r\n          message: imageMessageError\r\n        })\r\n    }\r\n  }\r\n\r\n  function handleClose() {\r\n    setSnackBar({\r\n      ...snackBar,\r\n      open: false\r\n    });\r\n  }\r\n\r\n  function removeSlide(id) {\r\n    setImages(images => {\r\n      images.splice(id, 1);\r\n      return images;\r\n    });\r\n    setInputs(inputs => {\r\n      inputs.splice(id, 1);\r\n      return inputs;\r\n    });\r\n    setFiles(files => {\r\n      files.splice(id, 1);\r\n      return files;\r\n    });\r\n    setSlideControl(id == 0 ? id + 1 : id);\r\n    setSnackBar({\r\n      open: true,\r\n      result: \"success\",\r\n      message: \"Banner removido da lista\"\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    setName(router.query.name);\r\n    function asyncFunc() {\r\n    getSlide(\"institutional\", \"homeBanners\", function(err, response) {\r\n        if (err) {\r\n          setSnackBar({\r\n            open: true,\r\n            message: err,\r\n            result: \"error\"\r\n          });\r\n          return;\r\n        }\r\n        const Inputs = [];\r\n        const Files = [];\r\n        for (let a = 0; a < response.length; a++) {\r\n          Inputs.push(\r\n            <FileInput\r\n              type=\"file\"\r\n              handleChange={e => handleChange(e, a)}\r\n              labelInputFile={`Enviar Imagem`}\r\n              maxWidth=\"50%\"\r\n              labelHeight=\"50px\"\r\n              labelWidth=\"150px\"\r\n              id={a}\r\n              key={a}\r\n            />\r\n          );\r\n          Files.push(a + 1);\r\n        }\r\n        setInputs(Inputs);\r\n        setFiles(Files);\r\n        setImages(response.map(banner => ({ ...banner, name: banner.name })));\r\n\r\n      });\r\n    }\r\n\r\n    asyncFunc();\r\n\r\n    return () => {};\r\n  }, []);\r\n\r\n  function makeBannerFirst() {\r\n    const ctrl = slideControl - 1;\r\n    let currentBanner = images[ctrl];\r\n    let firstBanner = images[0];\r\n    let currentFile = files[ctrl];\r\n    let firstFile = files[0];\r\n    setImages(images => {\r\n      const newImages = images;\r\n      newImages[0] = {\r\n        image: currentBanner.image,\r\n        pos: 0,\r\n        name: currentBanner.name\r\n      };\r\n      newImages[ctrl] = {\r\n        image: firstBanner.image,\r\n        pos: ctrl,\r\n        name: firstBanner.name\r\n      };\r\n      return newImages;\r\n    });\r\n    setFiles(files => {\r\n      const newFiles = files;\r\n      newFiles[0] = currentFile;\r\n      newFiles[ctrl] = firstFile;\r\n      return newFiles;\r\n    });\r\n    setSlideControl(1);\r\n  }\r\n\r\n  function _saveSlide() {\r\n    let hasEmptyFile = false;\r\n\r\n    files.forEach(file => {\r\n      if (!file) hasEmptyFile = true;\r\n    });\r\n\r\n    if (hasEmptyFile)\r\n      setSnackBar({\r\n        result: \"error\",\r\n        message: \"Há banners sem imagens\",\r\n        open: true\r\n      });\r\n    else {\r\n      if (files.length == 0)\r\n        return setSnackBar({\r\n          result: \"error\",\r\n          message: \"Há banners sem imagens\",\r\n          open: true\r\n        });\r\n\r\n      saveSlide(null, images, files, \"homeBanners\", function(err, response) {\r\n        if (err) {\r\n          setSnackBar({\r\n            result: \"error\",\r\n            message: err,\r\n            open: true\r\n          });\r\n          return;\r\n        }\r\n        setSnackBar({\r\n          result: \"success\",\r\n          message: \"Sucesso\",\r\n          open: true\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Snackbar\r\n        open={snackBar.open}\r\n        autoHideDuration={1500}\r\n        onClose={handleClose}\r\n      >\r\n        <Alert severity={snackBar.result}>{snackBar.message}</Alert>\r\n      </Snackbar>\r\n\r\n      <Column>\r\n        <div onClick={() => location.reload()} className=\"arrow-back\" style={{ background:\"#960d03\", borderRadius: \"5px\", padding: \"5px\", maxWidth: \"60px\", marginLeft: \"10px\", marginBottom: \"5px\", display: 'flex', flexDirection: \"row\" }}>\r\n          <FontAwesomeIcon icon={faArrowLeft} style={{ color: \"white\" }} />\r\n          <span style={{ color: \"white\" }}>Voltar</span>\r\n        </div>\r\n        <style>\r\n          {`  \r\n\r\n            .arrow-back {\r\n              transition: .5s;\r\n            }\r\n\r\n            .arrow-back:hover {\r\n              cursor: pointer;\r\n              opacity: .8;\r\n            }\r\n          `}\r\n        </style>\r\n        <Row align=\"center\">\r\n          <Column style={{ width: \"100%\" }}>\r\n            {images.length == 0 ? (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    height: \"400px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    flexDirection: \"column\"\r\n                  }}\r\n                >\r\n                  <>\r\n                    <p>\r\n                      Você ainda não adicionou nenhum banner a lista de banners.\r\n                    </p>\r\n                    <p>\r\n                      Clique no botão{\" \"}\r\n                      <strong>\"Adicionar banner a lista\"</strong>.\r\n                    </p>\r\n                  </>\r\n                </div>\r\n              </>\r\n            ) : (\r\n              <>\r\n                {slideControl - 1 != 0 ? (\r\n                  <Button\r\n                    style={{\r\n                      width: \"50%\",\r\n                      display: \"block\",\r\n                      margin: \"10px auto\"\r\n                    }}\r\n                    onClick={makeBannerFirst}\r\n                  >\r\n                    Tornar este banner o principal\r\n                  </Button>\r\n                ) : (\r\n                  <span style={{ width: \"20px\", height: \"64px\" }}></span>\r\n                )}\r\n                <div style={{ position: \"relative\", width: \"100%\" }}>\r\n                  <ArrowLeft\r\n                    onClick={() => {\r\n                      setSlideControl(sl => {\r\n                        if (sl == 1) return 1;\r\n                        return sl - 1;\r\n                      });\r\n                    }}\r\n                  />\r\n                  <ArrowRight\r\n                    onClick={() => {\r\n                      setSlideControl(sl => {\r\n                        if (sl == images.length) return 1;\r\n                        return sl + 1;\r\n                      });\r\n                    }}\r\n                  />\r\n                  <Slide\r\n                    slideCtrl={slideControl}\r\n                    images={images.map(image => image.image)}\r\n                    height=\"400px\"\r\n                    slideWidth=\"100%\"\r\n                  />\r\n                </div>\r\n\r\n                <div\r\n                  style={{\r\n                    width: \"100%\",\r\n                    display: \"flex\",\r\n                    flexWrap: \"wrap\",\r\n                    marginLeft: \"5px\",\r\n                    padding: \"2px 0\"\r\n                  }}\r\n                >\r\n                  {images.map((image, id) => (\r\n                    <ThumbnailBanner\r\n                      style={{\r\n                        border: `${\r\n                          id == slideControl - 1\r\n                            ? \"2px solid #960d03\"\r\n                            : \"2px solid transparent\"\r\n                        }`\r\n                      }}\r\n                      onClick={() => {\r\n                        setSlideControl(parseInt(id + 1));\r\n                      }}\r\n                    >\r\n                      <img src={image.image} style={{ width: \"100%\" }} />\r\n                    </ThumbnailBanner>\r\n                  ))}\r\n                </div>\r\n\r\n                <h2 style={{ textAlign: \"center\" }}>\r\n                  Posição do banner {slideControl}\r\n                </h2>\r\n                <h4 style={{ textAlign: \"center\" }}>\r\n                  Total de banners {inputs.length}\r\n                </h4>\r\n              </>\r\n            )}\r\n          </Column>\r\n          <Column style={{ width: \"100%\" }}>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                flexDirection: \"column\",\r\n                alignItems: \"center\"\r\n              }}\r\n            >\r\n              {inputs[slideControl - 1]}{\" \"}\r\n              {images.length != 0 ? (\r\n                <Button\r\n                  style={{ width: \"30%\" }}\r\n                  onClick={() => removeSlide(slideControl - 1)}\r\n                >\r\n                  Remover banner\r\n                </Button>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </div>\r\n\r\n            <Button\r\n              style={{ width: \"50%\", margin: \"15px auto\", display: \"block\" }}\r\n              onClick={addSlide}\r\n            >\r\n              Adicionar banner a lista\r\n            </Button>\r\n\r\n            {images.length != 0 ? (\r\n              <Button\r\n                style={{\r\n                  width: \"50%\",\r\n                  margin: \"15px auto\",\r\n                  display: \"block\"\r\n                }}\r\n                onClick={_saveSlide}\r\n              >\r\n                Salvar\r\n              </Button>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n\r\n\r\n            <div style={{ border: \"1px solid grey\", margin: \"10px\"}}><p style={{ textAlign: \"center\" }}>As imagens devem ter 1920x400</p></div>\r\n          </Column>\r\n        </Row>\r\n      </Column>\r\n    </>\r\n  );\r\n}\r\n\r\nconst Column = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: ${props => props.align};\r\n  width: ${props => props.w};\r\n`;\r\n\r\nconst ThumbnailBanner = styled.div`\r\n  width: 100px;\r\n  display: flex;\r\n  margin-right: 5px;\r\n  align-items: center;\r\n  transition: 0.2s;\r\n  cursor: pointer;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n`;\r\n\r\nconst ImageContainer = styled.div`\r\n  img {\r\n    max-width: 120px;\r\n  }\r\n`;\r\n\r\nconst ArrowLeft = styled.span`\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  transition: 0.2s;\r\n  position: absolute;\r\n  z-index: 9;\r\n  left: 0;\r\n  margin-left: 40px;\r\n  cursor: pointer;\r\n  top: 50%;\r\n  margin-top: -10px;\r\n  border-top: 30px solid transparent;\r\n  border-bottom: 30px solid transparent;\r\n  border-right: 30px solid #960d03;\r\n`;\r\nconst ArrowRight = styled.span`\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  transition: 0.2s;\r\n  position: absolute;\r\n  z-index: 9;\r\n  right: 0;\r\n  margin-right: 40px;\r\n  cursor: pointer;\r\n  width: 0;\r\n  height: 0;\r\n  top: 50%;\r\n  margin-top: -10px;\r\n  border-top: 30px solid transparent;\r\n  border-bottom: 30px solid transparent;\r\n  border-left: 30px solid #960d03;\r\n`;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAQA;AACA;AACA;AAHA;AAPA;AAAA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAXA;AAYA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAxBA;AACA;AAUA;AAAA;AAcA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAHA;AAKA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAeA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAwBA;AACA;AACA;AACA;AAHA;AAKA;AANA;AAWA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AASA;AAEA;AACA;AADA;AAOA;AACA;AACA;AAVA;AAYA;AAAA;AAAA;AAAA;AAAA;AAbA;AAkBA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAYA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AASA;AACA;AACA;AACA;AAHA;AAKA;AANA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}