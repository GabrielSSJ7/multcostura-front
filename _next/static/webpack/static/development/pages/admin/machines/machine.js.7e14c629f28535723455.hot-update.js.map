{"version":3,"file":"static/webpack/static\\development\\pages\\admin\\machines\\machine.js.7e14c629f28535723455.hot-update.js","sources":["webpack:///./src/components/admin/machines/EditMachine.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { Router } from \"../../../../routes\";\n\nimport {\n  getMachine,\n  getOptions,\n  deleteImage,\n  updateMachine,\n  deleteMachine\n} from \"../../../utils/machines\";\nimport { getNameImageFromUrl, changeFileName, validateImage } from \"../../../utils/images\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPencilAlt, faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\nimport FileInput from \"./EditMachine/FileInput\";\nimport Message from \"../../utils/Message\";\n\nimport {\n  Hr,\n  Input,\n  TextArea,\n  Select,\n  Button\n} from \"../../../static/styled-components/base\";\n\nexport default function EditMachine({ id }) {\n  const imageMessageError = `Extensão do arquivo enviado é inválido. Extensões permitidas ${process.env.imageExtensionPermitted.toString()}, com no máximo 10MB`\n  const dispatch = useDispatch();\n  const [snackBar, setSnackBar] = useState({\n    result: \"success\",\n    open: false,\n    message: \"\"\n  });\n  function handleClose() {\n    setSnackBar({\n      ...snackBar,\n      open: false\n    });\n  }\n  const [state, setState] = useState({\n    name: \"\",\n    description: \"\",\n    mainFeatures: \"\",\n    specifications: {},\n    category: null,\n    manufacturer: null,\n    images: [],\n    productRef: []\n  });\n\n  const [machineFiles, setMachineFiles] = useState({\n    machineFile1: null,\n    machineFile2: null,\n    machineFile3: null,\n    machineFile4: null,\n    machineFile5: null\n  });\n\n  const [sewingFile, setSewingFile] = useState(null);\n\n  const [refProdFiles, setRefProdFiles] = useState({\n    refProdFile1: null,\n    refProdFile2: null,\n    refProdFile3: null,\n    refProdFile4: null,\n    refProdFile5: null\n  });\n\n  const [categoriesManufacturers, setCategoriesManufacturers] = useState({\n    categories: [],\n    manufacturers: []\n  });\n\n  const [visible, setVisible] = useState(false);\n  const [title, setTitle] = useState(false);\n\n  useEffect(() => {\n    function asyncFunc() {\n      getOptions(function(err, dataCb) {\n        if (err) {\n          setSnackBar({\n            result: \"error\",\n            message: err,\n            open: true\n          });\n          return;\n        }\n        setCategoriesManufacturers({\n          manufacturers: dataCb.manufacturers.data,\n          categories: dataCb.categories.data\n        });\n      });\n      getMachine(id, function(err, machine) {\n        if (err) {\n          setSnackBar({\n            result: \"error\",\n            message: err,\n            open: true\n          });\n          return;\n        }\n        setState({\n          ...machine,\n          name: machine.name,\n          description: machine.description,\n          mainFeatures: machine.mainFeatures,\n          specifications: machine.specifications,\n          category: machine.category._id,\n          manufacturer: machine.manufacturer,\n          videoInput: machine.video\n        });\n      });\n    }\n    asyncFunc();\n    return () => {};\n  }, []);\n\n\n  function handleChangeVideo(e) {\n    const YTBaseURL = \"https://www.youtube.com/embed/\"\n    if (getParam(e.target.value) == 0) {\n      setState({...state, videoInput: e.target.value, video: '' })\n      setSnackBar({\n        open: true,\n        result: 'error',\n        message: 'O endereço não é uma URL válida do YouTube'\n      })\n    } else {\n      setState({...state, video: YTBaseURL + getParam(e.target.value), videoInput: e.target.value })\n    }\n  }\n\n  function getParam(url) {\n    var results = new RegExp('[\\?&]' + 'v' + '=([^&#]*)')\n                      .exec(url);\n    if (results == null) {\n         return 0;\n    }\n    return results[1] || 0;\n  }\n  const [folheto, setFolheto] = useState(null)\n  const [manual, setManual] = useState(null)\n\n  function folhetoChange(e) {\n    if (e) {\n      const type = e.target.files[0].name.split(\".\")\n      if (type[1] != \"pdf\") {\n        setSnackBar({\n          open: true,\n          result: 'error',\n          message: 'O folheto deve ser apenas formato PDF'\n        })\n      } else {\n        setFolheto(e.target.files[0])      \n      }\n    }\n    \n  }\n\n  function manualChange(e) {\n    if (e) {\n      const type = e.target.files[0].name.split(\".\")\n      if (type[1] != \"pdf\") {\n        setSnackBar({\n          open: true,\n          result: 'error',\n          message: 'O manual deve ser apenas formato PDF'\n        })\n      } else {\n        setManual(e.target.files[0])      \n      }\n    }\n    \n  }\n\n  function machineHandleChange(e) {\n    if (validateImage(process.env.imageExtensionPermitted, 10000, e.target.files[0])) {\n      const newName = parseInt(e.target.name[e.target.name.length - 1]) - 1;\n      setMachineFiles({\n        ...machineFiles,\n        [e.target.name]: changeFileName(e.target.files[0], newName)\n      });\n    } else {\n      setSnackBar({\n        open: true,\n        result: 'error',\n        message: imageMessageError\n      })\n    }\n  }\n\n  function machineCleanFileInput(name) {\n    setMachineFiles({\n      ...machineFiles,\n      [name]: null\n    });\n  }\n\n  function refProdHandleChange(e) {\n    if (validateImage(process.env.imageExtensionPermitted, 10000, e.target.files[0])) {\n      const newName = parseInt(e.target.name[e.target.name.length - 1]) - 1;\n      setRefProdFiles({\n        ...refProdFiles,\n        [e.target.name]: changeFileName(e.target.files[0], newName)\n      });\n    } else {\n      setSnackBar({\n        open: true,\n        result: 'error',\n        message: imageMessageError\n      })\n    }\n  }\n\n  function refProdCleanFileInput(name) {\n    setRefProdFiles({\n      ...refProdFiles,\n      [name]: null\n    });\n  }\n\n  function sewingHandleChange(e) {\n    if (validateImage(process.env.imageExtensionPermitted, 10000, e.target.files[0])) {\n      const newName = parseInt(e.target.name[e.target.name.length - 1]) - 1;\n      setSewingTypeFile(changeFileName(e.target.files[0], newName));\n    } else {\n      setSnackBar({\n        open: true,\n        result: 'error',\n        message: imageMessageError\n      })\n    }\n  }\n\n  function renderImage(name, type) {\n    let image = \"\";\n    state[type].forEach(img => {\n      const imgSplit = img.split(\"/\");\n      if (\n        parseInt(name[name.length - 1]) - 1 ==\n        imgSplit[imgSplit.length - 1][0]\n      ) {\n        image = img;\n      }\n    });\n    return image;\n  }\n\n  return (\n    <>\n      {!title ? (\n        <h1\n          className=\"main-title\"\n          style={{\n            textAlign: \"center\",\n            color: \"rgb(35,43,111)\"\n          }}\n        >\n          {state.name}\n          <FontAwesomeIcon\n            icon={faPencilAlt}\n            style={{\n              width: \"16px\",\n              position: \"absolute\",\n              borderRadius: \"10px\",\n              padding: \"3px\",\n              background: \"rgb(129, 22, 27)\",\n              color: \"white\",\n              marginLeft: \"2%\",\n              top: \"20px\",\n              cursor: \"pointer\",\n              zIndex: \"9\"\n            }}\n            onClick={() => {\n              setTitle(true);\n            }}\n          />\n        </h1>\n      ) : (\n        <Input\n          style={{ width: \"30%\", display: \"block\", margin: \"15px auto\" }}\n          placeholder=\"Nome\"\n          value={state.name}\n          onChange={e => setState({ ...state, name: e.target.value })}\n        />\n      )}\n      <Hr />\n      {!title ? (\n        <h4\n          className=\"main-title\"\n          style={{\n            textAlign: \"center\",\n            color: \"grey\"\n          }}\n        >\n          {state.description}\n          <FontAwesomeIcon\n            icon={faPencilAlt}\n            style={{\n              width: \"16px\",\n              borderRadius: \"10px\",\n              padding: \"3px\",\n              background: \"rgb(129, 22, 27)\",\n              color: \"white\",\n              marginLeft: \"2%\",\n              cursor: \"pointer\",\n              zIndex: \"9\"\n            }}\n            onClick={() => {\n              setTitle(true);\n            }}\n          />\n        </h4>\n      ) : (\n        <Input\n          style={{ width: \"30%\", display: \"block\", margin: \"15px auto\" }}\n          placeholder=\"Subtítulo\"\n          value={state.description}\n          onChange={e => setState({ ...state, description: e.target.value })}\n        />\n      )}\n\n      <div id=\"machine-images\" style={{ width: \"100%\" }}>\n        <ContainerInputFile\n          style={{\n            justifyContent: \"center\",\n            marginBottom: \"15px\",\n            flexWrap: \"wrap\"\n          }}\n        >\n          <FileInput\n            file={machineFiles.machineFile1}\n            handleChange={machineHandleChange}\n            deleteImage={() =>\n              deleteImage(\n                state.id,\n                \"machine\",\n                getNameImageFromUrl(renderImage(\"machineFile1\", \"images\")),\n                function(err) {\n                  if (err) return;\n                  location.reload();\n                }\n              )\n            }\n            cleanFileInput={machineCleanFileInput}\n            imageURL={renderImage(\"machineFile1\", \"images\")}\n            maxWidth=\"100%\"\n            labelWidth=\"70%\"\n            labelInputFile=\"Imagem principal\"\n            id=\"machineFile1\"\n            name=\"machineFile1\"\n          />\n        </ContainerInputFile>\n        <ContainerInputFile style={{ flexWrap: \"wrap\" }}>\n          <FileInput\n            file={machineFiles.machineFile2}\n            handleChange={machineHandleChange}\n            deleteImage={() =>\n              deleteImage(\n                state.id,\n                \"machine\",\n                getNameImageFromUrl(renderImage(\"machineFile2\", \"images\")),\n                function(err) {\n                  if (err) return;\n                  location.reload();\n                }\n              )\n            }\n            cleanFileInput={machineCleanFileInput}\n            imageURL={renderImage(\"machineFile2\", \"images\")}\n            labelWidth=\"200px\"\n            labelHeight=\"200px\"\n            maxWidth=\"200px\"\n            labelInputFile=\"Imagem 2\"\n            id=\"machineFile2\"\n            name=\"machineFile2\"\n          />\n\n          <FileInput\n            file={machineFiles.machineFile3}\n            handleChange={machineHandleChange}\n            deleteImage={() =>\n              deleteImage(\n                state.id,\n                \"machine\",\n                getNameImageFromUrl(renderImage(\"machineFile3\", \"images\")),\n                function(err) {\n                  if (err) return;\n                  location.reload();\n                }\n              )\n            }\n            cleanFileInput={machineCleanFileInput}\n            imageURL={renderImage(\"machineFile3\", \"images\")}\n            labelWidth=\"200px\"\n            labelHeight=\"200px\"\n            maxWidth=\"200px\"\n            labelInputFile=\"Imagem 3\"\n            id=\"machineFile3\"\n            name=\"machineFile3\"\n          />\n\n          <FileInput\n            file={machineFiles.machineFile4}\n            handleChange={machineHandleChange}\n            deleteImage={() =>\n              deleteImage(\n                state.id,\n                \"machine\",\n                getNameImageFromUrl(renderImage(\"machineFile4\", \"images\")),\n                function(err) {\n                  if (err) return;\n                  location.reload();\n                }\n              )\n            }\n            cleanFileInput={machineCleanFileInput}\n            imageURL={renderImage(\"machineFile4\", \"images\")}\n            labelWidth=\"200px\"\n            labelHeight=\"200px\"\n            maxWidth=\"200px\"\n            labelInputFile=\"Imagem 4\"\n            id=\"machineFile4\"\n            name=\"machineFile4\"\n          />\n\n          <FileInput\n            file={machineFiles.machineFile5}\n            handleChange={machineHandleChange}\n            deleteImage={() =>\n              deleteImage(\n                state.id,\n                \"machine\",\n                getNameImageFromUrl(renderImage(\"machineFile5\", \"images\")),\n                function(err) {\n                  if (err) return;\n                  location.reload();\n                }\n              )\n            }\n            cleanFileInput={machineCleanFileInput}\n            imageURL={renderImage(\"machineFile5\", \"images\")}\n            labelWidth=\"200px\"\n            labelHeight=\"200px\"\n            maxWidth=\"200px\"\n            labelInputFile=\"Imagem 5\"\n            id=\"machineFile5\"\n            name=\"machineFile5\"\n          />\n        </ContainerInputFile>\n      </div>\n\n      <Section style={{}}>\n        <h3\n          className=\"main-title\"\n          style={{\n            textAlign: \"center\",\n            color: \"rgb(129, 22, 27)\"\n          }}\n        >\n          Tipo de ponto\n        </h3>\n\n        <Hr />\n        <div id=\"sewing-type-images\" style={{ width: \"100%\" }}>\n          <ContainerInputFile\n            style={{ justifyContent: \"center\", marginBottom: \"15px\" }}\n          >\n            <FileInput\n              file={sewingFile}\n              handleChange={sewingHandleChange}\n              deleteImage={() =>\n                deleteImage(\n                  state.id,\n                  \"sewingType\",\n                  getNameImageFromUrl(state.sewingType),\n                  function(err) {\n                    if (err) return;\n                    location.reload();\n                  }\n                )\n              }\n              cleanFileInput={() => setSewingFile(null)}\n              imageURL={state.sewingType}\n              maxWidth=\"60%\"\n              labelWidth=\"70%\"\n              labelInputFile=\"Imagem principal\"\n              id=\"sewingFile1\"\n              name=\"sewingFile1\"\n            />\n          </ContainerInputFile>\n        </div>\n      </Section>\n      <Section>\n        <h3\n          className=\"main-title\"\n          style={{\n            textAlign: \"center\",\n            color: \"rgb(129, 22, 27)\"\n          }}\n        >\n          Produtos ideias para produzir\n        </h3>\n\n        <Hr />\n\n        <div id=\"ref-prod-images\" style={{ width: \"100%\" }}>\n          <ContainerInputFile style={{ flexWrap: \"wrap\" }}>\n            <FileInput\n              file={refProdFiles.refProdFile1}\n              handleChange={refProdHandleChange}\n              deleteImage={() =>\n                deleteImage(\n                  state.id,\n                  \"productRef\",\n                  getNameImageFromUrl(\n                    renderImage(\"refProdFile1\", \"productRef\")\n                  ),\n                  function(err) {\n                    if (err) return;\n                    location.reload();\n                  }\n                )\n              }\n              cleanFileInput={refProdCleanFileInput}\n              imageURL={renderImage(\"refProdFile1\", \"productRef\")}\n              labelWidth=\"200px\"\n              labelHeight=\"200px\"\n              maxWidth=\"200px\"\n              labelInputFile=\"Imagem 1\"\n              id=\"refProdFile1\"\n              name=\"refProdFile1\"\n            />\n\n            <FileInput\n              file={refProdFiles.refProdFile2}\n              handleChange={refProdHandleChange}\n              deleteImage={() =>\n                deleteImage(\n                  state.id,\n                  \"productRef\",\n                  getNameImageFromUrl(\n                    renderImage(\"refProdFile2\", \"productRef\")\n                  ),\n                  function(err) {\n                    if (err) return;\n                    location.reload();\n                  }\n                )\n              }\n              cleanFileInput={refProdCleanFileInput}\n              imageURL={renderImage(\"refProdFile2\", \"productRef\")}\n              labelWidth=\"200px\"\n              labelHeight=\"200px\"\n              maxWidth=\"200px\"\n              labelInputFile=\"Imagem 2\"\n              id=\"refProdFile2\"\n              name=\"refProdFile2\"\n            />\n\n            <FileInput\n              file={refProdFiles.refProdFile3}\n              handleChange={refProdHandleChange}\n              deleteImage={() =>\n                deleteImage(\n                  state.id,\n                  \"productRef\",\n                  getNameImageFromUrl(\n                    renderImage(\"refProdFile3\", \"productRef\")\n                  ),\n                  function(err) {\n                    if (err) return;\n                    location.reload();\n                  }\n                )\n              }\n              cleanFileInput={refProdCleanFileInput}\n              imageURL={renderImage(\"refProdFile3\", \"productRef\")}\n              labelWidth=\"200px\"\n              labelHeight=\"200px\"\n              maxWidth=\"200px\"\n              labelInputFile=\"Imagem 3\"\n              id=\"refProdFile3\"\n              name=\"refProdFile3\"\n            />\n\n            <FileInput\n              file={refProdFiles.refProdFile4}\n              handleChange={refProdHandleChange}\n              deleteImage={() =>\n                deleteImage(\n                  state.id,\n                  \"productRef\",\n                  getNameImageFromUrl(\n                    renderImage(\"refProdFile4\", \"productRef\")\n                  ),\n                  function(err) {\n                    if (err) return;\n                    location.reload();\n                  }\n                )\n              }\n              cleanFileInput={refProdCleanFileInput}\n              imageURL={renderImage(\"refProdFile4\", \"productRef\")}\n              labelWidth=\"200px\"\n              labelHeight=\"200px\"\n              maxWidth=\"200px\"\n              labelInputFile=\"Imagem 4\"\n              id=\"refProdFile4\"\n              name=\"refProdFile4\"\n            />\n          </ContainerInputFile>\n        </div>\n      </Section>\n      <Section>\n        <h3\n          className=\"main-title\"\n          style={{\n            textAlign: \"center\",\n            color: \"rgb(129, 22, 27)\"\n          }}\n        >\n          Características\n        </h3>\n        <Hr />\n        <div style={{ width: \"50%\", display: \"block\", margin: \"auto\" }}>\n          <TextArea\n            value={state.mainFeatures}\n            onChange={e => setState({ ...state, mainFeatures: e.target.value })}\n            rows=\"5\"\n          >\n            {state.mainFeatures}\n          </TextArea>\n        </div>\n      </Section>\n      <Section>\n        <h3\n          className=\"main-title\"\n          style={{\n            textAlign: \"center\",\n            color: \"rgb(129, 22, 27)\"\n          }}\n        >\n          Especificações Técnicas\n        </h3>\n        <Hr />\n        <div style={{ width: \"50%\", display: \"block\", margin: \"auto\" }}>\n          <InputGroup>\n            <label htmlFor=\"modelo\">Modelo:</label>\n            <Input\n              placeholder=\"Modelo\"\n              value={state.specifications ? state.specifications.modelo : \"\"}\n              onChange={e =>\n                setState({\n                  ...state,\n                  specifications: {\n                    ...state.specifications,\n                    modelo: e.target.value\n                  }\n                })\n              }\n            />\n          </InputGroup>\n          <InputGroup>\n            <label htmlFor=\"alturaCalcador\">Altura do Calçador:</label>\n            <Input\n              placeholder=\"Altura do Calçador\"\n              value={\n                state.specifications ? state.specifications.alturaCalcador : \"\"\n              }\n              onChange={e =>\n                setState({\n                  ...state,\n                  specifications: {\n                    ...state.specifications,\n                    alturaCalcador: e.target.value\n                  }\n                })\n              }\n            />\n          </InputGroup>\n          <InputGroup>\n            <label htmlFor=\"comprimentoDoPonto\">Comprimento do ponto:</label>\n            <Input\n              placeholder=\"Comprimento do ponto\"\n              value={\n                state.specifications\n                  ? state.specifications.comprimentoDoPonto\n                  : \"\"\n              }\n              onChange={e =>\n                setState({\n                  ...state,\n                  specifications: {\n                    ...state.specifications,\n                    comprimentoDoPonto: e.target.value\n                  }\n                })\n              }\n            />\n          </InputGroup>\n          <InputGroup>\n            <label htmlFor=\"corteDeLinha\">Corte de Linha:</label>\n            <Input\n              placeholder=\"Corte de linha\"\n              value={\n                state.specifications ? state.specifications.corteDeLinha : \"\"\n              }\n              onChange={e =>\n                setState({\n                  ...state,\n                  specifications: {\n                    ...state.specifications,\n                    corteDeLinha: e.target.value\n                  }\n                })\n              }\n            />\n          </InputGroup>\n          <InputGroup>\n            <label htmlFor=\"velocidadeMaxima\">Velocidade Máxima:</label>\n            <Input\n              placeholder=\"Velocidade máxima\"\n              value={\n                state.specifications\n                  ? state.specifications.velocidadeMaxima\n                  : \"\"\n              }\n              onChange={e =>\n                setState({\n                  ...state,\n                  specifications: {\n                    ...state.specifications,\n                    velocidadeMaxima: e.target.value\n                  }\n                })\n              }\n            />\n          </InputGroup>\n          <InputGroup>\n            <label htmlFor=\"motor\">Motor:</label>\n            <Input\n              placeholder=\"Motor\"\n              value={state.specifications ? state.specifications.motor : \"\"}\n              onChange={e =>\n                setState({\n                  ...state,\n                  specifications: {\n                    ...state.specifications,\n                    motor: e.target.value\n                  }\n                })\n              }\n            />\n          </InputGroup>\n          <InputGroup>\n            <label htmlFor=\"numeroDeAgulhas\">Número de Agulhas:</label>\n            <Input\n              placeholder=\"Número de agulhas\"\n              value={\n                state.specifications ? state.specifications.numeroDeAgulhas : \"\"\n              }\n              onChange={e =>\n                setState({\n                  ...state,\n                  specifications: {\n                    ...state.specifications,\n                    numeroDeAgulhas: e.target.value\n                  }\n                })\n              }\n            />\n          </InputGroup>\n          <InputGroup>\n            <label htmlFor=\"painelTouchScreen\">Painel touch screen:</label>\n            <Input\n              placeholder=\"Painel touch screen\"\n              value={\n                state.specifications\n                  ? state.specifications.painelTouchScreen\n                  : \"\"\n              }\n              onChange={e =>\n                setState({\n                  ...state,\n                  specifications: {\n                    ...state.specifications,\n                    painelTouchScreen: e.target.value\n                  }\n                })\n              }\n            />\n          </InputGroup>\n          <InputGroup>\n            <label htmlFor=\"tipoDeAgulha\">Tipo de agulha:</label>\n            <Input\n              placeholder=\"Tipo de agulha\"\n              value={\n                state.specifications ? state.specifications.tipoDeAgulha : \"\"\n              }\n              onChange={e =>\n                setState({\n                  ...state,\n                  specifications: {\n                    ...state.specifications,\n                    tipoDeAgulha: e.target.value\n                  }\n                })\n              }\n            />\n          </InputGroup>\n        </div>\n      </Section>\n      <Section>\n        <h3\n          className=\"main-title\"\n          style={{\n            textAlign: \"center\",\n            color: \"rgb(129, 22, 27)\"\n          }}\n        >\n          Categoria e fabricante\n        </h3>\n        <Hr />\n        <div style={{ width: \"50%\", display: \"block\", margin: \"auto\" }}>\n          <Select\n            value={state.category}\n            onChange={e => setState({ ...state, category: e.target.value })}\n          >\n            <option value=\"\">Escolha uma categoria</option>\n            {categoriesManufacturers.categories.map(category => (\n              <option\n                selected={state.category == category.id ? category.id : false}\n                value={category.id}\n              >\n                {category.name}\n              </option>\n            ))}\n          </Select>\n\n          <Select\n            value={state.manufacturer}\n            onChange={e => setState({ ...state, manufacturer: e.target.value })}\n          >\n            <option value=\"\">Escolha um fabricante</option>\n            {categoriesManufacturers.manufacturers.map(manu => (\n              <option\n                selected={state.manufacturer == manu.id ? manu.id : false}\n                value={manu.id}\n              >\n                {manu.name}\n              </option>\n            ))}\n          </Select>\n        </div>\n      </Section>\n      <Section>\n        <h3\n          className=\"main-title\"\n          style={{\n            textAlign: \"center\",\n            color: \"rgb(129, 22, 27)\",\n            marginTop: \"15px\"\n          }}\n        >\n          Vídeo (YouTube)\n        </h3>\n\n        <Section style={{ justifyContent: \"center\", display: \"flex\"}}>\n           <Input\n            style={{ width: \"50%\"}}\n            placeholder=\"Ex: https://www.youtube.com/watch?v=5qdtbMvC2Rs\"\n            value={state.videoInput}\n            onChange={handleChangeVideo}\n          />\n        </Section>\n\n        <h3\n          className=\"main-title\"\n          style={{\n            textAlign: \"center\",\n            color: \"rgb(129, 22, 27)\",\n            marginTop: \"15px\"\n          }}\n        >\n          Folheto e Manual\n        </h3>\n        <Section style={{ flexWrap: \"wrap\", justifyContent: \"center\", width: \"50%\", margin: \"auto\" }}>\n          <div style={{ border: '2px dotted lightgrey', padding: '5px', minHeight: \"100px\", flex: 1, position: \"relative\" }}>\n           {folheto ? <FontAwesomeIcon\n                        icon={faTrash}\n                        style={{\n                          width: \"16px\",\n                          position: \"absolute\",\n                          borderRadius: \"10px\",\n                          padding: \"3px\",\n                          background: \"rgb(129, 22, 27)\",\n                          color: \"white\",\n                          right: \"13px\",\n                          top: \"10px\",\n                          cursor: \"pointer\",\n                          zIndex: \"9\"\n                        }}\n                        onClick={() => setFolheto(null)}\n                      /> : state.folheto ? <ButtonDelImg onClick={() =>\n                deleteImage(\n                  state.id,\n                  \"folheto\",\n                  formatFileName(state.folheto),\n                  function(err) {\n                    if (err) return;\n                    location.reload();\n                  }\n                )}>Excluir documento</ButtonDelImg> : null }\n            <label htmlFor=\"folheto\" style={{ cursor: \"pointer\", minHeight: \"100px\",  width: \"100%\",display: \"flex\", justifyContent: \"center\", alignItems: \"center\", textAlign: \"center\"}}>\n              FOLHETO <br /><br />\n              {folheto ? folheto.name : state.folheto ? formatFileName(state.folheto) : \"Clique para escolher um arquivo\"}\n            </label>\n            <input style={{ width: 0}} type=\"file\" name=\"folheto\" id=\"folheto\" onChange={folhetoChange}  /> \n          </div>\n\n          <div style={{ border: '2px dotted lightgrey', padding: '5px', minHeight: \"100px\", flex: 1, position: \"relative\"}}>\n              {manual ? <FontAwesomeIcon\n                        icon={faTrash}\n                        style={{\n                          width: \"16px\",\n                          position: \"absolute\",\n                          borderRadius: \"10px\",\n                          padding: \"3px\",\n                          background: \"rgb(129, 22, 27)\",\n                          color: \"white\",\n                          right: \"13px\",\n                          top: \"10px\",\n                          cursor: \"pointer\",\n                          zIndex: \"9\"\n                        }}\n                        onClick={() => setManual(null)}\n                      /> : state.manual ? <ButtonDelImg onClick={() =>\n                deleteImage(\n                  state.id,\n                  \"manual\",\n                  formatFileName(state.manual),\n                  function(err) {\n                    if (err) return;\n                    location.reload();\n                  }\n                )}>Excluir documento</ButtonDelImg> :  null }\n          \n            <label htmlFor=\"manual\" style={{ cursor: \"pointer\", minHeight: \"100px\",  width: \"100%\",display: \"flex\", justifyContent: \"center\", alignItems: \"center\", textAlign: \"center\"}}>\n            MANUAL <br /><br />\n            {manual ? manual.name : state.manual ? formatFileName(state.manual) : \"Clique para escolher um arquivo\"}</label>\n            <input style={{ width: 0}} type=\"file\" name=\"manual\" id=\"manual\" onChange={manualChange}  /> \n          </div>\n        </Section>\n      </Section>\n      <Section>\n        {visible ? (\n          <div\n            style={{\n              display: \"flex\",\n              margin: \"15px auto\",\n              width: \"100%\",\n              justifyContent: \"center\"\n            }}\n          >\n            <Message result={result} message={message} color={color} />{\" \"}\n          </div>\n        ) : null}\n\n        <Button\n          style={{ width: \"50%\", margin: \"auto\", display: \"block\" }}\n          onClick={() =>{\n              if (getParam(state.video) != 0){\n                updateMachine(\n                  state,\n                  machineFiles,\n                  sewingFile,\n                  refProdFiles,\n                  { folheto, manual },\n                  function(err, res) {\n                    if (err) {\n                      setSnackBar({\n                        result: \"error\",\n                        open: true,\n                        message: err\n                      });\n                      return;\n                    }\n                    setSnackBar({\n                      result: \"success\",\n                      open: true,\n                      message: \"Máquina alterada com sucesso\"\n                    });\n                    setTimeout(() => {\n                      location.reload();\n                    }, 2000);\n                  }\n                )\n              } else {\n                  handleChangeVideo(state.video)\n              }\n           \n            }\n          }\n        >\n          Salvar\n        </Button>\n        <Button\n          style={{ width: \"50%\", margin: \"15px auto\", display: \"block\" }}\n          onClick={() =>\n            deleteMachine(state.id, function(err, response) {\n              if (err) {\n                setSnackBar({\n                  result: \"error\",\n                  message: err,\n                  open: true\n                });\n                return;\n              }\n              setSnackBar({\n                result: \"success\",\n                message: \"Máquina excluída com sucesso\",\n                open: true\n              });\n              setTimeout(() => {\n                Router.pushRoute(\"/admin/machines\");\n              }, 2000);\n            })\n          }\n        >\n          Excluir máquina\n        </Button>\n        <Snackbar\n          open={snackBar.open}\n          autoHideDuration={1500}\n          onClose={handleClose}\n        >\n          <Alert severity={snackBar.result}>{snackBar.message}</Alert>\n        </Snackbar>\n      </Section>\n    </>\n  );\n\n  function formatFileName(name) {\n    const splitName = name.split('/')\n    const splittedName = splitName[splitName.length-1].split('.')\n    return splittedName[0]\n  }\n}\n\nconst ButtonDelImg = styled.button`\n  background-color: #960d03;\n  color: white;\n  padding: 8px 20px;\n  margin: 8px 0;\n  border: none;\n  border-radius: 4px;\n  position: absolute;\n  width: 75px;\n  right: 0;\n  top: 0px;\n  font-size: 8px;\n  z-index: 9;\n  cursor: pointer;\n`;\n\n\nexport const Section = styled.div`\n  margin: 10% 0;\n`;\n\nexport const MainImg = styled.img`\n  width: 50%;\n  margin: 10px auto;\n  display: block;\n  cursor: pointer;\n`;\n\nexport const SecondaryImages = styled.img`\n  max-width: 25%;\n  margin-right: 5px;\n  cursor: pointer;\n  :hover {\n    box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n  }\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n`;\n\nexport const PrefImage = styled.img`\n  width: 49%;\n  margin-right: 5px;\n  margin-bottom: 5px;\n  cursor: pointer;\n  :hover {\n    box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n  }\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n`;\n\nexport const MainFeaturesText = styled.p``;\n\nexport const InputGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: ${props => (props.width ? props.width : \"100%\")};\n`;\n\nexport const ContainerInputFile = styled.div`\n  img {\n    width: 100%;\n    margin: 10px auto;\n    display: block;\n    cursor: pointer;\n  }\n  display: flex;\n  justify-content: center;\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAEA;AACA;AAEA;AACA;AAEA;AAQA;AAAA;AACA;AACA;AACA;AAHA;AAIA;AACA;AACA;AAHA;AAHA;AAAA;AACA;AAOA;AACA;AAEA;AAFA;AAIA;AACA;AAdA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAdA;AAAA;AACA;AADA;AA0BA;AACA;AACA;AACA;AACA;AALA;AAzBA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAoCA;AACA;AACA;AACA;AACA;AALA;AAnCA;AAAA;AACA;AADA;AA4CA;AACA;AAFA;AA3CA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAnHA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAqHA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAFA;AAFA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AAhBA;AAqBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAUA;AACA;AACA;AACA;AAFA;AAFA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AAdA;AAmBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAQA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AADA;AAQA;AACA;AACA;AAAA;AAMA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAuBA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAMA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAyBA;AACA;AACA;AAAA;AAMA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAyBA;AACA;AACA;AAAA;AAMA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAyBA;AACA;AACA;AAAA;AAMA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AA0BA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAWA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AAAA;AAMA;AACA;AACA;AARA;AAWA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AA2BA;AACA;AACA;AACA;AAFA;AAFA;AAYA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAQA;AACA;AACA;AAVA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AA2BA;AACA;AACA;AAAA;AAQA;AACA;AACA;AAVA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AA2BA;AACA;AACA;AAAA;AAQA;AACA;AACA;AAVA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AA2BA;AACA;AACA;AAAA;AAQA;AACA;AACA;AAVA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AA8BA;AACA;AACA;AACA;AAFA;AAFA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAWA;AACA;AACA;AACA;AAFA;AAFA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AAEA;AAFA;AAFA;AADA;AAHA;AAeA;AAAA;AAEA;AACA;AAGA;AAAA;AAGA;AAEA;AAFA;AAFA;AADA;AALA;AAiBA;AAAA;AAEA;AACA;AAKA;AAAA;AAGA;AAEA;AAFA;AAFA;AADA;AAPA;AAmBA;AAAA;AAEA;AACA;AAGA;AAAA;AAGA;AAEA;AAFA;AAFA;AADA;AALA;AAiBA;AAAA;AAEA;AACA;AAKA;AAAA;AAGA;AAEA;AAFA;AAFA;AADA;AAPA;AAmBA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AAEA;AAFA;AAFA;AADA;AAHA;AAeA;AAAA;AAEA;AACA;AAGA;AAAA;AAGA;AAEA;AAFA;AAFA;AADA;AALA;AAiBA;AAAA;AAEA;AACA;AAKA;AAAA;AAGA;AAEA;AAFA;AAFA;AADA;AAPA;AAmBA;AAAA;AAEA;AACA;AAGA;AAAA;AAGA;AAEA;AAFA;AAFA;AADA;AALA;AAoBA;AACA;AACA;AACA;AAFA;AAFA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AACA;AAEA;AACA;AAFA;AADA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AACA;AAEA;AACA;AAFA;AADA;AAaA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAWA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AAAA;AAAA;AAdA;AAeA;AAAA;AAMA;AACA;AACA;AARA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AAAA;AAAA;AAdA;AAeA;AAAA;AAMA;AACA;AACA;AARA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAjCA;AAuCA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAlBA;AAFA;AA0BA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAGA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}