{"version":3,"file":"static/webpack/static\\development\\pages\\admin\\machines\\new-machine.js.daed3d8f10e1bac3bff6.hot-update.js","sources":["webpack:///./src/components/admin/machines/AddMachine.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport {\n  Input,\n  TextArea,\n  Button,\n  Select,\n  UploadImageContainer\n} from \"../../../static/styled-components/base\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPencilAlt, faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { getOptions, addMachine } from \"../../../utils/machines\";\nimport { changeFileName, validateImage } from \"../../../utils/images\";\n\nimport FileInput from \"../../utils/FileInput\";\n\nexport default function AddMachine() {\n  const imageMessageError = `Extensão do arquivo enviado é inválido. Extensões permitidas ${process.env.imageExtensionPermitted.toString()}, com no máximo 10MB`\n  const [name, setName] = useState(\"\");\n  const [manufacturer, setManufacturer] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [mainFeatures, setMainFeatures] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [specifications, setSpecifications] = useState({});\n  const [video, setVideo] = useState('')\n\n  const [snackBar, setSnackBar] = useState({\n    result: \"success\",\n    open: false,\n    message: \"\"\n  });\n\n  function handleClose() {\n    setSnackBar({\n      ...snackBar,\n      open: false\n    });\n  }\n\n  const [categoriesManufacturers, setCategoriesManufacturers] = useState({\n    categories: [],\n    manufacturers: []\n  });\n  useEffect(() => {\n    function asyncFunc() {\n      getOptions(function(err, response) {\n        if (err) {\n          setSnackBar({\n            ...snackBar,\n            open: false\n          });\n          return;\n        }\n\n        setCategoriesManufacturers({\n          manufacturers: response.manufacturers.data,\n          categories: response.categories.data\n        });\n      });\n    }\n    asyncFunc();\n  }, []);\n\n  const [machineFiles, setMachineFiles] = useState({\n    machineFile1: null,\n    machineFile2: null,\n    machineFile3: null,\n    machineFile4: null,\n    machineFile5: null\n  });\n\n  const [refProdFiles, setRefProdFiles] = useState({\n    refProdFile1: null,\n    refProdFile2: null,\n    refProdFile3: null,\n    refProdFile4: null,\n    refProdFile5: null\n  });\n\n  const [folheto, setFolheto] = useState(null)\n  const [manual, setManual] = useState(null)\n\n  function folhetoChange(e) {\n    if (e) {\n      const type = e.target.files[0].name.split(\".\")\n      if (type[1] != \"pdf\") {\n        setSnackBar({\n          open: true,\n          result: 'error',\n          message: 'O folheto deve ser apenas formato PDF'\n        })\n      } else {\n        setFolheto(e.target.files[0])      \n      }\n    }\n    \n  }\n\n  function manualChange(e) {\n    if (e) {\n      const type = e.target.files[0].name.split(\".\")\n      if (type[1] != \"pdf\") {\n        setSnackBar({\n          open: true,\n          result: 'error',\n          message: 'O manual deve ser apenas formato PDF'\n        })\n      } else {\n        setManual(e.target.files[0])      \n      }\n    }\n    \n  }\n\n  const [sewingTypeFile, setSewingTypeFile] = useState(null);\n\n  function machineHandleChange(e) {\n    if (validateImage(process.env.imageExtensionPermitted, 10000, e.target.files[0])) {\n      const newName = parseInt(e.target.name[e.target.name.length - 1]) - 1;\n      setMachineFiles({\n        ...machineFiles,\n        [e.target.name]: changeFileName(e.target.files[0], newName)\n      });\n    } else {\n      setSnackBar({\n        open: true,\n        result: 'error',\n        message: imageMessageError\n      })\n    }\n  }\n\n  function machineCleanFileInput(name) {\n    setMachineFiles({\n      ...machineFiles,\n      [name]: null\n    });\n  }\n\n  function refProdHandleChange(e) {\n    if (validateImage(process.env.imageExtensionPermitted, 10000, e.target.files[0])) {\n      const newName = parseInt(e.target.name[e.target.name.length - 1]) - 1;\n      setRefProdFiles({\n        ...refProdFiles,\n        [e.target.name]: changeFileName(e.target.files[0], newName)\n      });\n    } else {\n      setSnackBar({\n        open: true,\n        result: 'error',\n        message: imageMessageError\n      })\n    }\n  }\n\n  function refProdCleanFileInput(name) {\n    setRefProdFiles({\n      ...refProdFiles,\n      [name]: null\n    });\n  }\n\n  function sewingTypeHandleChange(e) {\n    if (validateImage(process.env.imageExtensionPermitted, 10000, e.target.files[0])) {\n      const newName = parseInt(e.target.name[e.target.name.length - 1]) - 1;\n      setSewingTypeFile(changeFileName(e.target.files[0], newName));\n    } else {\n      setSnackBar({\n        open: true,\n        result: 'error',\n        message: imageMessageError\n      })\n    }\n  }\n\n  function handleChangeVideo(e) {\n    const YTBaseURL = \"https://www.youtube.com/embed/\"\n    console.log(getParam(e.target.value))\n    if (getParam(e.target.value) == 0) {\n      setVideo(e.target.value)\n      setSnackBar({\n        open: true,\n        result: 'error',\n        message: 'O endereço não é uma URL válida do YouTube'\n      })\n    } else {\n      setVideo(YTBaseURL + getParam(e.target.value))\n    }\n  }\n\n  function getParam(url) {\n    var results = new RegExp('[\\?&]' + 'v' + '=([^&#]*)')\n                      .exec(url);\n    if (results == null) {\n         return 0;\n    }\n    return results[1] || 0;\n  }\n\n  return (\n    <>\n      <h3 className=\"main-title\" style={{ color: \"rgb(129, 22, 27)\" }}>\n        Adicionar nova máquina\n      </h3>\n      <div>\n        <Snackbar\n          open={snackBar.open}\n          autoHideDuration={3500}\n          onClose={handleClose}\n        >\n          <Alert severity={snackBar.result}>{snackBar.message}</Alert>\n        </Snackbar>\n        <Input\n          placeholder=\"Nome\"\n          onChange={e => setName(e.target.value)}\n          value={name}\n        />\n        <Input\n          placeholder=\"Subtítulo\"\n          onChange={e => setDescription(e.target.value)}\n          value={description}\n        />\n        <TextArea\n          placeholder=\"Características\"\n          onChange={e => setMainFeatures(e.target.value)}\n          value={mainFeatures}\n          rows=\"5\"\n        />\n        <h3\n          className=\"main-title\"\n          style={{\n            textAlign: \"center\",\n            color: \"rgb(129, 22, 27)\"\n          }}\n        >\n          Categoria e fabricante\n        </h3>\n        <Row>\n          <Select value={category} onChange={e => setCategory(e.target.value)}>\n            <option value=\"\">Escolha uma categoria</option>\n            {categoriesManufacturers.categories.map(category => (\n              <option value={category.id}>{category.name}</option>\n            ))}\n          </Select>\n\n          <Select\n            value={manufacturer}\n            onChange={e => setManufacturer(e.target.value)}\n          >\n            <option value=\"\">Escolha um fabricante</option>\n            {categoriesManufacturers.manufacturers.map(manufacturer => (\n              <option value={manufacturer.id}>{manufacturer.name}</option>\n            ))}\n          </Select>\n        </Row>\n        <h3\n          className=\"main-title\"\n          style={{\n            textAlign: \"center\",\n            color: \"rgb(129, 22, 27)\"\n          }}\n        >\n          Especificações técnicas\n        </h3>\n        <Row>\n          <Input\n            style={{ flex: 2 }}\n            placeholder=\"Modelo\"\n            value={specifications.modelo}\n            onChange={e =>\n              setSpecifications({ ...specifications, modelo: e.target.value })\n            }\n          />\n          <Input\n            placeholder=\"Altura do calçador (mm)\"\n            style={{ flex: 1 }}\n            value={specifications.alturaCalcador}\n            onChange={e =>\n              setSpecifications({\n                ...specifications,\n                alturaCalcador: e.target.value\n              })\n            }\n          />\n          <Input\n            style={{ flex: 1 }}\n            placeholder=\"Comprimento do ponto (mm)\"\n            value={specifications.comprimentoDoPonto}\n            onChange={e =>\n              setSpecifications({\n                ...specifications,\n                comprimentoDoPonto: e.target.value\n              })\n            }\n          />\n        </Row>\n        <Row>\n          <Input\n            style={{ flex: 1 }}\n            placeholder=\"Corte de linha\"\n            value={specifications.corteDeLinha}\n            onChange={e =>\n              setSpecifications({\n                ...specifications,\n                corteDeLinha: e.target.value\n              })\n            }\n          />\n          <Input\n            style={{ flex: 1 }}\n            placeholder=\"Velocidade máxima(PPM)\"\n            value={specifications.velocidadeMaxima}\n            onChange={e =>\n              setSpecifications({\n                ...specifications,\n                velocidadeMaxima: e.target.value\n              })\n            }\n          />\n          <Input\n            style={{ flex: 3 }}\n            placeholder=\"Motor\"\n            value={specifications.motor}\n            onChange={e =>\n              setSpecifications({ ...specifications, motor: e.target.value })\n            }\n          />\n        </Row>\n        <Row>\n          <Input\n            style={{ flex: 1 }}\n            value={specifications.numeroDeAgulhas}\n            placeholder=\"Número de agulhas\"\n            onChange={e =>\n              setSpecifications({\n                ...specifications,\n                numeroDeAgulhas: e.target.value\n              })\n            }\n          />\n          <Input\n            style={{ flex: 1 }}\n            placeholder=\"Painel touch screen\"\n            value={specifications.painelTouchScreen}\n            onChange={e =>\n              setSpecifications({\n                ...specifications,\n                painelTouchScreen: e.target.value\n              })\n            }\n          />\n\n          <Input\n            style={{ flex: 1 }}\n            placeholder=\"Tipo de agulha\"\n            value={specifications.tipoDeAgulha}\n            onChange={e =>\n              setSpecifications({\n                ...specifications,\n                tipoDeAgulha: e.target.value\n              })\n            }\n          />\n        </Row>\n        <h3\n          className=\"main-title\"\n          style={{\n            textAlign: \"center\",\n            color: \"rgb(129, 22, 27)\"\n          }}\n        >\n          Fotos do produto\n        </h3>\n        <Row style={{ margin: \"30px 0 \", justifyContent: \"center\" }}>\n          <ImageContainer maxWidth=\"300px\">\n            <FileInput\n              handleChange={machineHandleChange}\n              labelInputFile=\"Imagem principal\"\n              id=\"machineFile1\"\n              name=\"machineFile1\"\n              labelWidth=\"250px\"\n              labelHeight=\"250px\"\n              maxWidth=\"250px\"\n              file={machineFiles.machineFile1}\n              cleanFileInput={() => machineCleanFileInput(\"machineFile1\")}\n            />\n          </ImageContainer>\n        </Row>\n        <Row style={{ flexWrap: \"wrap\", justifyContent: \"center\" }}>\n          <ImageContainer maxWidth=\"200px\">\n            <FileInput\n              handleChange={machineHandleChange}\n              labelInputFile=\"Imagem 2\"\n              id=\"machineFile2\"\n              name=\"machineFile2\"\n              labelWidth=\"150px\"\n              labelHeight=\"150px\"\n              maxWidth=\"150px\"\n              file={machineFiles.machineFile2}\n              cleanFileInput={() => machineCleanFileInput(\"machineFile2\")}\n            />\n          </ImageContainer>\n          <ImageContainer maxWidth=\"200px\">\n            <FileInput\n              handleChange={machineHandleChange}\n              labelInputFile=\"Imagem 3\"\n              id=\"machineFile3\"\n              name=\"machineFile3\"\n              labelWidth=\"150px\"\n              labelHeight=\"150px\"\n              maxWidth=\"150px\"\n              file={machineFiles.machineFile3}\n              cleanFileInput={() => machineCleanFileInput(\"machineFile3\")}\n            />\n          </ImageContainer>\n          <ImageContainer maxWidth=\"200px\">\n            <FileInput\n              handleChange={machineHandleChange}\n              labelInputFile=\"Imagem 4\"\n              id=\"machineFile4\"\n              name=\"machineFile4\"\n              labelWidth=\"150px\"\n              labelHeight=\"150px\"\n              maxWidth=\"150px\"\n              file={machineFiles.machineFile4}\n              cleanFileInput={() => machineCleanFileInput(\"machineFile4\")}\n            />\n          </ImageContainer>\n          <ImageContainer maxWidth=\"200px\">\n            <FileInput\n              handleChange={machineHandleChange}\n              labelInputFile=\"Imagem 5\"\n              id=\"machineFile5\"\n              name=\"machineFile5\"\n              labelWidth=\"150px\"\n              labelHeight=\"150px\"\n              maxWidth=\"150px\"\n              file={machineFiles.machineFile5}\n              cleanFileInput={() => machineCleanFileInput(\"machineFile5\")}\n            />\n          </ImageContainer>\n        </Row>\n        <h3\n          className=\"main-title\"\n          style={{\n            textAlign: \"center\",\n            color: \"rgb(129, 22, 27)\",\n            marginTop: \"15px\"\n          }}\n        >\n          Exemplo do produto produzido pela máquina\n        </h3>\n        <Row style={{ flexWrap: \"wrap\", justifyContent: \"center\" }}>\n          <ImageContainer maxWidth=\"200px\">\n            <FileInput\n              handleChange={refProdHandleChange}\n              labelInputFile=\"Imagem 1\"\n              id=\"refProdFiles1\"\n              name=\"refProdFiles1\"\n              labelWidth=\"100px\"\n              labelHeight=\"100px\"\n              maxWidth=\"100px\"\n              file={refProdFiles.refProdFiles1}\n              cleanFileInput={() => refProdCleanFileInput(\"refProdFiles1\")}\n            />\n          </ImageContainer>\n          <ImageContainer maxWidth=\"200px\">\n            <FileInput\n              handleChange={refProdHandleChange}\n              labelInputFile=\"Imagem 2\"\n              id=\"refProdFiles2\"\n              name=\"refProdFiles2\"\n              labelWidth=\"100px\"\n              labelHeight=\"100px\"\n              maxWidth=\"100px\"\n              file={refProdFiles.refProdFiles2}\n              cleanFileInput={() => refProdCleanFileInput(\"refProdFiles2\")}\n            />\n          </ImageContainer>\n          <ImageContainer maxWidth=\"200px\">\n            <FileInput\n              handleChange={refProdHandleChange}\n              labelInputFile=\"Imagem 3\"\n              id=\"refProdFiles3\"\n              name=\"refProdFiles3\"\n              labelWidth=\"100px\"\n              labelHeight=\"100px\"\n              maxWidth=\"100px\"\n              file={refProdFiles.refProdFiles3}\n              cleanFileInput={() => refProdCleanFileInput(\"refProdFiles3\")}\n            />\n          </ImageContainer>\n          <ImageContainer maxWidth=\"200px\">\n            <FileInput\n              handleChange={refProdHandleChange}\n              labelInputFile=\"Imagem 4\"\n              id=\"refProdFiles4\"\n              name=\"refProdFiles4\"\n              labelWidth=\"100px\"\n              labelHeight=\"100px\"\n              maxWidth=\"100px\"\n              file={refProdFiles.refProdFiles4}\n              cleanFileInput={() => refProdCleanFileInput(\"refProdFiles4\")}\n            />\n          </ImageContainer>\n        </Row>\n\n        <h3\n          className=\"main-title\"\n          style={{\n            textAlign: \"center\",\n            color: \"rgb(129, 22, 27)\",\n            marginTop: \"15px\"\n          }}\n        >\n          Tipo de ponto\n        </h3>\n        <Row style={{ justifyContent: \"center\" }}>\n          <FileInput\n            handleChange={sewingTypeHandleChange}\n            labelInputFile=\"Imagem única\"\n            id=\"sewingTypeFile\"\n            name=\"sewingTypeFile\"\n            labelWidth=\"200px\"\n            labelHeight=\"200px\"\n            maxWidth=\"200px\"\n            file={sewingTypeFile}\n            cleanFileInput={() => setSewingTypeFile(null)}\n          />\n        </Row>\n\n         <h3\n          className=\"main-title\"\n          style={{\n            textAlign: \"center\",\n            color: \"rgb(129, 22, 27)\",\n            marginTop: \"15px\"\n          }}\n        >\n          Vídeo (YouTube)\n        </h3>\n\n        <Row>\n           <Input\n            style={{ flex: 1 }}\n            placeholder=\"Ex: https://www.youtube.com/watch?v=5qdtbMvC2Rs\"\n            value={video}\n            onChange={handleChangeVideo}\n          />\n        </Row>\n\n        <h3\n          className=\"main-title\"\n          style={{\n            textAlign: \"center\",\n            color: \"rgb(129, 22, 27)\",\n            marginTop: \"15px\"\n          }}\n        >\n          Folheto e Manual\n        </h3>\n        <Row style={{ flexWrap: \"wrap\", justifyContent: \"center\", width: \"50%\", margin: \"auto\" }}>\n          <div style={{ border: '2px dotted lightgrey', padding: '5px', minHeight: \"100px\", flex: 1, marginRight: \"5px\", position: \"relative\"}}>\n          { folheto ? <FontAwesomeIcon\n                        icon={faTrash}\n                        style={{\n                          width: \"16px\",\n                          position: \"absolute\",\n                          borderRadius: \"10px\",\n                          padding: \"3px\",\n                          background: \"rgb(129, 22, 27)\",\n                          color: \"white\",\n                          right: \"13px\",\n                          top: \"10px\",\n                          cursor: \"pointer\",\n                          zIndex: \"9\"\n                        }}\n                        onClick={() => setFolheto(null)}\n                      /> : null}\n            <label htmlFor=\"folheto\" style={{ cursor: \"pointer\", minHeight: \"100px\",  width: \"100%\",display: \"flex\", justifyContent: \"center\", alignItems: \"center\", textAlign: \"center\"}}>\n              FOLHETO <br /><br />\n              {folheto ? folheto.name : \"Clique para escolher um arquivo\"}\n            </label>\n            <input style={{ width: 0}} type=\"file\" name=\"folheto\" id=\"folheto\" onChange={folhetoChange}  /> \n          </div>\n\n          <div style={{ border: '2px dotted lightgrey', padding: '5px', minHeight: \"100px\", flex: 1, position: \"relative\"}}>\n          { manual ? <FontAwesomeIcon\n                        icon={faTrash}\n                        style={{\n                          width: \"16px\",\n                          position: \"absolute\",\n                          borderRadius: \"10px\",\n                          padding: \"3px\",\n                          background: \"rgb(129, 22, 27)\",\n                          color: \"white\",\n                          right: \"13px\",\n                          top: \"10px\",\n                          cursor: \"pointer\",\n                          zIndex: \"9\"\n                        }}\n                        onClick={() => setManual(null)}\n                      /> : null}\n            <label htmlFor=\"manual\" style={{ cursor: \"pointer\", minHeight: \"100px\",  width: \"100%\",display: \"flex\", justifyContent: \"center\", alignItems: \"center\", textAlign: \"center\"}}>\n            MANUAL <br /><br />\n            {manual ? manual.name : \"Clique para escolher um arquivo\"}</label>\n            <input style={{ width: 0}} type=\"file\" name=\"manual\" id=\"manual\" onChange={manualChange}  /> \n          </div>\n        </Row>\n\n      </div>\n\n      <Button\n        onClick={() =>\n          addMachine({\n            name,\n            manufacturer,\n            description,\n            mainFeatures,\n            category,\n            specifications,\n            video\n          }, machineFiles, sewingTypeFile, refProdFiles, {folheto, manual },function (err, data) {\n            if (err) {\n              setSnackBar({\n                result: 'error',\n                message: err,\n                open: true\n              })\n              return;\n            }\n            setSnackBar({\n              result: 'success',\n              message: 'Máquina criada com sucesso',\n              open: true\n            })\n\n            cleanForm()\n          })\n        }\n      >\n        Adicionar máquina\n      </Button>\n    </>\n  );\n\n  function cleanForm() {\n    setName(\"\");\n    setDescription(\"\");\n    setManufacturer(\"\");\n    setCategory(\"\");\n    setMainFeatures(\"\");\n    setSpecifications({\n      modelo: \"\",\n      motor: \"\",\n      alturaCalcador: \"\",\n      comprimentoDoPonto: \"\",\n      corteDeLinha: \"\",\n      velocidadeMaxima: \"\",\n      numeroDeAgulhas: \"\",\n      painelTouchScreen: \"\",\n      tipoDeAgulha: \"\"\n    });\n    setMachineFiles({\n      machineFile1: null,\n      machineFile2: null,\n      machineFile3: null,\n      machineFile4: null,\n      machineFile5: null,\n    })\n\n    setRefProdFiles({\n      refProdFile1: null,\n      refProdFile2: null,\n      refProdFile3: null,\n      refProdFile4: null,\n    })\n\n    setFolheto(null)\n    setManual(null)\n\n    setSewingTypeFile(null)\n  }\n}\n\nexport const ImageContainer = styled.div`\n  img {\n    max-width: ${props => props.maxWidth};\n  }\n`;\n\nexport const Row = styled.div`\n  display: flex;\n  width: 100%;\n  flex-direction: row;\n  justify-content: space-between;\n  input {\n    margin-right: 5px;\n  }\n  select {\n    margin-right: 5px;\n  }\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAOA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAWA;AACA;AACA;AAHA;AAVA;AAAA;AACA;AAeA;AACA;AAEA;AAFA;AAIA;AACA;AAtBA;AAwBA;AACA;AAFA;AAvBA;AAAA;AACA;AA0BA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AA9CA;AAgDA;AACA;AACA;AACA;AACA;AALA;AA/CA;AAAA;AACA;AADA;AAwDA;AACA;AACA;AACA;AACA;AALA;AAvDA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAiEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAjGA;AAAA;AAAA;AACA;AAmGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAHA;AAKA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAFA;AAFA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AADA;AAMA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AACA;AACA;AAAA;AADA;AAMA;AACA;AACA;AACA;AAFA;AAFA;AAWA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAJA;AASA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AAFA;AADA;AAJA;AAYA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AAFA;AADA;AAJA;AAcA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AAFA;AADA;AAJA;AAYA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AAFA;AADA;AAJA;AAYA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAJA;AAWA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AAFA;AADA;AAJA;AAYA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AAFA;AADA;AAJA;AAaA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AAFA;AADA;AAJA;AAaA;AACA;AACA;AACA;AAFA;AAFA;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AATA;AAaA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AATA;AAYA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AATA;AAYA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AATA;AAYA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AATA;AAcA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AATA;AAYA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AATA;AAYA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AATA;AAYA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AATA;AAeA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAUA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AATA;AAcA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAaA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AAAA;AAAA;AAdA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AAAA;AAAA;AAdA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAQA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAzBA;AADA;AACA;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAIA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}